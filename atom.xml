<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xautjzd]]></title>
  <link href="http://xautjzd.github.io/atom.xml" rel="self"/>
  <link href="http://xautjzd.github.io/"/>
  <updated>2013-08-26T09:47:50+08:00</updated>
  <id>http://xautjzd.github.io/</id>
  <author>
    <name><![CDATA[xautjzd]]></name>
    <email><![CDATA[xautjzd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim文件的折叠与展开方式]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/25/vim-folding-and-unfolding/"/>
    <updated>2013-08-25T16:00:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/25/vim-folding-and-unfolding</id>
    <content type="html"><![CDATA[<p>最近一直在用Vim学习Ruby,但是一直有个问题困扰：</p>

<p>那就是文件无法折叠，但是我记得以前看过Vim的视频，里面见别人用到了折叠与展开。文件比较小时，此功能便无用，但一旦文件量大时，折叠与展开便显得尤为重要了。</p>

<p>折叠的方式有以下几种：</p>

<ol>
<li>manual</li>
<li>indent</li>
<li>syntax</li>
<li>marker</li>
<li>expr</li>
<li>diff</li>
</ol>


<h3>1. Manual method</h3>

<p>vim默认的折叠方式是此种方式，不需要设置即可。要启用其他方式还得采用<code>:set foldmethod=xxx</code>或者<code>:set fdm=xxx</code>来设置。</p>

<p><strong>使用方法</strong>：</p>

<p><code>v</code>或者<code>V</code>进入visual mode,然后选中要折叠的文字，按<code>zf</code>便可折叠，折叠后按<code>za</code>或者<code>zO</code>便展开。</p>

<p>同时也可以通过<code>zfnj</code>的方式将接下来的n行折叠。类似也有<code>zfnk</code>等;<code>zR</code>则打开所有的折叠。总结下来就是：</p>

<ul>
<li>zf        => create a fold</li>
<li>za        => unfold</li>
<li>zf#j  => fold down # lines</li>
<li>zf#k  => fold up #lines</li>
<li>zR        => unfold all</li>
</ul>


<h3>2. Indent method</h3>

<p>缩进方式主要是根据代码缩进的方式来折叠/展开代码。要使用缩进方式，则需要做配置，<code>:set foldmethod=indent</code>或者在~/.vimrc中配置：<code>set foldmethod=indent</code>。</p>

<p>其快捷键如下：
zM      => fold all
zR      => unfold all
za      => fold/unfold</p>

<h3>3. Syntax method</h3>

<p>采用syntax方式，则只需如下配置即可：</p>

<pre><code>:set fdm=syntax
</code></pre>

<p>按键方式与上述相似</p>

<h3>4. Marker method</h3>

<p> 使用markder方式，则做如下配置：</p>

<pre><code>:set foldmethod=marker
</code></pre>

<p> 或</p>

<pre><code>:set fdm=marker
</code></pre>

<p>默认的marker折叠/展开标记为<code>}</code>.</p>

<p>将要折叠/展开的代码通过<code>}</code>包含起来即可。当然也可以自定义标记。定义方法如下：</p>

<pre><code>:set foldmarker= start,end
eg: set foldmarker= /*,*/

/*
     1. Ruby
     2. Python
     3. C++
     4. PHP
*/
</code></pre>

<p>快捷键如下：</p>

<ul>
<li>za        => fold/unfold</li>
<li>zM        => fold all</li>
<li>zR        => unfold all</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux活动发起]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/20/linux-activity-sponsoring/"/>
    <updated>2013-08-20T19:04:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/20/linux-activity-sponsoring</id>
    <content type="html"><![CDATA[<p>独乐乐不如众乐乐，独自一人埋头苦学不如一群兴趣相投之人的一起交流。记得以前大一大二时，希望能有一个领路人领着自己学习，帮自己找准学习的方向，毕竟当时太年轻，太多东西不了解，所以不知道软件这行业该学习什么，哪些东西比较有兴趣，一切源于自己接触的太少，身边也没有可交流之人。再加上学校大一大二和大三大四分隔新旧两校区，交流就更少。</p>

<p>正是因为自己的这些经历，然后再加上近来参加西安的rubyist party，促使了我组建Linux小组并且定期举办活动的冲动。一个人的埋头苦学，所见所闻永远局限在某个狭小的空间，只有走出去，与他们交流才能拓宽自己的知识面，提升自己的认知度，也算是多了一些朋友，多了一些交流。正所谓话不投机半句多，与自己志不同道不和的人交流真是有点对牛弹琴的感觉。所以要交流得找兴趣相投志同道合之人。</p>

<p>打算成立的小组规模大致10人左右，无需太多，也不希望有滥竽充数的现象。所以希望小组成员能满足以下条件：</p>

<ul>
<li>对软件感兴趣</li>
<li>熟悉Linux(基本操作一般没问题)</li>
<li>Vim | Emacs</li>
</ul>


<p>具备以下更佳：</p>

<ul>
<li>Git</li>
<li>Ruby/Python/Lisp/Scala/Prolog</li>
<li>个人博客</li>
</ul>


<p>初期打算:</p>

<ul>
<li>每周一次Party（主要技术交流）</li>
</ul>


<p>有兴趣的学习请联系我，联系方式：</p>

<ul>
<li>新郎微薄：xautjzd</li>
</ul>


<p>其他联系方式见我的<a href="http://xautjzd.github.io/blog/aboutme">About</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中symbol与string的区别]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/18/difference-between-symbol-and-string/"/>
    <updated>2013-08-18T20:50:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/18/difference-between-symbol-and-string</id>
    <content type="html"><![CDATA[<p>记得当初学习Ruby基本语法时，还为Symbol与String的异同纠结了好久，后来经过一段时间的摸索，大致有了了解，但让我给他人解释，这点我还是办不到。但是今天看到了一篇<a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">博文</a>,让我彻底明白他们的区别。</p>

<h3>symbol定义</h3>

<p>Symbol其实就是string加上前缀：。</p>

<h3>二者异同点</h3>

<p>其实Symbol与String本质相同，是string 的两种不同呈现方式。由于受SmallTalk影响，Ruby一切皆对象。所以每次给string赋值，<code>name="xautjzd"</code>其实都是在内存中创建一个新对象。每次创建的对象的object_id都不相同。</p>

<p>而symbol则不同，symbol创建一次即可。以后所有的操作都是指向先前创建的对象。所以object_id相同。</p>

<p>不同点大致有三：
1. symbol为常量，值不能改变。
2. 多次使用同一个symbol,object_id相同，而多次使用string,每个对象有不同的object_id。
3. String的方法,eg:#upcase,#split不能用于Symbol。</p>

<h3>参考网址</h3>

<p><a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html</a>(<a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim学习资源]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/18/vim-learning-resource/"/>
    <updated>2013-08-18T13:48:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/18/vim-learning-resource</id>
    <content type="html"><![CDATA[<h3>实用的快捷方式</h3>

<ul>
<li>gf  快速跳转到定义</li>
<li><code>&lt;C + 6&gt;</code>  返回到上次编辑的文档</li>
<li>%  括号匹配{}<a href=""></a></li>
<li><code>#/*,g#/g*</code>  向前/向后搜索光标所在的词</li>
<li>gi  跳转到上次编辑的位置</li>
<li>gi  显示光标所在字符的编码</li>
<li>gH  开始选择行模式</li>
<li>vi&#8221;  选中&#8221;之间的文本(不包括&#8221;)</li>
<li>vi{  选中{之间的文本（不包括{）</li>
<li>ci(  改变之间的文本</li>
<li>di[  删除[之间的文本(不包括[)</li>
<li>da[  删除[之间的文本(包括[),ca、va类似</li>
<li>C  修改至行尾</li>
<li>D  删除至行尾</li>
</ul>


<!-- more -->


<ul>
<li>[{  跳转到光标所在位置的{.]},[(类似</li>
<li>F/f+char  向左/向右跳转到char的位置</li>
<li><code>&gt;&gt;</code>  缩进光标所在行。eg:5>></li>
<li><code>&lt;&lt;</code>  取消缩进光标所在行</li>
<li><code>&gt;%</code>  大括号及括号内的内容都缩进(光标需放在{或者}上)</li>
<li>==  文本对其当前行</li>
<li>=%  (re)indent the current braces{&hellip;}</li>
<li>gg=G  全文对齐</li>
<li>H  跳转到屏幕上方</li>
<li>M  跳转到屏幕中间</li>
<li>L  转到屏幕下方</li>
</ul>


<h3>参考文档</h3>

<ul>
<li><a href="http://c9s.blogspot.com">c9s</a>的<a href="http://c9s.blogspot.com/2009/08/vim-hacks-coscup.html">Vim Hacks</a></li>
<li><a href="http://vim.wikia.com/wiki/Best_Vim_Tips">Vim Tips</a></li>
<li><a href="http://www.vim.org/">Vim官网</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更换Octopress主题]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/17/change-theme-of-blog/"/>
    <updated>2013-08-17T22:56:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/17/change-theme-of-blog</id>
    <content type="html"><![CDATA[<p>Octopress博客搭建已经有一阵了，但一直采用的默认的主题，没时间更换。今天特意抽时间来更换下，先上<a href="http://octopress.org/docs/theme/">Octopress官网</a>了解了下更换Theme的原理，然后上Octopress所在的源码托管平台GitHub，在其<a href="https://github.com/imathis/octopress/wiki">Wiki</a>上找到了<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方Themes</a>,便从前到后大致将各种themes都预览了一遍，最后选择了<a href="https://github.com/shashankmehta/greyshade">Greyshade主题</a>,安装方法官网写的已经非常详细，这里再啰嗦一遍：</p>

<h3>Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress  #octopress directory
</span><span class='line'>$ git clone git@github.com:shashankmehta/greyshade.git .themes/greyshade
</span><span class='line'>$ echo "\$greyshade: color;" &gt;&gt; sass/custom/_colors.scss //Substitue 'color' with your highlight color
</span><span class='line'>$ rake "install[greyshade]"
</span><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<p>至此，安装过程便已完成。</p>

<p>左侧的显示效果主要配置在_config.yml文件中。</p>

<h3>pages显示</h3>

<p>Octopress默认只有Homepage和Archives两个导航菜单，不满足要求，我便又添加了&#8221;编程&#8221;、“Linux”、“所思所想”和“关于我”这几个。“关于我”的页面为静态页面，在source/blog/aboutme/下，其他的几个需要将相关的文章显示在相应的导航菜单下，便需做如下配置：</p>

<figure class='code'><figcaption><span>source/thinking/index.markdown</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: category_index
</span><span class='line'>title: Thinking
</span><span class='line'>category: Thinking
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<p>这样后，只要new_post并且category为Thinking的页面都会集中在所思所想对应的页面显示。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装Powerline过程中的收获]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/16/powerline-vs-airline/"/>
    <updated>2013-08-16T22:12:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/16/powerline-vs-airline</id>
    <content type="html"><![CDATA[<p>Powerline插件已经多次耳闻目见，但是一直没做尝试，今天再次看到便忍不住试了下，结果还没成功。可能是由于字体的原因吧，在找答案的过程中邂逅了airline,据说比powerline加载更快，而且还无需安装字体。所以便果断地换为airline。只需在vimrc中加入<code>bundle bling/vim-airline</code>即可。当然前提是在~/.vimrc中已有如下配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set </span><span class="nv">laststatus</span><span class="o">=</span>2  <span class="err">&quot;</span>Always show the status line
</span><span class='line'><span class="nb">set </span>noshowmode
</span><span class='line'><span class="nb">set </span><span class="nv">t_Co</span><span class="o">=</span>256
</span></code></pre></td></tr></table></div></figure>


<p>配置好后效果如下图所示：
<img src="http://xautjzd.github.io/images/airline.jpg" alt="" /></p>

<p>配置好后，在bash中显示没问题，但是在tmux中显示就有问题了，先前配置的效果无法显示。网上也找了好久答案，才得以解决，方法如下：</p>

<p><strong>1.$vim ~/.tmux.conf</strong></p>

<p>在~/.tmux.conf文件中添加如下代码：</p>

<pre><code>set -g default-terminal "screen-256color"
</code></pre>

<p><strong>2.$vim ~/.bashrc</strong></p>

<p>在~/.bashrc中添加如下代码：</p>

<pre><code>alias tmux="tmux -2"
</code></pre>

<p><code>tmux -2</code>是强制tmux的终端支持256种颜色。</p>

<p>配置好后，显示没问题，但是在写博客的过程中发现vim突然不能输入中文了，不知为何。最后在~/.vimrc添加：</p>

<pre><code>set guifont=*
</code></pre>

<p>就顺利解决，不过原因待深究，要学的东西太多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下截图工具shutter的安装与配置]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/16/install-and-config-shutter/"/>
    <updated>2013-08-16T16:57:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/16/install-and-config-shutter</id>
    <content type="html"><![CDATA[<p>我一直使用的是Fedora17，自带的截图工具实在不敢恭维，但也就这样断断续续的用着，不过也用的不多。但今天突然鬼使神差的搜了下其他的截图工具，Google搜了下，发现好多提到shutter，既然这么多文章都提到，说明肯定着实不赖，便尝试了下。安装及配置如下：</p>

<h3>1.安装</h3>

<p>安装过程很简单，执行下面命令即可：</p>

<pre><code>#yum install shutter
</code></pre>

<h3>2.配置</h3>

<p>QQ截图快捷键<code>&lt;ctrl&gt;+&lt;alt&gt;+A</code>用习惯了，所以也对shutter继续保留这个快捷键。具体配置方法如下：
在System Tools>System Settings>Keyboard>Shortcuts>Custom Shortcuts中添加了三个快捷键：</p>

<ul>
<li><p>截图整个屏幕（shutter -f）</p></li>
<li><p>截图当前活动窗口(shutter -a)</p></li>
<li><p>截图选定区域(shutter -s)</p></li>
</ul>


<p>具体配置及对应的快捷键设置参考下图：
<img src="http://xautjzd.github.io/images/shutter-config.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[户县之行]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/11/travel-to-hu-xian/"/>
    <updated>2013-08-11T19:51:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/11/travel-to-hu-xian</id>
    <content type="html"><![CDATA[<p>前天应阿亮之邀，去了趟少春家，现将所见所闻予以记录，聊以慰藉。</p>

<p>我们三（阿亮，少春和我）于前天下午将近六点出发去户县甘河镇的少春家，大致七点半左右到。到家时，天刚暗下来。从这一刻开始到今天下午，差不多有两天的时间体验了下陕西乡村的风土人情，而体验的最佳方式则是通过味觉和视觉。</p>

<p>首先，从味觉方面说，大致品尝了他家的臊子面，煎饼和yuyu（只知其音，不知其写法,也念he&#8217;r)。以前只是听陕西的同学说过他们的习俗：早晚稀饭，中午吃面，而且稀饭比较稀，上面几乎看不到米粒，碗底才有。经此一见，果不其然。不过他们煮稀饭的米和我家乡不同，第一次见识到糯米也可用于煮稀饭，以前我只知：糯米用于蒸糯米饭、做汤圆和糍粑。中午吃的是臊子面，而臊子面的核心在于臊子。阿姨做的臊子挺不错，味道很好，唯一不足的是醋放的有点多，略酸，不过不太影响总体的感觉，至少比食堂阿姨做的强好几倍。盛面的家伙很给力，直接上脸盆。碗也给力，平时在食堂吃一碗足已，但这两天都是至少吃一碗。少春则更给力，今天中午直接吃了四碗。昨晚吃的是煎饼，和我家乡的饼有点像，只是做法不同，厚薄不同，但是不得不说味道比我家乡的那个饼味道略好，这得益于我喜欢吃薄饼，而我家乡的那饼则略显厚。</p>

<!-- more -->


<p>其次，从视觉方面说，给我印象比较深刻的是他们村公路和秦岭。我比较喜欢他们的村设计，每个村的入口都会有石碑写村名，而且不少村的入口都做的不错，与旅游景点的大门类似，而且带点古朴气息。再者，村里的房屋都是一排一排的，很工整，而且前后两排间的路很宽，车子都能自由出入。几乎每家每户都有院子，院里都种的平时吃的蔬菜，如茄子、西红柿、豇豆、韭菜和辣椒等，很是惬意。于此相比，我所在的村子就略显乱，房子盖的不是很整齐，而且间距过小，特别是村子中间，车子根本不能进入。不过房屋的规划属于历史遗留问题，难以改观了。</p>

<p>今天上午吃完饭后，我们三骑了两辆电动车便动身驶向秦岭脚下，大约一个小时的车程。风景着实不错，秀色可人，给人一份安宁。到达之后，没做停留，便又沿着环山公路继续行驶，一直骑到户县与周至的边界，并且还往前走了一段距离才往回走。结果走了大致不到20分钟，其中一辆车便没电，这时只能采取一车拉一车的方式了，这是个技术活，不过阿亮还是很给力，一手握绳，一手控制方向。就这么行驶了大致有20分钟吧，便来到一个镇上，找了个快充，给两辆车都充了10分钟的电，然后又继续行驶了。阿亮大致行驶了不到15分钟又没电。又得拉着走了，就这么拉着也至少有半个小时才到家的，也真亏了阿亮的手。当然此次行驶过程中少不了少春这位领路人，领的路还都是不错的，不枉领路人的身份。</p>

<p>这两天总体感觉相当不错，很是满足。我一直想体验下陕西的那种乡土风情，但是一直没实现，这次多亏了少春给了这次机会，再此表示感谢，谢谢阿姨的热情款待和一日三餐的饭菜！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端分屏工具tmux的安装与常用操作]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration/"/>
    <updated>2013-08-08T16:12:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration</id>
    <content type="html"><![CDATA[<h2>1. tmux简介</h2>

<p>tmux是terminal multiplexer的简称，是一款终端分屏的工具，可以在同一屏幕中划分出多个独立的shell环境，这样便于对比，唯一的缺陷是窗口比较小而已。一个server可以有多个session,一个session可以有多个windows,一个windows可以有多个pane.具体见<a href="http://tmux.sourceforge.net/">官网</a>介绍。</p>

<h2>2. 安装</h2>

<p>采用相应系统的包管理器即可安装。我装的是fedora,现以fedora为例：</p>

<pre><code>#yum install tmux
</code></pre>

<p>包不到1M大小，很快便安装完成。</p>

<!-- more -->


<h2>3. 操作</h2>

<p>首先，运行tmux。</p>

<pre><code>$tmux
</code></pre>

<p>然后可以水平分屏和纵向分屏。其常用的快捷键如下：</p>

<ul>
<li><p>水平分屏 :<code>&lt;c + b&gt; "</code>即按下ctrl + b后，再按双引号(shift + &lsquo;键)</p></li>
<li><p>垂直分屏 :<code>&lt;c + b&gt; %</code></p></li>
<li><p>新建窗口 :<code>&lt;c + b&gt; c</code></p></li>
<li><p>重命名窗口:<code>&lt;c + b&gt; ,</code></p></li>
<li><p>窗口切换 :<code>&lt;c + b&gt; number</code>，其中number为窗体的编号，从0开始。</p></li>
<li><p>切换到bash:<code>&lt;c + b&gt; d</code></p></li>
<li><p>切换回tmux:<code>$tmux attach</code></p></li>
<li><p>查看帮助文档：<code>&lt;c + b&gt; ?</code></p></li>
</ul>


<p>1.新建一个session</p>

<pre><code>tmux new-session -s sessionname(自己指定)
</code></pre>

<p>2.杀死一个session</p>

<pre><code>tmux kill-session -t sessionname
</code></pre>

<p>3.杀死所有session</p>

<pre><code>tmux kill-server
</code></pre>

<p>4.列出新建的session</p>

<pre><code>tmux ls(tmux list-sessions)
</code></pre>

<p>4.附加一个session</p>

<pre><code>tmux a -t sessionname
</code></pre>

<p>另外，tmux也非常适合结对编程，当两个人可以连接同一台电脑时，其中一个人在终端上的操作，另一个在终端能清楚的看到。操作方式如下：</p>

<p>A操作：$tmux new-session -s test</p>

<p>B操作：$tmux a(ttach) -t test</p>

<p>这样之后，A在终端上的一切操作B都能看到。</p>

<p>其他具体快捷方式，请参考帮助文档。</p>

<p>也可以参考：</p>

<p>1.<a href="http://happycasts.net/episodes/41?autoplay=true">http://happycasts.net/episodes/41?autoplay=true</a></p>

<p>2.<a href="http://caok1231.com/blog/2013/04/14/tmux/">http://caok1231.com/blog/2013/04/14/tmux/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim的代码自动补齐插件——UltiSnips]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/03/vim-ultisnips/"/>
    <updated>2013-08-03T15:12:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/03/vim-ultisnips</id>
    <content type="html"><![CDATA[<p>暑假时间充足，便又开始学习自己喜欢的Ruby。而学Ruby的最佳环境是Mac,其次是Linux,最次是Windows。Mac买不起，只能在Linux上折腾了，一台台式机装的Fedora17，自己的本是xp系统，装了不少微软的一套东西，毕竟教研室的项目都是在.net环境下进行的，不敢轻易换系统，所以便在本上装了个VirtualBox虚拟机，虚拟了一个Ubuntu。上面也配好了Ruby环境，毕竟本方便，带到哪里都可以学，但平时的Linux编程都是在台式机下，毕竟性能比虚拟机好。</p>

<p>而学习Ruby一般都是在Vim/Emacs/SublimeText 2下，RubyMine貌似很适合开发Ruby，由于是商业产品，没钱购买也就舍弃了，毅然决然的选择了Vim.都说高手使用的是Vim，想必必有可取之处。但是Vim的学习路线比较陡峭，开始是一段痛苦期，经过一段时间的摧残后，甜蜜的时光便来临了，各种强大而高效的插件让你目瞪口呆，顿时感觉其他IDE都蒻爆了。幸好我以前对Vim的基本操作便有了了解，所以再次学习起来便不那么痛苦，甚至不想回到Windows环境，不想再用其他的Editor。我现在用的插件并且给我印象深刻的大致有这么一些：Vundle,Ctrlp/command-T,UltiSnips/Snipmate,YouCompleteMe/SuperTab,NerdTree,Tagbar,FuzzyFinder,vim-rails，Markdown等。</p>

<!-- more -->


<p>其中Vundle作为Vim的插件管理神器必不可少，让安装插件变得非常方便，类似的插件也有pathogen。具体安装方法见<a href="https://github.com/gmarik/vundle">GitHub</a>.也可以参考我写的一篇关于Vundle的<a href="http://xautjzd.github.io/blog/2013/07/27/vim-vundle-install-and-config/">博文</a>。</p>

<p>而CtrlP则绝对是文件切换的神器，在多个文件间来回切换。也可以用:vs垂直分屏或者:sp水平分屏,这样最适合多个文件间的对比。&lt;ctrl-p>调出CtrlP候选文件,然后通过Up/Down键来选择文件。</p>

<p>UltiSnips则是自动补齐代码片段的神级插件，功能类似的有Snipmate插件。UltiSnips对常见的各种语言都有支持。代码补齐是通过编辑的文件后缀名来区分，如编辑xxx.html时，输入ul然后按Tab键则自动生成了<code>&lt;ul&gt;&lt;ul&gt;</code>片段，其他语言也类似，都有相应的关键字，具体每种语言的关键字参考UltiSnips目录下的xxx.snippets，自己也可以补充。</p>

<p>YouCompleteMe插件是一个代码提示功能，输入一部分然后就会出现候选的部分可供选择，不需要全部输入。类似的插件还有SuperTab。通过名字也可以看出它提供的候选词中也包括刚才输入的单词。默认的选择是通过Tab键来确定的，但由于和UltiSnips冲突，所以需要换默认的快捷方式，方法如下：</p>

<pre><code>"set YouCompleteMe trigger key 
let g:ycm_key_list_select_completion = ['&lt;c-n&gt;', '&lt;Down&gt;']
let g:ycm_key_list_previous_completion = ['&lt;c-p&gt;', '&lt;Up&gt;']
</code></pre>

<p>NerdTree提供一个目录结构，让习惯图形界面的朋友找到亲切感，作用不必多说。</p>

<p>Tagbar则配合ctags则提供文件的导航，将文件的关键字提取出来。ctags需要在目录下生成一个tags文件，生成方法:</p>

<pre><code>ctags -R yourdir  #生成tags文件
</code></pre>

<p>FuzzyFinder是一个模糊匹配的文件搜索插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建我的第一个rails程序]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/30/create-my-first-rails-app/"/>
    <updated>2013-07-30T17:22:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/30/create-my-first-rails-app</id>
    <content type="html"><![CDATA[<h2>开启Mysql服务</h2>

<p>我的一个rails程序是采用mysql数据库，不是默认的sqlite3.所以前提是已经安装了mysql。由于Mysql安装了好久，但是很少使用。所以服务没有启动，近来可能会频繁使用，便设置为开机自动启动了。设置方法为:<code>#systemctl enable mysqld.service</code>或者<code>service mysqld start</code>。</p>

<h2>安装mysql驱动</h2>

<p>rails应用中使用msyql,需要Mysql对应的ruby驱动：msyql2。安装方式：</p>

<pre><code>$gem install mysql2
</code></pre>

<p>安装完成后可通过<code>$rails console</code>进行测试。测试方法为：</p>

<pre><code>&gt;require 'mysql2'
&gt;client=Mysql2::Client.new(:host =&gt; "localhost", :username=&gt;"root", :password=&gt;"your_password", :database=&gt;"your_db")
=&gt; #&lt;Mysql2::Client:0xa058aac&gt;
&gt; client.query("select version()")
=&gt; #&lt;Mysql2::Result:0xa05233c&gt;
</code></pre>

<p>这样表示已经连接成功。</p>

<p>到此为止，前期工作已经完成，后面就开始动手了。</p>

<!-- more -->


<h2>创建rails应用</h2>

<pre><code>$rails new railsapp -d msyql  #指定数据库为mysql,否则采用默认的sqlite3
$cd railsapp
$rails server     #启动内置服务器
</code></pre>

<p>启动后，可以通过<code>http://localhost:3000</code>访问刚才创建的应用。一个简单的应用便就此完成了。</p>

<h2>添加应用</h2>

<p>在上面建立的应用程序中，可以找到config/database.yml文件，里面是数据库的配置，默认会生成三个数据库development/test/production,同时也需要在其中添加username和password,分别对应自己的设置，database设为自己想要的数据库名。host设为localhost,port使用系统默认即可。</p>

<p>配置完成后，开始进行数据库的生成。</p>

<pre><code>$rake db:create
</code></pre>

<p>生成的只是空数据库，没有任何表。下面创建第一张表，通过rails的scaffold模式来生成表。</p>

<pre><code>$rails generate scaffold user username:xautjzd email:xautjzd@gmail.com 
</code></pre>

<p>通过此命令会创建相应的controller,views,model和数据库脚本，此时还没有创建表。通过：</p>

<pre><code>$rake db:migrate
</code></pre>

<p>执行上一步生成的数据库脚本。</p>

<h2>数据库回滚</h2>

<p>通过：</p>

<pre><code>$rake db:rollback
</code></pre>

<p>回退上步操作，然后修改date_create_users_rb.其中的up方法来建表，而down方法来删表。修改完后通过</p>

<pre><code>$rake db:migrate
</code></pre>

<p>再次生成新的数据库</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加disqus评论到侧边栏]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/30/add-comments-to-sidebar/"/>
    <updated>2013-07-30T10:47:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/30/add-comments-to-sidebar</id>
    <content type="html"><![CDATA[<h2>新建comments.html文件</h2>

<p>添加评论到侧边栏与添加关于、文章分类和友情链接相似，需要在source/_includes/custom/asides/目录下添加comments.html模块，名字根据自己的喜好可以换成其他的，如xxx.html，然后在comments.html里添加如下内容：</p>

<figure class='code'><figcaption><span>source/\_includes/custom/asides/comments.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;comment_sidebar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>近期评论<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://zhengdongjiang.disqus.com/recent_comments_widget.js?num_items=5&amp;hide_avatars=0&amp;avatar_size=32&amp;excerpt_length=20&quot;</span><span class="nt">&gt;&lt;/script&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://disqus.com/&quot;</span><span class="nt">&gt;</span>Powered by Disqus<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中zhengdongjiang为我disqus对应此网站的shortname，这就不要照搬了，换成你对应的名字即可。</p>

<h2>修改_config.yml文件</h2>

<figure class='code'><figcaption><span>\_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="err">   </span><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/comments.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/friend_sites.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="c1"># Each layout uses the default asides, but they can have their own asides instead. Simply uncomment the lines below</span>
</span><span class='line'><span class="err">    </span><span class="c1"># and add an array with the asides you want to use.</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">blog_index_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/about.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/comments.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/friend_sites.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">post_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/about.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/comments.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/friend_sites.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="err">    </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora17下搭建Ruby和Rails环境]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/29/install-ruby-and-rails/"/>
    <updated>2013-07-29T20:59:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/29/install-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>不同的项目所用的ruby版本不同，所以为了方便不同项目ruby版本的切换，需要在同一个系统中安装多个ruby版本，并且针对不同的项目在不同的版本间切换，为了方便ruby版本的管理，采用<a href="https://rvm.io/">RVM</a>进行管理。</p>

<h2>1.安装RVM</h2>

<pre><code>#curl -L https://get.rvm.io | bash -s stable
</code></pre>

<p>一会儿之后rvm便安装完成,安装位置为/usr/local/rvm目录下，网上很多教程都是使用一般用户权限管理，但是我也尝试过采用一般用户权限安装，但是始终不会安装在~/usrname/.rvm目录下，还是提示安装在/usr/local/rvm下，但是没有写的权限。可能是fedora系统的原因吧，没有深究。使用：</p>

<pre><code>#source /usr/local/rvm/scripts/rvm
</code></pre>

<p>使rvm配置生效。然后采用：</p>

<pre><code>#rvm -v
</code></pre>

<p>查看rvm的版本。同时也可以通过<code>rvm info</code>查看rvm相关信息。</p>

<!-- more -->


<h2>2.安装Ruby环境</h2>

<p>使用<code>rvm install 1.9.3</code>会默认选择<code>http://ruby-lang.org</code>网站下载ruby源码然后进行编译，这样太慢。幸好淘宝提供了<a href="http://ruby.taobao.org/mirrors/ruby/">ruby的下载源</a>，我此次便采用的是先在淘宝的ruby源下载我想要的ruby版本1.9.3-p448，下载完成后，将其放到/usr/local/rvm/archives/目录下，然后再执行<code>rvm install 1.9.3-p448</code>，它便能识别已有的ruby源码包，进行解压和编译一系列过程。大致几分钟便可完成。</p>

<p>下面是我采用一般用户权限安装ruby出错。</p>

<figure class='code'><figcaption><span>一般用户安装ruby出错 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   <span class="nv">$ </span>rvm install 1.9.3-p448
</span><span class='line'>  Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>  No binary rubies available <span class="k">for</span>: fedora/17/i386/ruby-1.9.3-p448.
</span><span class='line'>  Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>  Installing requirements <span class="k">for </span>fedora, might require sudo password.
</span><span class='line'>  Requirements installation successful.
</span><span class='line'>  Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>  ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>  Archive checksum did not match, downloading again.
</span><span class='line'>  rm: cannot remove <span class="sb">`</span>ruby-1.9.3-p448.tar.bz2<span class="s1">&#39;: Permission denied</span>
</span><span class='line'><span class="s1"> curl: Can&#39;</span>t open <span class="s1">&#39;ruby-1.9.3-p448.tar.bz2&#39;</span>!
</span><span class='line'>  curl: try <span class="s1">&#39;curl --help&#39;</span> or <span class="s1">&#39;curl --manual&#39;</span> <span class="k">for </span>more information
</span><span class='line'>  There was an error<span class="o">(</span>23<span class="o">)</span>, please check /usr/local/rvm/log//*.log. Next we<span class="s1">&#39;ll try to fetch via http.</span>
</span><span class='line'><span class="s1"> Trying ftp:// URL instead.</span>
</span><span class='line'><span class="s1"> curl: Can&#39;</span>t open <span class="s1">&#39;ruby-1.9.3-p448.tar.bz2&#39;</span>!
</span><span class='line'>  curl: try <span class="s1">&#39;curl --help&#39;</span> or <span class="s1">&#39;curl --manual&#39;</span> <span class="k">for </span>more information
</span><span class='line'>  There was an error<span class="o">(</span>23<span class="o">)</span>, please check /usr/local/rvm/log//*.log
</span><span class='line'>  There has been an error fetching the ruby interpreter. Halting the installation.
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<h2>3.设置Ruby版本</h2>

<p>通常系统都会安装多个Ruby版本，可通过<code>rvm list</code>查看系统已安装的ruby版本。但需要指定某一版本为系统默认版本。</p>

<pre><code>#rvm use 1.9.3 --default
</code></pre>

<p>我使用的版本为1.9.3，所以指定为默认版本。</p>

<p>安装Ruby的过程中会自动安装gem，通过下列方法查看其版本</p>

<pre><code>#ruby -v
#gem -v
</code></pre>

<p>同时替换gem的下载源为淘宝源：</p>

<pre><code>#gem source -r https://rubygems.org
#gem source -a http://ruby.taobao.org
</code></pre>

<h2>4.安装Rails环境</h2>

<p>采用：</p>

<pre><code>#gem install bundler rails
</code></pre>

<p>安装bundle和rails。</p>

<p>安装完成后进行测试：</p>

<pre><code>#rails -v
#bundle -v
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim下的的插件管理神器——Vundle]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/27/vim-vundle-install-and-config/"/>
    <updated>2013-07-27T20:38:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/27/vim-vundle-install-and-config</id>
    <content type="html"><![CDATA[<p>断断续续用Vim也不少时间了，但是从来没有进行过复杂的Vim配置，每每需要插件都是网上寻求安装方式。但是当插件多了管理也便变得繁琐，最后终于让我结识了插件管理神器——Vundle，用过的人都说好用，所以我便也尝试了，网上也有一部分人采用pathogen来进行插件管理，但是据说没有Vundle好用，也便没有尝试，下面对我使用Vundle做一个总结。</p>

<p>首先Vundle采用git插件的git repo以及vim-scripts维护的GitHub repo, 自动安装, 更新和卸载插件. 把这些繁杂的工作变得简单, 甚至, 成为一种享受.</p>

<h2>安装</h2>

<p><a href="https://github.com/gmarik/vundle">Vundle地址</a>,上面安装及配置步骤已经很详细，我在此再赘述下：</p>

<p>1.拷贝Vundle</p>

<pre><code>$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
</code></pre>

<p>上面步骤将vundle拷贝到本地的～/.vim/bundle/vundle目录下</p>

<p>2.Vundle配置</p>

<p>以下是我的配置文件：</p>

<!-- more -->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>    <span class="nb">set </span>runtimepath+<span class="o">=</span>~/.vim_runtime
</span><span class='line'>
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/basic.vim
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/filetypes.vim
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/plugins_config.vim
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/extended.vim
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/taglist.vim
</span><span class='line'>
</span><span class='line'>    <span class="nb">let </span><span class="nv">Tlist_Ctags_Cmd</span><span class="o">=</span><span class="s1">&#39;/usr/bin/ctags&#39;</span>
</span><span class='line'>    <span class="nb">let </span><span class="nv">Tlist_Inc_Winwidth</span><span class="o">=</span>0
</span><span class='line'>    <span class="nb">let </span><span class="nv">Tlist_Process_File_Always</span><span class="o">=</span>1
</span><span class='line'>    <span class="nb">let </span><span class="nv">Tlist_File_Fold_Auto_Close</span><span class="o">=</span>1
</span><span class='line'>    <span class="nb">set </span>autochdir
</span><span class='line'>
</span><span class='line'>    colorscheme molokai
</span><span class='line'>
</span><span class='line'>    try
</span><span class='line'>        <span class="nb">source</span> ~/.vim_runtime/my_configs.vim
</span><span class='line'>        catch
</span><span class='line'>        endtry
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;Below is vundle configuration</span>
</span><span class='line'><span class="s2">        set nocompatible               &quot;</span>disable vi compatibility
</span><span class='line'>        filetype off                   <span class="s2">&quot; required!</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        set rtp+=~/.vim/bundle/vundle/  &quot;</span><span class="nb">set </span>runtimepath
</span><span class='line'>        call vundle#rc<span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot; let Vundle manage Vundle  </span>
</span><span class='line'><span class="s2">        Bundle &#39;gmarik/vundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        &quot;</span>My Bundles here
</span><span class='line'>        Bundle <span class="s1">&#39;tpope/vim-fugitive&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;Lokaltog/vim-easymotion&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;rstacruz/sparkup&#39;</span>, <span class="o">{</span><span class="s1">&#39;rtp&#39;</span>: <span class="s1">&#39;vim/&#39;</span><span class="o">}</span>
</span><span class='line'>        Bundle <span class="s1">&#39;tpope/vim-rails.git&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;vim-scripts repos</span>
</span><span class='line'><span class="s2">        Bundle &#39;L9&#39;</span>
</span><span class='line'><span class="s2">        Bundle &#39;FuzzyFinder&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        &quot;</span>snippets
</span><span class='line'>        Bundle <span class="s1">&#39;http://github.com/gmarik/snipmate.vim.git&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;Syntax highlight</span>
</span><span class='line'><span class="s2">        Bundle &#39;cucumber.zip&#39;</span>
</span><span class='line'><span class="s2">        Bundle &#39;Markdown&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        &quot;</span>Utility
</span><span class='line'>        Bundle <span class="s1">&#39;SuperTab&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;repeat.vim&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;surround.vim&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;file-line&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;scrooloose/nerdtree&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;Navigation</span>
</span><span class='line'><span class="s2">        Bundle &quot;</span>http://github.com/gmarik/vim-visual-star-search.git<span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        &quot;</span>non github repos
</span><span class='line'>        Bundle <span class="s1">&#39;git://git.wincent.com/command-t.git&#39;</span>
</span><span class='line'>        <span class="s2">&quot;git repos on your local machine (ie. when working on your own plugin)</span>
</span><span class='line'><span class="s2">        &quot;</span>Bundle <span class="s1">&#39;file:///Users/gmarik/path/to/plugin&#39;</span>
</span><span class='line'>
</span><span class='line'>        filetype plugin indent on     <span class="err">&quot;</span> required!
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>其中将需要的插件用Bundle添加进来即可。如需要NERDTree插件，在github上找到它，找到的地址为：<a href="https://github.com/scrooloose/nerdtree.git">https://github.com/scrooloose/nerdtree.git</a></p>

<p>则在~/.vimrc里添加：</p>

<pre><code>Bundle 'scrooloose/nerdtree'
</code></pre>

<p>3.安装</p>

<p>推出刚才的配置文件，然后重新打开vim,并且执行:BundleInstall，这样NERDTree插件便安装完成，可以在~/.vim/bundle目录中查看。Vundle的特色在于使用git管理插件，更新方便，并且支持搜索。</p>

<p>:BundleInstall!更新插件，:BundleClean删除插件(只需在.vimrc中注释相应行), :BundleSearch查找插件。不同电脑间的同步只需通过.vimrc来实现（前提：安装git）。</p>

<p>安装插件就是这么简单！还没有体验的赶紧体验吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ocpress添加友情链接]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/27/octopress-add-frend-sites/"/>
    <updated>2013-07-27T16:02:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/27/octopress-add-frend-sites</id>
    <content type="html"><![CDATA[<p>与在侧边栏添加Aboutme、Categories、Tagcloud等功能类似，在source/_include\custom\asides目录下添加一个frendsites.html文件，模仿about等写法，添加友情链接，如下所示：</p>

<figure class='code'><figcaption><span>友情链接 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>友情链接<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;url_to_add&quot;</span><span class="nt">&gt;</span>友情链接的显示Id<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            ...
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>然后在_config.yml文件中相应的位置添加，如在default_asides中的数组添加custom/asides/friendsites.html，当然也可以在blog_index等其他数组中添加。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程之Proc对象]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/27/metaprogram-proc/"/>
    <updated>2013-07-27T12:40:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/27/metaprogram-proc</id>
    <content type="html"><![CDATA[<h2>Proc</h2>

<p>Proc对象其实就是将代码块(block)转换成对象的块。方式有大致几种：</p>

<p>1.Proc对象</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">inc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">inc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>     <span class="c1">#=&gt;4</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>2.lambda方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">inc</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">inc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>     <span class="c1">#=&gt;4</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>3.proc方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">inc</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">inc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>     <span class="c1">#=&gt;4</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>&amp;操作符</h2>

<p>块就如同方法的额外的匿名参数。大部分情况下，在方法中可以通过yield语句直接运行一个块。但是在下面两种方法中yield则无能为力了:</p>

<ul>
<li>将块传递给另一个方法</li>
<li>将块转换为Proc对象</li>
</ul>


<p>为了应付这两种情况，则需要将块附加到一个绑定上，通过给方法加一个特殊的参数便可实现，但这个参数必须为参数列表的最后一个，且以&amp;符号开头。如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">def</span> <span class="nf">math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">teach_math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Let&#39;s do the math:&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">teach_math</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">){</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="p">}</span>   <span class="c1">#=&gt;Let&#39;s do the math:6</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>其实&amp;真正的含义是：</p>

<p>这是一个Proc对象，我想把它当成一个块来使用，简单地去掉&amp;操作符，就能再次得到一个Proc对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git的相关操作]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/22/git-roll-back/"/>
    <updated>2013-07-22T11:33:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/22/git-roll-back</id>
    <content type="html"><![CDATA[<h2>查看Git远程库地址</h2>

<p>建立了远程库后，许久没操作，突然忘了其对应的具体远程库的url。可通过以下命令来查看：</p>

<pre><code>$git remote -v
</code></pre>

<p>-v选项是&mdash;verbose的简写，最后结果为：</p>

<pre><code>origin git@github.com:xautjzd/RubyExample.git (fetch)  
origin git@github.com:xautjzd/RubyExample.git (push)
</code></pre>

<p>要查看详细信息，则可以通过如下命令查看：</p>

<pre><code>$git remote show remote-name
</code></pre>

<h2>添加远程库地址</h2>

<pre><code>$git remote add reponame url
</code></pre>

<h2>远程库的重命名</h2>

<pre><code>$git remote rename oldname newname
</code></pre>

<!-- more -->


<h2>删除远程库</h2>

<pre><code>$git remote rm remote-name
</code></pre>

<h2>恢复git reset &mdash;hard误操作</h2>

<p>使用git类的版本控制器一定要谨慎，因为通常涉及版本控制器的管理都是重要文档，不容有失。特别是涉及reset、rebase、checkout和merge等一些高级操作时，更要格外小心。</p>

<p>当然总是难免会有误操作，而通常伟大的工具都会有误操作的恢复功能。首先可以通过git log查看提交日志。然后查看上次提交的commitid,通过git reset &mdash;hard commitid可以将暂存区和工作区替换成某个点的repository。这样可能新添加到工作区的文件会丢失，不过不用担心，如果想还原，则通过：</p>

<pre><code>$git reflog     #reflog记录着所有的HEAD历史
$git reset --hard commitid   ##回滚到某次HEAD
</code></pre>

<p>短时间内可以回滚,如果长时间，则可能记录会被git当作垃圾清理掉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby基础之Array,String and Hash]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/21/array/"/>
    <updated>2013-07-21T15:55:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/21/array</id>
    <content type="html"><![CDATA[<h2>Array</h2>

<p>数组通常都是同种元素的集合，元素可以为单个的变量，如数值或者字符串，但是也可以为数组和Hash等复杂对象。</p>

<h3>数组表示矩阵</h3>

<p>其实数组可以用来表示矩阵，矩阵可以被看作数组的数组，也就是每个数组元素都是数组。三行三列的矩阵可以表示为：</p>

<pre><code>a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</code></pre>

<p>“5”的位置则是：</p>

<pre><code>a[1][1]
</code></pre>

<h3>数组初始化陷阱</h3>

<p>初始化数组时，若要使用数组对象或Hash对象作为初始值的元素时必须非常小心，否则便会陷入陷阱当中，如下所示：</p>

<pre><code>a = Array.new(3, [0, 0, 0])
</code></pre>

<!-- more -->


<p>这样看起来初始化结果是[[0, 0, 0], [0, 0, 0], [0, 0, 0]]。但是实则不是。</p>

<p>这样，当只想改动第二行第二个元素时，每一行的第二个元素都会修改，不是预期的结果：</p>

<pre><code>a = Array.new(3, [0, 0, 0])
a[1][1] = 2
p a  #=&gt;[[0, 2, 0], [0, 2, 0], [0, 2, 0]]
</code></pre>

<p>解决办法如下：</p>

<pre><code>a = Array.new(3) {
        [0, 0, 0]
}
p[1][1] = 2
p a    #=&gt;[[0, 0 , 0], [0, 2, 0], [0, 0, 0]]
</code></pre>

<p>针对索引值初始化不同的内容：</p>

<pre><code>a = Array.new(5) { |i| i+1 }
p a     #=&gt;[1, 2, 3, 4, 5]
</code></pre>

<h3>并行处理多个数组值</h3>

<p>有时候可能会用到将多个数组的同一位置的元素一并处理。如下：</p>

<figure class='code'><figcaption><span>sum_with_each.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">array1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'>    <span class="n">array2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="o">]</span>
</span><span class='line'>    <span class="n">array3</span> <span class="o">=</span> <span class="o">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">500</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array1</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">array1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">array2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">array3</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">p</span> <span class="n">result</span>     <span class="c1">#=&gt;[111, 222, 333, 444, 555]</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>如果使用zip方法则更简洁:</p>

<figure class='code'><figcaption><span>sum_with_zip.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">array1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'>    <span class="n">array2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="o">]</span>
</span><span class='line'>    <span class="n">array3</span> <span class="o">=</span> <span class="o">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">500</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">array1</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">array2</span><span class="p">,</span> <span class="n">array3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">|</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">p</span> <span class="n">result</span>     <span class="c1">#=&gt;[111, 222, 333, 444, 555]</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>zip方法会从接收者与实参所指定的数组中逐项获取数据，每次调用代码块内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby基础]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/19/ruby-variable/"/>
    <updated>2013-07-19T20:33:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/19/ruby-variable</id>
    <content type="html"><![CDATA[<h2>变量分类</h2>

<ul>
<li><strong>局部变量</strong></li>
</ul>


<p>一般以小写字母或下划线开头，当多个单词组成一个变量时，单词间用_分隔。局部变量一般用在代码快里面</p>

<ul>
<li><strong>全局变量</strong></li>
</ul>


<p>全局变量在整个ruby程序中都可以访问，无论他们在哪被定义。全局变量以$开头。eg:</p>

<p>$global_variable = 10</p>

<ul>
<li><strong>实例变量</strong></li>
</ul>


<p>实例变量的范围则是类的实例，属于某个类的实例所有，实例间相互独立。实例变量以@开头。eg:</p>

<p>@instance_variable = 10</p>

<!-- more -->


<ul>
<li><strong>类变量</strong></li>
</ul>


<p>类变量为所有的类实例所共有，一个实例中改变其值，另一个实例中也看到相应改变。类变量以@@开头。eg:</p>

<p>@@class_variable = 10</p>

<ul>
<li><strong>类实例变量</strong></li>
</ul>


<p>类实例变量只属于当前类所有，只能通过类名来访问，类的实例不能对其访问，而类变量则可以被子类及类的实例访问。</p>

<pre><code>class MyClass
    @my_var=1
end
</code></pre>

<h2>常量</h2>

<p>常量一旦被赋值，则不能修改。以大写字母开头的标识符是常量。一般通过“模块名/类名::常量名”的形式来引用常量。eg:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">class</span> <span class="nc">HelloWorld</span>
</span><span class='line'>        <span class="no">Version</span> <span class="o">=</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1">#access the constant</span>
</span><span class='line'>    <span class="nb">p</span> <span class="ss">HelloWorld</span><span class="p">:</span><span class="ss">:Version</span>   <span class="c1">#=&gt;&quot;2.0&quot;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>第一种最直观，最易理解，缺点是改变类名时类方法需要跟着一起改，较麻烦。第三种其次，第二种时最难理解。</p>

<h2>类</h2>

<h3>initialize方法</h3>

<p>initialize方法为类的私有方法，当类调用new方法新建对象时，initialize便被调用，同时传递给new的所有实参都会传给initialize方法。</p>

<h3>访问方法</h3>

<p>访问方法也就是常说的getter和setter方法，可以通过下面三种方式来定义：</p>

<ul>
<li>attr_accessor:name     #定义name和name=方法</li>
<li>attr_reader:name       #定义name方法</li>
<li>attr_writer:name       #定义name=方法</li>
</ul>


<h3>类方法</h3>

<p>类方法的三种定义方式分别如下:</p>

<ul>
<li>第一种方式如下：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">class</span> <span class="nc">HelloWorld</span>
</span><span class='line'>        <span class="k">def</span> <span class="nc">HelloWorld</span><span class="o">.</span><span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">print</span> <span class="s2">&quot;hello, &quot;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>     <span class="c1">#name为局部变量</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">HelloWorld</span><span class="o">.</span><span class="n">hello</span><span class="p">(</span><span class="s2">&quot;xautjzd&quot;</span><span class="p">)</span>     <span class="c1">#=&gt;hello, xautjzd</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第二种方式如下：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">class</span> <span class="nc">HelloWorld</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="no">HelloWorld</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">print</span> <span class="s2">&quot;hello, &quot;</span><span class="p">,</span> <span class="nb">name</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">HelloWorld</span><span class="o">.</span><span class="n">hello</span><span class="p">(</span><span class="s2">&quot;xautjzd&quot;</span><span class="p">)</span>   <span class="c1">#=&gt;hello, xautjzd</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第三种方式如下：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">class</span> <span class="nc">HelloWorld</span>
</span><span class='line'>        <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">print</span> <span class="s2">&quot;hello, &quot;</span><span class="p">,</span> <span class="nb">name</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">HelloWorld</span><span class="o">.</span><span class="n">hello</span><span class="p">(</span><span class="s2">&quot;xautjzd&quot;</span><span class="p">)</span>    <span class="c1">#=&gt;hello, xautjzd</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>方法的访问控制</h3>

<p>Ruby提供了三种限制方式:</p>

<ul>
<li>public——默认方式，默认的实例方法都是public</li>
<li>private——private修饰的方法只能在类的内部使用，不允许在类的外部调用</li>
<li>proteced——只能在本类或者子类中访问，不能在类外部访问</li>
</ul>


<h2>模块</h2>

<p>模块(module)应该是Ruby特有的功能，模块中也可包含方法，成为模块方法，模块与类最大的不同在于：</p>

<ul>
<li>模块不能实例化</li>
<li>模块不能继承</li>
</ul>


<h3>模块的用法</h3>

<ul>
<li>提供命名空间
命名空间的存在主要是解决方法、常量、类名的冲突。使用模块时，只需要用include将模块包含进现有的命名空间中即可。eg:</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="kp">include</span> <span class="no">Math</span>
</span><span class='line'>    <span class="nb">p</span> <span class="ss">Math</span><span class="p">:</span><span class="ss">:PI</span>     <span class="c1">#=&gt;3.141592654</span>
</span><span class='line'>    <span class="nb">p</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c1">#=&gt;2</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>以Mix-in方式提供功能
类中包含模块，成为Mix-in。eg:</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>        <span class="c1">#提供的模块方法</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Class1</span>
</span><span class='line'>        <span class="kp">include</span> <span class="no">MyModule</span>
</span><span class='line'>        <span class="c1">#Class1的方法定义</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Class2</span>
</span><span class='line'>        <span class="kp">include</span> <span class="no">MyModule</span>
</span><span class='line'>        <span class="c1">#Class2的方法定义</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>如上例所示，通过Module将Class1和Class2两个类所共有的功能抽出来定义成Module。主要用于：</p>

<ul>
<li>两个类只是功能相似，但不想归于相同类型的类</li>
<li>Ruby不支持多继承，所以当已继承其他父类时，就无法再继承其他的类</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置文章分类插件]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/18/config-category-plugin/"/>
    <updated>2013-07-18T17:17:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/18/config-category-plugin</id>
    <content type="html"><![CDATA[<p>Octopress搭建的博客默认没有文章分类，这肯定让人很不爽，但这个号称Hacker的博客肯定有这功能，便网上搜寻了答案，最终得以解决。方法如下：</p>

<h3>1. 添加category_list插件</h3>

<p>代码如下：</p>

<figure class='code'><figcaption><span>plugins/category_list_tag.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">CategoryListTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>            <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>                <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>                <span class="n">categories</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>                <span class="n">categories</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>                    <span class="n">posts_in_category</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">[</span><span class="n">category</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>                    <span class="n">category_dir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;category_dir&#39;</span><span class="o">]</span>
</span><span class='line'>                    <span class="n">category_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">category_dir</span><span class="p">,</span> <span class="n">category</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/_|\P{Word}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/-{2,}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;li class=&#39;category&#39;&gt;&lt;a href=&#39;/</span><span class="si">#{</span><span class="n">category_url</span><span class="si">}</span><span class="s2">/&#39;&gt;</span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">posts_in_category</span><span class="si">}</span><span class="s2">)&lt;/a&gt;&lt;/li&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>                <span class="n">html</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;category_list&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:CategoryListTag</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>将以上代码保存到plugins/category_list_tag.rb中。</p>

<p>这个插件会向liquid注册一个名为category_list的tag，该tag就是以li的形式将站点所有的category组织起来。如果要将category加入到侧边导航栏，需要增加一个aside</p>

<h3>2. 添加category到aside中</h3>

<p>在source/_include/custom/asides中新建category_list.html文件，并且将以下代码复制到其中：</p>

<figure class='code'><figcaption><span>category_list.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            {\% category_list %}
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>其中\是为了显示才添加上的，不然无法正常显示，复制代码时请去掉%前的\。</p>

<h3>3. 配置侧边栏</h3>

<p>在_config.yml中配置侧边栏，修改其中的default_asides项：</p>

<figure class='code'><figcaption><span>_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>    <span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">...</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
