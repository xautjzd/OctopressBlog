<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xautjzd]]></title>
  <link href="http://xautjzd.github.io/atom.xml" rel="self"/>
  <link href="http://xautjzd.github.io/"/>
  <updated>2013-09-13T13:27:48+08:00</updated>
  <id>http://xautjzd.github.io/</id>
  <author>
    <name><![CDATA[xautjzd]]></name>
    <email><![CDATA[xautjzd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VirtualBox安装ArchLinux系统]]></title>
    <link href="http://xautjzd.github.io/blog/2013/09/12/installing-archlinux-in-virtualbox/"/>
    <updated>2013-09-12T22:36:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/09/12/installing-archlinux-in-virtualbox</id>
    <content type="html"><![CDATA[<p>都说ArchLinux很适合折腾，趁今天有时间，就试着安装了一把，不过看ArchLinux的Beginners&rsquo;s Guide，照着其步骤来，结果还是看的云里雾里，看的人头大。便直接上Youtube上找了一个视频，顿时豁然开朗。安装概览如下：</p>

<h2>ArchLinux Install</h2>

<ol>
<li>分区</li>
<li>格式化分区</li>
<li>挂载分区</li>
<li>更改安装镜像</li>
<li>安装基本系统</li>
<li>生成fstab</li>
<li>Chroot到新系统</li>
<li>配置系统</li>
<li>开启网络服务</li>
<li>创建初始化ramdisk环境</li>
<li>设置root密码</li>
<li>安装配置bootloader</li>
<li>卸载分区并重启系统</li>
<li>安装图形用户界面</li>
</ol>


<p>详细步骤如下：</p>

<h3>1. 分区</h3>

<p>虚拟机挂在iso镜像后，然后启动系统，进入后默认进入root提示符，然后输入：</p>

<pre><code>root#cfdisk
</code></pre>

<p>进行分区，一般分三个即可。最后分区结果如下：</p>

<pre><code>dev/sda1 / 8G
dev/sda2 /swap 1G(在空间最后)
dev/sda3 /home 4G
</code></pre>

<p>每个人的分区情况都可能不同，具体依照自己的分区来决定，以下操作都是根据我的分区来进行。</p>

<!-- more -->


<h3>2. 格式化分区</h3>

<p>执行如下命令格式化分区</p>

<pre><code>#mkfs.ext4 /dev/sda1
#mkfs.ext4 /dev/sda3
#mkswap /dev/sda2
#swapon /dev/sda2  #enable swap partion
</code></pre>

<h3>3. 挂载分区</h3>

<pre><code>#mount /dev/sda1 /mnt #mount root partion
#mkdir /mnt/home
#mount /dev/sda3 /mnt/home  #mount home partion
</code></pre>

<h3>4. 更改安装镜像</h3>

<p>镜像列表优先级从上往下，所以为了软件更新的速度，最好将国内的mirror放到最上面。我添加的源及方法如下：</p>

<pre><code>#vi /etc/pacman.d/mirrorlist

Server = http://mirrors.163.com/archlinux/$repo/os/$arch
Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch
Server = http://mirrors.sohu.com/archlinux/$repo/os/$arch
Server = http://mirror.lzu.edu.cn/archlinux/$repo/os/$arch
Server = http://ftp.tku.edu.tw/Linux/ArchLinux/$repo/os/$arch
...
</code></pre>

<h3>5. 安装基本系统</h3>

<p>通过pacstrap脚本安装基本系统，方法如下：</p>

<pre><code>#pacstrap base base-devel
</code></pre>

<h3>6. 生成fstab</h3>

<p>通过下面的命令来生成fstab：</p>

<pre><code>#genfstab /mnt &gt;&gt; /mnt/etc/fstab
</code></pre>

<h3>7. Chroot到新系统</h3>

<p>通过以下命令chroot到新安装的系统:</p>

<pre><code>#arch-chroot /mnt
</code></pre>

<h3>8. 配置系统</h3>

<p>系统的配置主要有locale和时区的配置。</p>

<ul>
<li>Locale</li>
</ul>


<p>配置方法如下：</p>

<pre><code>#vi /etc/locale.gen
#locale-gen
</code></pre>

<ul>
<li>配置时区</li>
</ul>


<p>系统默认是utc时区，我们需要换到utc+8时区，方法如下：</p>

<pre><code>#ln s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</code></pre>

<h3>9. 开启网络服务</h3>

<p>先通过ping命令查看网络是否正常，如果不能上网，则需要配置，方法有两种：1.dhcp  2.static ip。我用的是dhcp，所以只需要开启dhcp服务,方法如下：</p>

<pre><code>#dhcpcd interface_name
</code></pre>

<p>其中interface_name可以通过ifconfig或者ip addr查询。默认在虚拟机中便可上网，所以无需配置。但是安装完成重启系统后便不能上网，原因是dhcp服务没启动。(这是我所碰到的情况)</p>

<h3>10. 创建初始化ramdisk环境</h3>

<p>ramdisk是通过软件将一部分内存(RAM)来模拟一个硬盘，提高访问速度。创建ramdisk的方法如下：</p>

<pre><code>    #mkinitcpio -p linux
</code></pre>

<p>通过<code>#vi /etc/mkinitcpio.conf</code>来查看相应的配置信息。</p>

<h3>11. 设置root密码</h3>

<p>设置密码的命令都通用:</p>

<pre><code>#passwd
</code></pre>

<p>然后输入符合要求的密码即可。当然平时操作尽量不要用root,所以为此可以新建一个用户。</p>

<h3>12. 安装配置bootloader</h3>

<p>一般采用比较常见的grub即可。安装方法如下：</p>

<pre><code>#pacman -S grub-bios
#grub-install /deb/sda
#grub-mkconfig -o /boot/grub/grub.cfg
</code></pre>

<h3>13. 卸载分区并重启系统</h3>

<p>卸载分区前先通过<code>#exit</code>退出刚才新安装的系统，然后通过以下方法卸载分区:</p>

<pre><code>#umount /mnt/home
#umount /mnt
</code></pre>

<p>然后通过<code>#reboot</code>重启系统。</p>

<h3>14. 安装图形用户界面</h3>

<p>先确定能否联网：#ping www.google.com,如不能，则查看dhcp服务是否已经开启，可通过<code>dhcpcd interface_name</code>开启。在确保能上网的前提下通过：</p>

<pre><code>#pacman -S gnome xorg
</code></pre>

<p>安装gnome图形用户界面。</p>

<p>经过以上步骤，基本的安装便可完成。我也是安装了好几遍之后才对其安装过程有了大致的了解，写此篇博客的目的主要是为了记录自己的安装过程供今后参考、锻炼自己的写作水平和分享给那些安装ArchLinux过程中碰到问题的朋友参考。</p>

<h3>参考资料</h3>

<ol>
<li><p><a href="https://wiki.archlinux.org/index.php/Beginners%27_Guide">ArchLinux新手指南</a></p></li>
<li><p>Youtube ArchLinux安装视频</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookies vs Sessions]]></title>
    <link href="http://xautjzd.github.io/blog/2013/09/09/cookies-vs-sessions/"/>
    <updated>2013-09-09T10:37:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/09/09/cookies-vs-sessions</id>
    <content type="html"><![CDATA[<p>Http是无状态的协议，客户端给服务器发送请求，服务端响应客户端的请求，会话结束。这样两次会话间不便没有任何关联。但有时候需要在会话间进行信息共享，如：购物车，保存用户名与密码等。为此，cookie与session便诞生了,它们的存在就是为了弥补http协议无状态的缺陷。</p>

<p>cookie与session最大的不同是：cookie保存在用户的浏览器中，而session则保留在服务端。正是这种不同决定了它们的不用使用场合。</p>

<h2>Cookie</h2>

<hr />

<p>cookie机制是通过扩展http协议来实现的。服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。其实纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器端。</p>

<p>cookie主要内容包括：Name,Content,Path,Domain,Expires(过期时间)等。Domain与Path一起构成cookie的作用范围。</p>

<p>若不设置Expires,则默认的cookie生命周期为浏览器会话期间，一旦浏览器关闭，cookie则会被清理掉，这种生命周期为浏览器会话期的cookie被成为会话cookie。会话cookie存储在内存中而不是在硬盘上。</p>

<p>若设置了Expires,浏览器则会把生成的cookie保存在硬盘上，即使浏览器关闭后再打开，cookie依然有效，直至超过设置的expires。</p>

<p>另外，session大小有限制，一旦浏览器禁用cookie，则采用cookie的购物网站便不能进行购物，所以这时候得用session了。</p>

<!-- more -->


<h2>Session</h2>

<hr />

<p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p>

<p>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。</p>

<p>经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。</p>

<h2>Cookie与Session区别</h2>

<hr />

<ol>
<li>cookie存储在客户端的浏览器中，而session则存储在服务器上。</li>
<li>cookie不安全，可以通过分析本地cookie并进行cookie欺骗，而session则相对比较安全。</li>
<li>session会在服务器上保存一段时间，但当访问量增大，会占用服务器的存储空间，影响服务器的性能，如考虑到减轻服务器的性能，则可以选择cookie。</li>
<li>单个cookie保存的数据不会超过4k。</li>
</ol>


<p>所以，一般将登陆等重要信息采用session保存，而其他信息则采用cookie。</p>

<h2>参考资料</h2>

<hr />

<ol>
<li><a href="http://en.wikipedia.org/wiki/Session_">http://en.wikipedia.org/wiki/Session_</a>(computer_science)</li>
<li><a href="http://en.wikipedia.org/wiki/HTTP_cookie#cite_note-1">http://en.wikipedia.org/wiki/HTTP_cookie#cite_note-1</a></li>
<li><a href="http://www.cnblogs.com/shiyangxt/articles/1305506.html">http://www.cnblogs.com/shiyangxt/articles/1305506.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看网站所用Web服务器类型]]></title>
    <link href="http://xautjzd.github.io/blog/2013/09/04/lookup-webserver/"/>
    <updated>2013-09-04T16:43:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/09/04/lookup-webserver</id>
    <content type="html"><![CDATA[<p>学习Rails的Layout过程中，其中有提到curl，所以便简单的看了下curl的功能。虽说以前学习Shell的过程中也看到过curl,不过没怎么用过，只知道和wget功能类似，只是wget是将请求的web资源下载到本地，而curl则是在shell中显示，至于有什么其他功能也便不清楚。但是今天发现curl其实还可以用来查看website所用的web服务器类型，通过<code>curl -I url-you-want-to-lookup</code>命令查看即可。以下是我查看ruby-china的一个截图：
<img src="http://pic.yupoo.com/xautjzd/D8xXpw6z/medish.jpg" alt="" /></p>

<p>从中可以发现ruby-china采用的是nginx服务器。至于curl其他的功能慢慢再发掘吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[账号注册通过邮箱激活]]></title>
    <link href="http://xautjzd.github.io/blog/2013/09/03/activate-user-via-email/"/>
    <updated>2013-09-03T21:48:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/09/03/activate-user-via-email</id>
    <content type="html"><![CDATA[<h3>邮箱激活目的</h3>

<p>防止用户注册时所填写的信息为虚假信息</p>

<h3>邮箱激活的原理</h3>

<p>用户注册时，根据用户名、Email及注册时间(精确到ms)等信息通过特定的算法(如:MD5、SHA，最好不可逆)生成相应的信息摘要(也称消息摘要)作为注册的激活码，保存到数据库当中，并且将其作为url的参数，将带有激活码的url链接发送到用户注册的Email中。</p>

<p>只有当用户进入邮箱中并点击该链接后，通过url中的激活码找出数据库中匹配的用户，并将此账号设为“已激活”的状态。</p>

<p><strong>注：此过程没有考虑激活码过期问题，同时信息摘要也可以通过随机数来表示，不一定非要通过用户名等信息生成</strong></p>

<p>Rails代码参考：</p>

<p><a href="http://stackoverflow.com/questions/12805523/activate-user-via-email-in-rails">http://stackoverflow.com/questions/12805523/activate-user-via-email-in-rails</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash到oh-my-zsh的转变]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/27/from-bash-to-oh-my-zsh/"/>
    <updated>2013-08-27T18:14:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/27/from-bash-to-oh-my-zsh</id>
    <content type="html"><![CDATA[<p>从开始使用到现在一直使用的bash,虽然以前听过ksh,csh,sh等，但都不曾用过，今年开始zsh便不断地出入在眼前，但没真正见人用过，也不知道效果咋样，所以也没做尝试。</p>

<p>另一个原因是各大linux默认都是bash,说明其功能不错，而且也处于懒的原因，就没折腾。但最近在使用tmux的过程中发现bash的提示符只显示<code>-bash4.2$</code>字样，并没有显示成<code>user@hostname directory</code>，在加上西安rubyist的熟人皓哥强烈推荐，这就坚定了我舍弃bash转到zsh的决心，二话不说，立马上GitHub上找到oh-my-zsh。就照着readme开始尝试，结果出现了错误，Google找到答案，是zsh没有安装才导致，所以就<code>yum install zsh</code>安装了zsh,随后在通过</p>

<p><code>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</code></p>

<p>安装了oh-my-zsh。不过此时系统默认还是bash,所以还得更改系统默认的shell，方法如下：</p>

<h3>1. 修改/etc/shells文件</h3>

<p>先通过<code>$which zsh</code>查看zsh的位置，我zsh位于/usr/bin/zsh。然后再查看/etc/shells中是否含有zsh:</p>

<p><code>$&lt; /etc/shells grep zsh</code></p>

<p>如果结果中没有/usr/bin/zsh，则需要手动将/usr/bin/zsh添加到/etc/shells文件中。</p>

<h3>2. 更改默认的shell</h3>

<p>通过<code>$chsh -s /usr/bin/zsh</code>更改系统默认shell，退出系统，重新登陆便会发现系统默认的shell已经变为zsh，同时也可以更改zsh默认的主题，在~/.zshrc中更改ZSH_THEME属性即可，其被选的值在<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">oh-my-zsh theme</a>中任选一个即可。</p>

<p>经过以上两步，oh-my-zsh便安装完成。但是写博客时发现<code>rake new_post["xxx"]</code>时出现<code>zsh: no matches found: new_post</code>错误，Google找到答案，只需改为<code>rake 'new_post["xxx"]'</code>即可，原因是zsh会将一些特殊符号当作查找文件的通配符等，根源解决方法是：取消zsh的通配（Glob），即在~/.zshrc中加入<code>alias rake="noglob rake"</code>。</p>

<p>参考：<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh官网</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim-airline插件patched font配置成功]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/26/airline-patched-font-config/"/>
    <updated>2013-08-26T11:30:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/26/airline-patched-font-config</id>
    <content type="html"><![CDATA[<p>前段时间装好了airline插件，但是没呈现应有的效果，原因是没有安装字体。根据官网的提示需要安装powerline的字体，我便照着<a href="ttps://powerline.readthedocs.org/en/latest/installation/linux.html#font-installation">powerline官网</a>的配置方法来，但是还是没有成功。其原因是我安装了patched fonts，但是没有将terminal的font设置为patched fonts中的一种，所以statusbar会有乱码。下面对安装patched fonts做一个小结。</p>

<p>安装patched fonts方式请参考:<a href="https://powerline.readthedocs.org/en/latest/installation/linux.html#font-installation">powerline字体配置</a>，尽管文档很详细，但是还是重复一下：</p>

<p>1.Download patched fonts</p>

<p><code>$mkdir ~/.fonts</code>新建一个font文件夹，然后<code>$cd ~/.fonts</code>进入.fonts文件夹。<code>$git clone git@github.com:Lokaltog/powerline-fonts.git</code>将powerline的patched fonts拷贝到~/.fonts目录下，目录结构如下图：</p>

<p><img src="http://pic.yupoo.com/xautjzd/D79oXi6w/medish.jpg" alt="~/.font目录结构" /></p>

<p>2.Install the patched fonts to your System</p>

<p>运行<code>$fc-cache -vf ~/.fonts</code>安装patched fonts到系统中</p>

<p>3.Set Terminal fonts</p>

<p>设置Terminal字体非常重要，我初次配置时，安装patched fonts，但是由于没有set terminal font,所以statusbar显示乱码。设置方法如下：</p>

<p>Edit——Profiles——Default(Edit)——General——Font，选择~/.fonts/powerline下的某一种即可(可选范围一定要在刚才下载的patched fonts中选一种，否则乱码。)，当然也可以采取powerline font installing中的另一种方式，不过我没做尝试，有兴趣的朋友try it。配置截图如下：</p>

<p><img src="http://pic.yupoo.com/xautjzd/D79olvGa/medish.jpg" alt="Font config" /></p>

<p>最后可以在~/.vimrc中更改airline的theme。更改方式如下：</p>

<pre><code>let g:airline_theme="molokai"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim文件的折叠与展开方式]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/25/vim-folding-and-unfolding/"/>
    <updated>2013-08-25T16:00:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/25/vim-folding-and-unfolding</id>
    <content type="html"><![CDATA[<p>最近一直在用Vim学习Ruby,但是一直有个问题困扰：</p>

<p>那就是文件无法折叠，但是我记得以前看过Vim的视频，里面见别人用到了折叠与展开。文件比较小时，此功能便无用，但一旦文件量大时，折叠与展开便显得尤为重要了。</p>

<p>折叠的方式有以下几种：</p>

<ol>
<li>manual</li>
<li>indent</li>
<li>syntax</li>
<li>marker</li>
<li>expr</li>
<li>diff</li>
</ol>


<h3>1. Manual method</h3>

<p>vim默认的折叠方式是此种方式，不需要设置即可。要启用其他方式还得采用<code>:set foldmethod=xxx</code>或者<code>:set fdm=xxx</code>来设置。</p>

<p><strong>使用方法</strong>：</p>

<p><code>v</code>或者<code>V</code>进入visual mode,然后选中要折叠的文字，按<code>zf</code>便可折叠，折叠后按<code>za</code>或者<code>zO</code>便展开。</p>

<p>同时也可以通过<code>zfnj</code>的方式将接下来的n行折叠。类似也有<code>zfnk</code>等;<code>zR</code>则打开所有的折叠。总结下来就是：</p>

<ul>
<li>zf        => create a fold</li>
<li>za        => unfold</li>
<li>zf#j  => fold down # lines</li>
<li>zf#k  => fold up #lines</li>
<li>zR        => unfold all</li>
</ul>


<h3>2. Indent method</h3>

<p>缩进方式主要是根据代码缩进的方式来折叠/展开代码。要使用缩进方式，则需要做配置，<code>:set foldmethod=indent</code>或者在~/.vimrc中配置：<code>set foldmethod=indent</code>。</p>

<p>其快捷键如下：
zM      => fold all
zR      => unfold all
za      => fold/unfold</p>

<h3>3. Syntax method</h3>

<p>采用syntax方式，则只需如下配置即可：</p>

<pre><code>:set fdm=syntax
</code></pre>

<p>按键方式与上述相似</p>

<h3>4. Marker method</h3>

<p> 使用markder方式，则做如下配置：</p>

<pre><code>:set foldmethod=marker
</code></pre>

<p> 或</p>

<pre><code>:set fdm=marker
</code></pre>

<p>默认的marker折叠/展开标记为<code>}</code>.</p>

<p>将要折叠/展开的代码通过<code>}</code>包含起来即可。当然也可以自定义标记。定义方法如下：</p>

<pre><code>:set foldmarker= start,end
eg: set foldmarker= /*,*/

/*
     1. Ruby
     2. Python
     3. C++
     4. PHP
*/
</code></pre>

<p>快捷键如下：</p>

<ul>
<li>za        => fold/unfold</li>
<li>zM        => fold all</li>
<li>zR        => unfold all</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux活动发起]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/20/linux-activity-sponsoring/"/>
    <updated>2013-08-20T19:04:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/20/linux-activity-sponsoring</id>
    <content type="html"><![CDATA[<p>独乐乐不如众乐乐，独自一人埋头苦学不如一群兴趣相投之人的一起交流。记得以前大一大二时，希望能有一个领路人领着自己学习，帮自己找准学习的方向，毕竟当时太年轻，太多东西不了解，所以不知道软件这行业该学习什么，哪些东西比较有兴趣，一切源于自己接触的太少，身边也没有可交流之人。再加上学校大一大二和大三大四分隔新旧两校区，交流就更少。</p>

<p>正是因为自己的这些经历，然后再加上近来参加西安的rubyist party，促使了我组建Linux小组并且定期举办活动的冲动。一个人的埋头苦学，所见所闻永远局限在某个狭小的空间，只有走出去，与他们交流才能拓宽自己的知识面，提升自己的认知度，也算是多了一些朋友，多了一些交流。正所谓话不投机半句多，与自己志不同道不和的人交流真是有点对牛弹琴的感觉。所以要交流得找兴趣相投志同道合之人。</p>

<p>打算成立的小组规模大致10人左右，无需太多，也不希望有滥竽充数的现象。所以希望小组成员能满足以下条件：</p>

<ul>
<li>对软件感兴趣</li>
<li>熟悉Linux(基本操作一般没问题)</li>
<li>Vim | Emacs</li>
</ul>


<p>具备以下更佳：</p>

<ul>
<li>Git</li>
<li>Ruby/Python/Lisp/Scala/Prolog</li>
<li>个人博客</li>
</ul>


<p>初期打算:</p>

<ul>
<li>每周一次Party（主要技术交流）</li>
</ul>


<p>有兴趣的学习请联系我，联系方式：</p>

<ul>
<li>新郎微薄：xautjzd</li>
</ul>


<p>其他联系方式见我的<a href="http://xautjzd.github.io/blog/aboutme">About</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中symbol与string的区别]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/18/difference-between-symbol-and-string/"/>
    <updated>2013-08-18T20:50:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/18/difference-between-symbol-and-string</id>
    <content type="html"><![CDATA[<p>记得当初学习Ruby基本语法时，还为Symbol与String的异同纠结了好久，后来经过一段时间的摸索，大致有了了解，但让我给他人解释，这点我还是办不到。但是今天看到了一篇<a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">博文</a>,让我彻底明白他们的区别。</p>

<h3>symbol定义</h3>

<p>Symbol其实就是string加上前缀：。</p>

<h3>二者异同点</h3>

<p>其实Symbol与String本质相同，是string 的两种不同呈现方式。由于受SmallTalk影响，Ruby一切皆对象。所以每次给string赋值，<code>name="xautjzd"</code>其实都是在内存中创建一个新对象。每次创建的对象的object_id都不相同。</p>

<p>而symbol则不同，symbol创建一次即可。以后所有的操作都是指向先前创建的对象。所以object_id相同。</p>

<p>不同点大致有三：
1. symbol为常量，值不能改变。
2. 多次使用同一个symbol,object_id相同，而多次使用string,每个对象有不同的object_id。
3. String的方法,eg:#upcase,#split不能用于Symbol。</p>

<h3>参考网址</h3>

<p><a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html</a>(<a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim学习资源]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/18/vim-learning-resource/"/>
    <updated>2013-08-18T13:48:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/18/vim-learning-resource</id>
    <content type="html"><![CDATA[<h3>实用的快捷方式</h3>

<ul>
<li>gf  快速跳转到定义</li>
<li><code>&lt;C + 6&gt;</code>  返回到上次编辑的文档</li>
<li>%  括号匹配{}<a href=""></a></li>
<li><code>#/*,g#/g*</code>  向前/向后搜索光标所在的词</li>
<li>gi  跳转到上次编辑的位置</li>
<li>gi  显示光标所在字符的编码</li>
<li>gH  开始选择行模式</li>
<li>vi&#8221;  选中&#8221;之间的文本(不包括&#8221;)</li>
<li>vi{  选中{之间的文本（不包括{）</li>
<li>ci(  改变之间的文本</li>
<li>di[  删除[之间的文本(不包括[)</li>
<li>da[  删除[之间的文本(包括[),ca、va类似</li>
<li>C  修改至行尾</li>
<li>D  删除至行尾</li>
</ul>


<!-- more -->


<ul>
<li>[{  跳转到光标所在位置的{.]},[(类似</li>
<li>F/f+char  向左/向右跳转到char的位置</li>
<li><code>&gt;&gt;</code>  缩进光标所在行。eg:5>></li>
<li><code>&lt;&lt;</code>  取消缩进光标所在行</li>
<li><code>&gt;%</code>  大括号及括号内的内容都缩进(光标需放在{或者}上)</li>
<li>==  文本对其当前行</li>
<li>=%  (re)indent the current braces{&hellip;}</li>
<li>gg=G  全文对齐</li>
<li>H  跳转到屏幕上方</li>
<li>M  跳转到屏幕中间</li>
<li>L  转到屏幕下方</li>
</ul>


<h3>参考文档</h3>

<ul>
<li><a href="http://c9s.blogspot.com">c9s</a>的<a href="http://c9s.blogspot.com/2009/08/vim-hacks-coscup.html">Vim Hacks</a></li>
<li><a href="http://vim.wikia.com/wiki/Best_Vim_Tips">Vim Tips</a></li>
<li><a href="http://www.vim.org/">Vim官网</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更换Octopress主题]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/17/change-theme-of-blog/"/>
    <updated>2013-08-17T22:56:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/17/change-theme-of-blog</id>
    <content type="html"><![CDATA[<p>Octopress博客搭建已经有一阵了，但一直采用的默认的主题，没时间更换。今天特意抽时间来更换下，先上<a href="http://octopress.org/docs/theme/">Octopress官网</a>了解了下更换Theme的原理，然后上Octopress所在的源码托管平台GitHub，在其<a href="https://github.com/imathis/octopress/wiki">Wiki</a>上找到了<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方Themes</a>,便从前到后大致将各种themes都预览了一遍，最后选择了<a href="https://github.com/shashankmehta/greyshade">Greyshade主题</a>,安装方法官网写的已经非常详细，这里再啰嗦一遍：</p>

<h3>Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress  #octopress directory
</span><span class='line'>$ git clone git@github.com:shashankmehta/greyshade.git .themes/greyshade
</span><span class='line'>$ echo "\$greyshade: color;" &gt;&gt; sass/custom/_colors.scss //Substitue 'color' with your highlight color
</span><span class='line'>$ rake "install[greyshade]"
</span><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<p>至此，安装过程便已完成。</p>

<p>左侧的显示效果主要配置在_config.yml文件中。</p>

<h3>pages显示</h3>

<p>Octopress默认只有Homepage和Archives两个导航菜单，不满足要求，我便又添加了&#8221;编程&#8221;、“Linux”、“所思所想”和“关于我”这几个。“关于我”的页面为静态页面，在source/blog/aboutme/下，其他的几个需要将相关的文章显示在相应的导航菜单下，便需做如下配置：</p>

<figure class='code'><figcaption><span>source/thinking/index.markdown</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: category_index
</span><span class='line'>title: Thinking
</span><span class='line'>category: Thinking
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<p>这样后，只要new_post并且category为Thinking的页面都会集中在所思所想对应的页面显示。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装Powerline过程中的收获]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/16/powerline-vs-airline/"/>
    <updated>2013-08-16T22:12:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/16/powerline-vs-airline</id>
    <content type="html"><![CDATA[<p>Powerline插件已经多次耳闻目见，但是一直没做尝试，今天再次看到便忍不住试了下，结果还没成功。可能是由于字体的原因吧，在找答案的过程中邂逅了airline,据说比powerline加载更快，而且还无需安装字体。所以便果断地换为airline。只需在vimrc中加入<code>bundle bling/vim-airline</code>即可。当然前提是在~/.vimrc中已有如下配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set </span><span class="nv">laststatus</span><span class="o">=</span>2  <span class="err">&quot;</span>Always show the status line
</span><span class='line'><span class="nb">set </span>noshowmode
</span><span class='line'><span class="nb">set </span><span class="nv">t_Co</span><span class="o">=</span>256
</span></code></pre></td></tr></table></div></figure>


<p>配置好后效果如下图所示：
<img src="http://xautjzd.github.io/images/airline.jpg" alt="" /></p>

<p>配置好后，在bash中显示没问题，但是在tmux中显示就有问题了，先前配置的效果无法显示。网上也找了好久答案，才得以解决，方法如下：</p>

<p><strong>1.$vim ~/.tmux.conf</strong></p>

<p>在~/.tmux.conf文件中添加如下代码：</p>

<pre><code>set -g default-terminal "screen-256color"
</code></pre>

<p><strong>2.$vim ~/.bashrc</strong></p>

<p>在~/.bashrc中添加如下代码：</p>

<pre><code>alias tmux="tmux -2"
</code></pre>

<p><code>tmux -2</code>是强制tmux的终端支持256种颜色。</p>

<p>配置好后，显示没问题，但是在写博客的过程中发现vim突然不能输入中文了，不知为何。最后在~/.vimrc添加：</p>

<pre><code>set guifont=*
</code></pre>

<p>就顺利解决，不过原因待深究，要学的东西太多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下截图工具shutter的安装与配置]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/16/install-and-config-shutter/"/>
    <updated>2013-08-16T16:57:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/16/install-and-config-shutter</id>
    <content type="html"><![CDATA[<p>我一直使用的是Fedora17，自带的截图工具实在不敢恭维，但也就这样断断续续的用着，不过也用的不多。但今天突然鬼使神差的搜了下其他的截图工具，Google搜了下，发现好多提到shutter，既然这么多文章都提到，说明肯定着实不赖，便尝试了下。安装及配置如下：</p>

<h3>1.安装</h3>

<p>安装过程很简单，执行下面命令即可：</p>

<pre><code>#yum install shutter
</code></pre>

<h3>2.配置</h3>

<p>QQ截图快捷键<code>&lt;ctrl&gt;+&lt;alt&gt;+A</code>用习惯了，所以也对shutter继续保留这个快捷键。具体配置方法如下：
在System Tools>System Settings>Keyboard>Shortcuts>Custom Shortcuts中添加了三个快捷键：</p>

<ul>
<li><p>截图整个屏幕（shutter -f）</p></li>
<li><p>截图当前活动窗口(shutter -a)</p></li>
<li><p>截图选定区域(shutter -s)</p></li>
</ul>


<p>具体配置及对应的快捷键设置参考下图：
<img src="http://xautjzd.github.io/images/shutter-config.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[户县之行]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/11/travel-to-hu-xian/"/>
    <updated>2013-08-11T19:51:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/11/travel-to-hu-xian</id>
    <content type="html"><![CDATA[<p>前天应阿亮之邀，去了趟少春家，现将所见所闻予以记录，聊以慰藉。</p>

<p>我们三（阿亮，少春和我）于前天下午将近六点出发去户县甘河镇的少春家，大致七点半左右到。到家时，天刚暗下来。从这一刻开始到今天下午，差不多有两天的时间体验了下陕西乡村的风土人情，而体验的最佳方式则是通过味觉和视觉。</p>

<p>首先，从味觉方面说，大致品尝了他家的臊子面，煎饼和yuyu（只知其音，不知其写法,也念he&#8217;r)。以前只是听陕西的同学说过他们的习俗：早晚稀饭，中午吃面，而且稀饭比较稀，上面几乎看不到米粒，碗底才有。经此一见，果不其然。不过他们煮稀饭的米和我家乡不同，第一次见识到糯米也可用于煮稀饭，以前我只知：糯米用于蒸糯米饭、做汤圆和糍粑。中午吃的是臊子面，而臊子面的核心在于臊子。阿姨做的臊子挺不错，味道很好，唯一不足的是醋放的有点多，略酸，不过不太影响总体的感觉，至少比食堂阿姨做的强好几倍。盛面的家伙很给力，直接上脸盆。碗也给力，平时在食堂吃一碗足已，但这两天都是至少吃一碗。少春则更给力，今天中午直接吃了四碗。昨晚吃的是煎饼，和我家乡的饼有点像，只是做法不同，厚薄不同，但是不得不说味道比我家乡的那个饼味道略好，这得益于我喜欢吃薄饼，而我家乡的那饼则略显厚。</p>

<!-- more -->


<p>其次，从视觉方面说，给我印象比较深刻的是他们村公路和秦岭。我比较喜欢他们的村设计，每个村的入口都会有石碑写村名，而且不少村的入口都做的不错，与旅游景点的大门类似，而且带点古朴气息。再者，村里的房屋都是一排一排的，很工整，而且前后两排间的路很宽，车子都能自由出入。几乎每家每户都有院子，院里都种的平时吃的蔬菜，如茄子、西红柿、豇豆、韭菜和辣椒等，很是惬意。于此相比，我所在的村子就略显乱，房子盖的不是很整齐，而且间距过小，特别是村子中间，车子根本不能进入。不过房屋的规划属于历史遗留问题，难以改观了。</p>

<p>今天上午吃完饭后，我们三骑了两辆电动车便动身驶向秦岭脚下，大约一个小时的车程。风景着实不错，秀色可人，给人一份安宁。到达之后，没做停留，便又沿着环山公路继续行驶，一直骑到户县与周至的边界，并且还往前走了一段距离才往回走。结果走了大致不到20分钟，其中一辆车便没电，这时只能采取一车拉一车的方式了，这是个技术活，不过阿亮还是很给力，一手握绳，一手控制方向。就这么行驶了大致有20分钟吧，便来到一个镇上，找了个快充，给两辆车都充了10分钟的电，然后又继续行驶了。阿亮大致行驶了不到15分钟又没电。又得拉着走了，就这么拉着也至少有半个小时才到家的，也真亏了阿亮的手。当然此次行驶过程中少不了少春这位领路人，领的路还都是不错的，不枉领路人的身份。</p>

<p>这两天总体感觉相当不错，很是满足。我一直想体验下陕西的那种乡土风情，但是一直没实现，这次多亏了少春给了这次机会，再此表示感谢，谢谢阿姨的热情款待和一日三餐的饭菜！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端分屏工具tmux的安装与常用操作]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration/"/>
    <updated>2013-08-08T16:12:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration</id>
    <content type="html"><![CDATA[<h2>1. tmux简介</h2>

<p>tmux是terminal multiplexer的简称，是一款终端分屏的工具，可以在同一屏幕中划分出多个独立的shell环境，这样便于对比，唯一的缺陷是窗口比较小而已。一个server可以有多个session,一个session可以有多个windows,一个windows可以有多个pane.具体见<a href="http://tmux.sourceforge.net/">官网</a>介绍。</p>

<h2>2. 安装</h2>

<p>采用相应系统的包管理器即可安装。我装的是fedora,现以fedora为例：</p>

<pre><code>#yum install tmux
</code></pre>

<p>包不到1M大小，很快便安装完成。</p>

<!-- more -->


<h2>3. 操作</h2>

<p>首先，运行tmux。</p>

<pre><code>$tmux
</code></pre>

<p>然后可以水平分屏和纵向分屏。其常用的快捷键如下：</p>

<ul>
<li><p>水平分屏 :<code>&lt;c + b&gt; "</code>即按下ctrl + b后，再按双引号(shift + &lsquo;键)</p></li>
<li><p>垂直分屏 :<code>&lt;c + b&gt; %</code></p></li>
<li><p>新建窗口 :<code>&lt;c + b&gt; c</code></p></li>
<li><p>重命名窗口:<code>&lt;c + b&gt; ,</code></p></li>
<li><p>窗口切换 :<code>&lt;c + b&gt; number</code>，其中number为窗体的编号，从0开始。</p></li>
<li><p>切换到bash:<code>&lt;c + b&gt; d</code></p></li>
<li><p>切换回tmux:<code>$tmux attach</code></p></li>
<li><p>查看帮助文档：<code>&lt;c + b&gt; ?</code></p></li>
</ul>


<p>1.新建一个session</p>

<pre><code>tmux new-session -s sessionname(自己指定)
</code></pre>

<p>2.杀死一个session</p>

<pre><code>tmux kill-session -t sessionname
</code></pre>

<p>3.杀死所有session</p>

<pre><code>tmux kill-server
</code></pre>

<p>4.列出新建的session</p>

<pre><code>tmux ls(tmux list-sessions)
</code></pre>

<p>4.附加一个session</p>

<pre><code>tmux a -t sessionname
</code></pre>

<p>另外，tmux也非常适合结对编程，当两个人可以连接同一台电脑时，其中一个人在终端上的操作，另一个在终端能清楚的看到。操作方式如下：</p>

<p>A操作：$tmux new-session -s test</p>

<p>B操作：$tmux a(ttach) -t test</p>

<p>这样之后，A在终端上的一切操作B都能看到。</p>

<p>其他具体快捷方式，请参考帮助文档。</p>

<p>也可以参考：</p>

<p>1.<a href="http://happycasts.net/episodes/41?autoplay=true">http://happycasts.net/episodes/41?autoplay=true</a></p>

<p>2.<a href="http://caok1231.com/blog/2013/04/14/tmux/">http://caok1231.com/blog/2013/04/14/tmux/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim的代码自动补齐插件——UltiSnips]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/03/vim-ultisnips/"/>
    <updated>2013-08-03T15:12:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/03/vim-ultisnips</id>
    <content type="html"><![CDATA[<p>暑假时间充足，便又开始学习自己喜欢的Ruby。而学Ruby的最佳环境是Mac,其次是Linux,最次是Windows。Mac买不起，只能在Linux上折腾了，一台台式机装的Fedora17，自己的本是xp系统，装了不少微软的一套东西，毕竟教研室的项目都是在.net环境下进行的，不敢轻易换系统，所以便在本上装了个VirtualBox虚拟机，虚拟了一个Ubuntu。上面也配好了Ruby环境，毕竟本方便，带到哪里都可以学，但平时的Linux编程都是在台式机下，毕竟性能比虚拟机好。</p>

<p>而学习Ruby一般都是在Vim/Emacs/SublimeText 2下，RubyMine貌似很适合开发Ruby，由于是商业产品，没钱购买也就舍弃了，毅然决然的选择了Vim.都说高手使用的是Vim，想必必有可取之处。但是Vim的学习路线比较陡峭，开始是一段痛苦期，经过一段时间的摧残后，甜蜜的时光便来临了，各种强大而高效的插件让你目瞪口呆，顿时感觉其他IDE都蒻爆了。幸好我以前对Vim的基本操作便有了了解，所以再次学习起来便不那么痛苦，甚至不想回到Windows环境，不想再用其他的Editor。我现在用的插件并且给我印象深刻的大致有这么一些：Vundle,Ctrlp/command-T,UltiSnips/Snipmate,YouCompleteMe/SuperTab,NerdTree,Tagbar,FuzzyFinder,vim-rails，Markdown等。</p>

<!-- more -->


<p>其中Vundle作为Vim的插件管理神器必不可少，让安装插件变得非常方便，类似的插件也有pathogen。具体安装方法见<a href="https://github.com/gmarik/vundle">GitHub</a>.也可以参考我写的一篇关于Vundle的<a href="http://xautjzd.github.io/blog/2013/07/27/vim-vundle-install-and-config/">博文</a>。</p>

<p>而CtrlP则绝对是文件切换的神器，在多个文件间来回切换。也可以用:vs垂直分屏或者:sp水平分屏,这样最适合多个文件间的对比。&lt;ctrl-p>调出CtrlP候选文件,然后通过Up/Down键来选择文件。</p>

<p>UltiSnips则是自动补齐代码片段的神级插件，功能类似的有Snipmate插件。UltiSnips对常见的各种语言都有支持。代码补齐是通过编辑的文件后缀名来区分，如编辑xxx.html时，输入ul然后按Tab键则自动生成了<code>&lt;ul&gt;&lt;ul&gt;</code>片段，其他语言也类似，都有相应的关键字，具体每种语言的关键字参考UltiSnips目录下的xxx.snippets，自己也可以补充。</p>

<p>YouCompleteMe插件是一个代码提示功能，输入一部分然后就会出现候选的部分可供选择，不需要全部输入。类似的插件还有SuperTab。通过名字也可以看出它提供的候选词中也包括刚才输入的单词。默认的选择是通过Tab键来确定的，但由于和UltiSnips冲突，所以需要换默认的快捷方式，方法如下：</p>

<pre><code>"set YouCompleteMe trigger key 
let g:ycm_key_list_select_completion = ['&lt;c-n&gt;', '&lt;Down&gt;']
let g:ycm_key_list_previous_completion = ['&lt;c-p&gt;', '&lt;Up&gt;']
</code></pre>

<p>NerdTree提供一个目录结构，让习惯图形界面的朋友找到亲切感，作用不必多说。</p>

<p>Tagbar则配合ctags则提供文件的导航，将文件的关键字提取出来。ctags需要在目录下生成一个tags文件，生成方法:</p>

<pre><code>ctags -R yourdir  #生成tags文件
</code></pre>

<p>FuzzyFinder是一个模糊匹配的文件搜索插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建我的第一个rails程序]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/30/create-my-first-rails-app/"/>
    <updated>2013-07-30T17:22:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/30/create-my-first-rails-app</id>
    <content type="html"><![CDATA[<h2>开启Mysql服务</h2>

<p>我的一个rails程序是采用mysql数据库，不是默认的sqlite3.所以前提是已经安装了mysql。由于Mysql安装了好久，但是很少使用。所以服务没有启动，近来可能会频繁使用，便设置为开机自动启动了。设置方法为:<code>#systemctl enable mysqld.service</code>或者<code>service mysqld start</code>。</p>

<h2>安装mysql驱动</h2>

<p>rails应用中使用msyql,需要Mysql对应的ruby驱动：msyql2。安装方式：</p>

<pre><code>$gem install mysql2
</code></pre>

<p>安装完成后可通过<code>$rails console</code>进行测试。测试方法为：</p>

<pre><code>&gt;require 'mysql2'
&gt;client=Mysql2::Client.new(:host =&gt; "localhost", :username=&gt;"root", :password=&gt;"your_password", :database=&gt;"your_db")
=&gt; #&lt;Mysql2::Client:0xa058aac&gt;
&gt; client.query("select version()")
=&gt; #&lt;Mysql2::Result:0xa05233c&gt;
</code></pre>

<p>这样表示已经连接成功。</p>

<p>到此为止，前期工作已经完成，后面就开始动手了。</p>

<!-- more -->


<h2>创建rails应用</h2>

<pre><code>$rails new railsapp -d msyql  #指定数据库为mysql,否则采用默认的sqlite3
$cd railsapp
$rails server     #启动内置服务器
</code></pre>

<p>启动后，可以通过<code>http://localhost:3000</code>访问刚才创建的应用。一个简单的应用便就此完成了。</p>

<h2>添加应用</h2>

<p>在上面建立的应用程序中，可以找到config/database.yml文件，里面是数据库的配置，默认会生成三个数据库development/test/production,同时也需要在其中添加username和password,分别对应自己的设置，database设为自己想要的数据库名。host设为localhost,port使用系统默认即可。</p>

<p>配置完成后，开始进行数据库的生成。</p>

<pre><code>$rake db:create
</code></pre>

<p>生成的只是空数据库，没有任何表。下面创建第一张表，通过rails的scaffold模式来生成表。</p>

<pre><code>$rails generate scaffold user username:xautjzd email:xautjzd@gmail.com 
</code></pre>

<p>通过此命令会创建相应的controller,views,model和数据库脚本，此时还没有创建表。通过：</p>

<pre><code>$rake db:migrate
</code></pre>

<p>执行上一步生成的数据库脚本。</p>

<h2>数据库回滚</h2>

<p>通过：</p>

<pre><code>$rake db:rollback
</code></pre>

<p>回退上步操作，然后修改date_create_users_rb.其中的up方法来建表，而down方法来删表。修改完后通过</p>

<pre><code>$rake db:migrate
</code></pre>

<p>再次生成新的数据库</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加disqus评论到侧边栏]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/30/add-comments-to-sidebar/"/>
    <updated>2013-07-30T10:47:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/30/add-comments-to-sidebar</id>
    <content type="html"><![CDATA[<h2>新建comments.html文件</h2>

<p>添加评论到侧边栏与添加关于、文章分类和友情链接相似，需要在source/_includes/custom/asides/目录下添加comments.html模块，名字根据自己的喜好可以换成其他的，如xxx.html，然后在comments.html里添加如下内容：</p>

<figure class='code'><figcaption><span>source/\_includes/custom/asides/comments.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;comment_sidebar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>近期评论<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://zhengdongjiang.disqus.com/recent_comments_widget.js?num_items=5&amp;hide_avatars=0&amp;avatar_size=32&amp;excerpt_length=20&quot;</span><span class="nt">&gt;&lt;/script&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://disqus.com/&quot;</span><span class="nt">&gt;</span>Powered by Disqus<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中zhengdongjiang为我disqus对应此网站的shortname，这就不要照搬了，换成你对应的名字即可。</p>

<h2>修改_config.yml文件</h2>

<figure class='code'><figcaption><span>\_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="err">   </span><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/comments.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/friend_sites.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="c1"># Each layout uses the default asides, but they can have their own asides instead. Simply uncomment the lines below</span>
</span><span class='line'><span class="err">    </span><span class="c1"># and add an array with the asides you want to use.</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">blog_index_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/about.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/comments.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/friend_sites.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">post_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/about.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/comments.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/friend_sites.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="err">    </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora17下搭建Ruby和Rails环境]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/29/install-ruby-and-rails/"/>
    <updated>2013-07-29T20:59:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/29/install-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>不同的项目所用的ruby版本不同，所以为了方便不同项目ruby版本的切换，需要在同一个系统中安装多个ruby版本，并且针对不同的项目在不同的版本间切换，为了方便ruby版本的管理，采用<a href="https://rvm.io/">RVM</a>进行管理。</p>

<h2>1.安装RVM</h2>

<pre><code>#curl -L https://get.rvm.io | bash -s stable
</code></pre>

<p>一会儿之后rvm便安装完成,安装位置为/usr/local/rvm目录下，网上很多教程都是使用一般用户权限管理，但是我也尝试过采用一般用户权限安装，但是始终不会安装在~/usrname/.rvm目录下，还是提示安装在/usr/local/rvm下，但是没有写的权限。可能是fedora系统的原因吧，没有深究。使用：</p>

<pre><code>#source /usr/local/rvm/scripts/rvm
</code></pre>

<p>使rvm配置生效。然后采用：</p>

<pre><code>#rvm -v
</code></pre>

<p>查看rvm的版本。同时也可以通过<code>rvm info</code>查看rvm相关信息。</p>

<!-- more -->


<h2>2.安装Ruby环境</h2>

<p>使用<code>rvm install 1.9.3</code>会默认选择<code>http://ruby-lang.org</code>网站下载ruby源码然后进行编译，这样太慢。幸好淘宝提供了<a href="http://ruby.taobao.org/mirrors/ruby/">ruby的下载源</a>，我此次便采用的是先在淘宝的ruby源下载我想要的ruby版本1.9.3-p448，下载完成后，将其放到/usr/local/rvm/archives/目录下，然后再执行<code>rvm install 1.9.3-p448</code>，它便能识别已有的ruby源码包，进行解压和编译一系列过程。大致几分钟便可完成。</p>

<p>下面是我采用一般用户权限安装ruby出错。</p>

<figure class='code'><figcaption><span>一般用户安装ruby出错 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   <span class="nv">$ </span>rvm install 1.9.3-p448
</span><span class='line'>  Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>  No binary rubies available <span class="k">for</span>: fedora/17/i386/ruby-1.9.3-p448.
</span><span class='line'>  Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>  Installing requirements <span class="k">for </span>fedora, might require sudo password.
</span><span class='line'>  Requirements installation successful.
</span><span class='line'>  Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>  ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>  Archive checksum did not match, downloading again.
</span><span class='line'>  rm: cannot remove <span class="sb">`</span>ruby-1.9.3-p448.tar.bz2<span class="s1">&#39;: Permission denied</span>
</span><span class='line'><span class="s1"> curl: Can&#39;</span>t open <span class="s1">&#39;ruby-1.9.3-p448.tar.bz2&#39;</span>!
</span><span class='line'>  curl: try <span class="s1">&#39;curl --help&#39;</span> or <span class="s1">&#39;curl --manual&#39;</span> <span class="k">for </span>more information
</span><span class='line'>  There was an error<span class="o">(</span>23<span class="o">)</span>, please check /usr/local/rvm/log//*.log. Next we<span class="s1">&#39;ll try to fetch via http.</span>
</span><span class='line'><span class="s1"> Trying ftp:// URL instead.</span>
</span><span class='line'><span class="s1"> curl: Can&#39;</span>t open <span class="s1">&#39;ruby-1.9.3-p448.tar.bz2&#39;</span>!
</span><span class='line'>  curl: try <span class="s1">&#39;curl --help&#39;</span> or <span class="s1">&#39;curl --manual&#39;</span> <span class="k">for </span>more information
</span><span class='line'>  There was an error<span class="o">(</span>23<span class="o">)</span>, please check /usr/local/rvm/log//*.log
</span><span class='line'>  There has been an error fetching the ruby interpreter. Halting the installation.
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<h2>3.设置Ruby版本</h2>

<p>通常系统都会安装多个Ruby版本，可通过<code>rvm list</code>查看系统已安装的ruby版本。但需要指定某一版本为系统默认版本。</p>

<pre><code>#rvm use 1.9.3 --default
</code></pre>

<p>我使用的版本为1.9.3，所以指定为默认版本。</p>

<p>安装Ruby的过程中会自动安装gem，通过下列方法查看其版本</p>

<pre><code>#ruby -v
#gem -v
</code></pre>

<p>同时替换gem的下载源为淘宝源：</p>

<pre><code>#gem source -r https://rubygems.org
#gem source -a http://ruby.taobao.org
</code></pre>

<h2>4.安装Rails环境</h2>

<p>采用：</p>

<pre><code>#gem install bundler rails
</code></pre>

<p>安装bundle和rails。</p>

<p>安装完成后进行测试：</p>

<pre><code>#rails -v
#bundle -v
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim下的的插件管理神器——Vundle]]></title>
    <link href="http://xautjzd.github.io/blog/2013/07/27/vim-vundle-install-and-config/"/>
    <updated>2013-07-27T20:38:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/07/27/vim-vundle-install-and-config</id>
    <content type="html"><![CDATA[<p>断断续续用Vim也不少时间了，但是从来没有进行过复杂的Vim配置，每每需要插件都是网上寻求安装方式。但是当插件多了管理也便变得繁琐，最后终于让我结识了插件管理神器——Vundle，用过的人都说好用，所以我便也尝试了，网上也有一部分人采用pathogen来进行插件管理，但是据说没有Vundle好用，也便没有尝试，下面对我使用Vundle做一个总结。</p>

<p>首先Vundle采用git插件的git repo以及vim-scripts维护的GitHub repo, 自动安装, 更新和卸载插件. 把这些繁杂的工作变得简单, 甚至, 成为一种享受.</p>

<h2>安装</h2>

<p><a href="https://github.com/gmarik/vundle">Vundle地址</a>,上面安装及配置步骤已经很详细，我在此再赘述下：</p>

<p>1.拷贝Vundle</p>

<pre><code>$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
</code></pre>

<p>上面步骤将vundle拷贝到本地的～/.vim/bundle/vundle目录下</p>

<p>2.Vundle配置</p>

<p>以下是我的配置文件：</p>

<!-- more -->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>    <span class="nb">set </span>runtimepath+<span class="o">=</span>~/.vim_runtime
</span><span class='line'>
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/basic.vim
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/filetypes.vim
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/plugins_config.vim
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/extended.vim
</span><span class='line'>    <span class="nb">source</span> ~/.vim_runtime/vimrcs/taglist.vim
</span><span class='line'>
</span><span class='line'>    <span class="nb">let </span><span class="nv">Tlist_Ctags_Cmd</span><span class="o">=</span><span class="s1">&#39;/usr/bin/ctags&#39;</span>
</span><span class='line'>    <span class="nb">let </span><span class="nv">Tlist_Inc_Winwidth</span><span class="o">=</span>0
</span><span class='line'>    <span class="nb">let </span><span class="nv">Tlist_Process_File_Always</span><span class="o">=</span>1
</span><span class='line'>    <span class="nb">let </span><span class="nv">Tlist_File_Fold_Auto_Close</span><span class="o">=</span>1
</span><span class='line'>    <span class="nb">set </span>autochdir
</span><span class='line'>
</span><span class='line'>    colorscheme molokai
</span><span class='line'>
</span><span class='line'>    try
</span><span class='line'>        <span class="nb">source</span> ~/.vim_runtime/my_configs.vim
</span><span class='line'>        catch
</span><span class='line'>        endtry
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;Below is vundle configuration</span>
</span><span class='line'><span class="s2">        set nocompatible               &quot;</span>disable vi compatibility
</span><span class='line'>        filetype off                   <span class="s2">&quot; required!</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        set rtp+=~/.vim/bundle/vundle/  &quot;</span><span class="nb">set </span>runtimepath
</span><span class='line'>        call vundle#rc<span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot; let Vundle manage Vundle  </span>
</span><span class='line'><span class="s2">        Bundle &#39;gmarik/vundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        &quot;</span>My Bundles here
</span><span class='line'>        Bundle <span class="s1">&#39;tpope/vim-fugitive&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;Lokaltog/vim-easymotion&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;rstacruz/sparkup&#39;</span>, <span class="o">{</span><span class="s1">&#39;rtp&#39;</span>: <span class="s1">&#39;vim/&#39;</span><span class="o">}</span>
</span><span class='line'>        Bundle <span class="s1">&#39;tpope/vim-rails.git&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;vim-scripts repos</span>
</span><span class='line'><span class="s2">        Bundle &#39;L9&#39;</span>
</span><span class='line'><span class="s2">        Bundle &#39;FuzzyFinder&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        &quot;</span>snippets
</span><span class='line'>        Bundle <span class="s1">&#39;http://github.com/gmarik/snipmate.vim.git&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;Syntax highlight</span>
</span><span class='line'><span class="s2">        Bundle &#39;cucumber.zip&#39;</span>
</span><span class='line'><span class="s2">        Bundle &#39;Markdown&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        &quot;</span>Utility
</span><span class='line'>        Bundle <span class="s1">&#39;SuperTab&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;repeat.vim&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;surround.vim&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;file-line&#39;</span>
</span><span class='line'>        Bundle <span class="s1">&#39;scrooloose/nerdtree&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;Navigation</span>
</span><span class='line'><span class="s2">        Bundle &quot;</span>http://github.com/gmarik/vim-visual-star-search.git<span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        &quot;</span>non github repos
</span><span class='line'>        Bundle <span class="s1">&#39;git://git.wincent.com/command-t.git&#39;</span>
</span><span class='line'>        <span class="s2">&quot;git repos on your local machine (ie. when working on your own plugin)</span>
</span><span class='line'><span class="s2">        &quot;</span>Bundle <span class="s1">&#39;file:///Users/gmarik/path/to/plugin&#39;</span>
</span><span class='line'>
</span><span class='line'>        filetype plugin indent on     <span class="err">&quot;</span> required!
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>其中将需要的插件用Bundle添加进来即可。如需要NERDTree插件，在github上找到它，找到的地址为：<a href="https://github.com/scrooloose/nerdtree.git">https://github.com/scrooloose/nerdtree.git</a></p>

<p>则在~/.vimrc里添加：</p>

<pre><code>Bundle 'scrooloose/nerdtree'
</code></pre>

<p>3.安装</p>

<p>推出刚才的配置文件，然后重新打开vim,并且执行:BundleInstall，这样NERDTree插件便安装完成，可以在~/.vim/bundle目录中查看。Vundle的特色在于使用git管理插件，更新方便，并且支持搜索。</p>

<p>:BundleInstall!更新插件，:BundleClean删除插件(只需在.vimrc中注释相应行), :BundleSearch查找插件。不同电脑间的同步只需通过.vimrc来实现（前提：安装git）。</p>

<p>安装插件就是这么简单！还没有体验的赶紧体验吧！</p>
]]></content>
  </entry>
  
</feed>
