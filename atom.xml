<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xautjzd]]></title>
  <link href="http://bebety.com/atom.xml" rel="self"/>
  <link href="http://bebety.com/"/>
  <updated>2014-12-11T19:56:06+08:00</updated>
  <id>http://bebety.com/</id>
  <author>
    <name><![CDATA[xautjzd]]></name>
    <email><![CDATA[xautjzd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为什么而活？]]></title>
    <link href="http://bebety.com/blog/2014/12/11/why-we-live-in-this-world/"/>
    <updated>2014-12-11T15:47:00+08:00</updated>
    <id>http://bebety.com/blog/2014/12/11/why-we-live-in-this-world</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20141211.jpg"></p>

<p>这些天经常为毕设及论文的事发愁，也因此变得浮躁不安起来，失了方寸，失了往日的沉着心态。整个人犹如悬在空中，飘飘然，毫无状态可言，如行尸走肉般活着。而每到夜深，躺在床上，头脑却越发清晰，不自觉地开始思考人生。心中时不时有一个声音在问自己：<strong>为什么活着</strong>？</p>

<p>如果在上小学以前，意义可能在于吃各种零食和玩各种新奇玩具；小学阶段，则希望身边有一堆玩伴，下课之余疯狂玩耍；初中阶段，则追求着时髦的穿着与发型及情窦初开的懵懂爱情；高中阶段，则处于挣扎彷徨之中，希望早日脱离被各种公式、概念与单词淹没的苦海，期待早日迎来老师口中描述的神圣而神秘的大学的那种自由生活。初入大学后，确实发现原来生活可以如此自由，不想上课就在宿舍闷头睡大觉，可以睡觉睡到自然醒而不用每天天不亮就起来背英语单词和文言文，不再有做不完的作业考不完的试，不再有班主任猥琐的监视，不再有想玩而不得的情景&hellip;</p>

<!-- more -->


<p>可是，当过惯了这种闲云野鹤的日子，却发现自己开始迷失起来，生活开始变的漫无目的，站在人生的十字路口，每个方向都一眼看不到尽头，无所适从，该往哪迈自然成了思考的头等大事。好在乱走一通之后，大致明确了将要走的路，走着走着，也觉欢乐颇多，就这样一路跌跌撞撞走到大四。这时面临的选择有三：1. 保研 2. 考研 3. 工作。当时觉得自己都是要毕业的人了，却感觉连一门拿手绝活都不会，这怎么能出去混江湖？于是果断排除选项3，当时&#8221;研究生&#8221;(仅指硕士)三个字提起来便觉高大上，成为研究生一定不得了，便朝着心中的高端行列走去，开始了复习考研生活。复习了一段时间，突然确定可以保研了。心想，都是研究生，在哪上不是上，凭什么自己学校的研究生水平就低人一等，再加上考虑风险及家庭经济等因素，最终选择了保研。觉得上个研究生，一定能妥妥掌握一门绝技，这样行走江湖都不用害怕。</p>

<p><strong>理想太过于丰满，而现实往往太过于骨感</strong>。最终理想完败，被现实牢牢踩在脚下。临近毕业了，也算大致体验过了一番研究生生活，发现其实研究生也就那回事，只有亲身经历过才能体会个中滋味。不敢说研究生的论文全是bull shit，不过大部分应该算吧。如果有觉冤屈的，我想问一问：当初你为什么选择这个课题？它有什么实际的意义？如果你能理直气壮拍着胸脯说出一二来，那么请自动将自己归为那小部分。</p>

<p>这里，不是要喷研究生水平，而是想问一问：你为什么要上研究生？当时我上研究生一是想通过三年的研究生生活提升自己的技能，当然技能有所提升，不过自觉与同样上班三年的差距略大；二是想着念个研究生，起点一定更高，工作一定更好找，待遇会更高(当然这也几乎是事实)。不过如果仅是为了以上这些目的，我倒觉得显得没有必要，毕竟技术方面，只要去个差不多的公司，提升会更大；薪资方面，只要能力提升上来了，自然也不会低，如果要是混日子的心态，那就另说了。如果想进国企，那么就上研吧，不然很难踏进这个门槛。</p>

<p>为什么活着？心底无数次问自己这个问题，却怎么也回答不上来。<strong>为了给家人一个满意的交代？为了收获一份白首不相离的爱情？为了成就一番众人啧啧称羡的事业？亦或只是为了无愧于心，获得内心的那份愉悦？</strong>曾经一度幻想过效仿古人隐居山林，过着&#8221;晨兴理荒秽，带月荷锄归&#8221;的生活，但也只是想想罢了，现实情况不太允许。身处互联网时代，不知是喜是悲。喜的是：有了网络，获取信息变得更容易，生活更方便；悲的是：在这个快节奏的社会里，凡事只要投入，便期待最好立竿见影，否则就pass掉。身处这样一个物欲横流、金钱至上、唯利是图的社会，大多都在为生计奔波，丝毫没有多余的精力去思考活着的意义，闲暇之余立马便想着逛街、看电影、刷微博微信等，因为难以忍受停下来时心灵的恐慌、内心的空虚。</p>

<p>本来<strong>学习知识的目的是为了更好的思考这个世界</strong>，结果却演变为：学习知识是为了更好的追求名与利、权与钱。但不得不承认的是原本的目的确实是达到了，通过知识更好地了解了社会的规则，便利用已知信息更好地为自己谋福利。并不是说谋福利本身有错，而是说在谋福利的过程中开始迷失自我，本末倒置，忘却了原来谋福利只是一个过程，追求内心的愉悦与无愧于心才是最终的目的。</p>

<p><strong>尾记</strong>：写这篇博文主要源自午睡时的一些想法及搁置内心已久的一个疑问，同时也想到了刘未鹏所表达的《写博客是为了更好的思考》。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自由软件与开源软件]]></title>
    <link href="http://bebety.com/blog/2014/11/20/difference-between-free-software-and-open-source-software/"/>
    <updated>2014-11-20T22:50:00+08:00</updated>
    <id>http://bebety.com/blog/2014/11/20/difference-between-free-software-and-open-source-software</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20141120.jpg">
图为电影《The Shawshank Redemption》的海报</p>

<p>昨晚与张老师还有几位Linux小组成员一起去西邮参加了一个开源者行的活动，演讲嘉宾有GitCafe和Thoughtworks的人员。其实这次去只是想感受感受开源的气氛，一直听说西邮的开源气氛不错，未能亲身感受，所以趁还在西安，赶紧体会体会。这次最大的收获当属对开源文化的重新认识，也重新理解了free software与open source software的异同。</p>

<p>首先，free software的最初版本由Richard Stallman起草，并通过Free Software Foundation发布，其初衷是确保最终用户能够自由使用、学习、分享和修改软件。要理解free software的概念，得先理解其中&#8221;free&#8221;里的含义，这里的&#8221;free&#8221;并不是&#8221;free of charge&#8221;中的含义，而是&#8221;free speech&#8221;中&#8221;free&#8221;表示的意思。</p>

<p>通常所说的free software包含以下四种自由：</p>

<!-- more -->


<h3>1. freedom 0</h3>

<p>如你期望的那样自由地运行那个程序</p>

<h3>2. freedom 1</h3>

<p>能够自由地查看源代码,研究软件是如何工作的，并可随意修改，为你所用。</p>

<h3>3. freedom 2</h3>

<p>可以重新发布原软件，以帮助周围其他人。</p>

<h3>4. freedom 3</h3>

<p>能够重新发布你修改过的程序，以使整个社区都能够从你的修改版本中受益。你可以选择免费，也可以选择收费。</p>

<p>而open source software的标准则由Eric S. Raymond和Bruce Perens发布，更偏向于开放源代码的意思，更多的限于技术层面。Richard Stallman还表示：当你听到&#8221;free software&#8221;，更多的应该是想起自由(freedom)，而不是价格(price)，并多指的是精神层面的自由，而&#8221;open source&#8221;则绝不会让人联想到自由的概念。</p>

<p>我想这也是开源软件与自由软件二者之间的最大区别吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自我解剖]]></title>
    <link href="http://bebety.com/blog/2014/06/22/introspection/"/>
    <updated>2014-06-22T16:24:00+08:00</updated>
    <id>http://bebety.com/blog/2014/06/22/introspection</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140622.jpg"></p>

<p>文字的力量着实强大，但对我这个不善言语的人来说，使用起来略困难，难以透过文字准确阐释心中所思所想及所憧憬的未来生活。所以在写之前，便仔细筛选了上面这张图片，大概反应了我对于未来几十年后垂垂老矣的自己所憧憬的生活吧,因为垂钓在我童年生活中占据了不可估量的分量，至今仍难以忘怀，也是我生命中难得主动喜欢的一项兴趣爱好了。突然想到了海子的《面朝大海，春乱花开》：</p>

<blockquote><p>从明天起，做一个幸福的人<br/>
喂马、劈柴，周游世界<br/>
从明天起，关心粮食和蔬菜<br/>
我有一所房子，面朝大海，春暖花开<br/>
从明天起，和每一个亲人通信<br/>
告诉他们我的幸福<br/>
那幸福的闪电告诉我的<br/>
我将告诉每一个人<br/>
给每一条河每一座山取一个温暖的名字<br/>
陌生人，我也为你祝福<br/>
愿你有一个灿烂的前程<br/>
愿你有情人终成眷属<br/>
愿你在尘世获得幸福<br/>
我只愿面朝大海，春暖花开</p></blockquote>

<!-- more -->


<h2>憧憬</h2>

<p>我只希望在我垂暮之年，能够面朝大海，悠然垂钓即可。即使没有大海，湖、水库亦或池塘等任何有水有鱼的地方皆可。该憧憬的憧憬完了，接下来便是自我解剖时刻。</p>

<p>昨天丰裕口烧烤归来途中，便已顿生困意，加之返程中一个多小时公交的无座状态和前晚陡然的仰卧起坐和俯卧撑，弄的身心疲惫，便早早睡了。今天上午感觉还是没完全“康复”,中午的这一午睡终于算是元神回窍，下午便有经历思考人生了，便萌生了自我解剖的想法。</p>

<p>细细想来，突然发现自己从小到大由自己由衷喜欢的东西有三个：一是钓鱼，二是游泳，三是编程。也许还有其他，但印象中记忆深刻并现在可道出的只有这三儿。能随意道出必然是爱它爱的深沉。如果不确定是否爱它，那么请远离一段时间，看看过段时间后你是否会时常想起。</p>

<h2>垂钓</h2>

<p>如今，已记不清自己第一次垂钓是何时，或是小学，亦或初中。那个时候，没钱买钓竿，便到我们村唯一的竹林偷砍一根，去掉细枝，如果主干不是很直的话，点起蜡烛，用烛火烤烤就会好很多，顺带隔几节熏一个黑圈，也看着美观多了。线和鱼钩超出自制的范围，所以只能掏钱买了，浮漂随便拾一根鸡毛便可搞定，如果难以寻到，那么大蒜头的那根主干也能派上用场。至于鱼饵，和点面粉加点菜籽油或者拿着锄头到处挖红色小蚯蚓便搞定了。由于附近能钓鱼的地方都被乡人承包，所以为了钓鱼顺利进行，即使被承包，也要冒着被逮的风险进行到底。同是乡人，最坏的情况也只是没收钓竿，并找父母说理。当时年龄还小，所以不是很在意。后来慢慢长大了，也便不好意思再去了，毕竟同是一乡人，抬头不见低头见。后来来北方这边上大学，也不似家里方便，钓鱼还得重新制备工具，甚是麻烦，也便搁置了。不过依稀记得大一暑假回家还钓过。</p>

<p>作为为数不多的几个主动喜欢的兴趣之一，我却很少向人提起，一是没有氛围，二是没有必要,大家知道的是我喜欢吃鱼而已。至于我为什么喜欢钓鱼，我自己都很难说清缘由，可能是喜欢钓鱼时，微风吹过，水面泛起的涟漪；或是喜欢钓鱼时，微风拂面的惬意；亦或是等待鱼儿上钩时的那种守候感、浮漂晃动的兴奋及将鱼成功钓起的成就感&hellip;</p>

<h2>游泳</h2>

<p>第一次游泳应该是上小学时，村里可供玩耍的地方不多，老少皆宜的更属凤毛麟角，而村里的那个大池塘当属首推。我能学会游泳，这个池塘功不可没。虽然在家长眼中，游泳是件危险的举动，但我很庆幸我妈当年没有对我下禁止令，否则我今天很可能依然是个旱鸭子。我妈之所以能够放心我游泳，应该也与村中善水者较多有直接关系，夏天每次将近黄昏时，池塘边便充斥着各种欢笑尖叫声，而不少早已畅游其中，当然以青少年居多。不会游泳的人，便拿着汽车内胎当作游泳圈。正是这种环境导致我们村的孩子们大多都会游泳，不会的大部分都是曾经遭到父母或爷爷奶奶们的极度封杀导致。不过随着环境污染的“普及”,这间一亩有余的池塘最终也未能幸免于难，现在水质已经完全便绿,可谓惨不忍睹。</p>

<h2>编程</h2>

<p>从2008年初次接触到现在已有6年时光，却还对初次接触颇有印象。毕竟与之前学到的东西差异太大，一时之间难以理解，消化起来有点难度，那种感觉无异于古代人见到手机的情形。上来就上的C语言，一听这名字，想着与语文英语等类似吧，毕竟同是语言，后来才发现这语言语法略诡异，毕竟其他都是与人沟通，而它却是与机器交流。上完后感觉好多了，现在学习了解过的语言有c/c++, java, ruby, c#， javascript, vimscript和shell script。只要了解了一门，其他语言都是大同小异，起码学习起来不至于那么困难。这也是我为数不多主动喜欢钻研的三者之一。</p>

<h2>弊端解剖</h2>

<p>乒乓球虽然也是我所喜爱的运动之一，但却是得益于以前一位高中同学。自高中以前，学校根本没有乒乓球场地，所以也根本没机会接触。上高中后，体育课有乒乓球与篮球，但也是自由活动课，不过总算是有场地有器材，虽然比较烂，但总比没有好。加上高中的紧张生活，一月放一次假的状态下，总得有调节大脑转移学习注意力的东西。这时，在同班同学的引领下，选择了乒乓这项运动，虽然初始一直是被虐的对象，但随着努力练习，逐步也落入到大家认可的地步。只是进入大学后，身边没有人喜欢打乒乓球，也逐渐荒废了。</p>

<p>而网球、羽毛球的兴趣则是受到教研室张师兄的影响。虽然他只关注李娜，而我则偏向男单，喜欢费德勒打球的优雅与无论输赢的那种淡定，喜爱小德的出众攻防转换能力及完美的身体协调性，敬佩纳豆对每场比赛的执着与每球必争的拼劲。他们之间的较量不仅是一场视觉盛宴，更像是人生态度的完美展现。而羽毛球则是上研以后的主打运动了，一是有同伴一起打，二是教研室有这氛围，老师出钱给我们订场地。羽毛球作为教研室集体娱乐的活动，我都会积极加入，不管技术水平如何。从开始的菜鸟，甚至连球都不太会发，到现在打的凑合，感觉也进步了很多。</p>

<p>仔细想来，这几项都是受旁人影响而对其认识有所改观，通过这些外在的表现，感觉自己当属被动型性格的一类人，很少会去左右他人的思想，影响他人的所思所想，而通常充当被影响的角色，但同时又常常排斥这种情况的出现。而自己由衷喜欢的几项，却鲜有影响他人的，要说影响最多，估计算编程了,感觉在编程方面，还是对身边的同伴有不小影响。庆幸自己不是销售人员，否则估计到哪哪破产。</p>

<h2>收尾的话</h2>

<p>本来下午已经构思好，要写自我剖析，结果刚写到弊端解剖时，便被老师打断了思路，等再回来，结果思路全无，就这样收尾了吧。从明天起，逐渐培养自己的积极主动性，传播正能量！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有关Markdown的两款工具介绍]]></title>
    <link href="http://bebety.com/blog/2014/05/24/introduction-of-two-tools-about-markdown/"/>
    <updated>2014-05-24T14:54:00+08:00</updated>
    <id>http://bebety.com/blog/2014/05/24/introduction-of-two-tools-about-markdown</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140524.jpg"></p>

<p>自从接触markdown这款简洁到不能再简洁的语法以来，我已经深深地喜欢上它，并在各种场合尝试使用它，比如说现在的博客、Evernote笔记、演示文档等。而今又发现一款新工具，采用markdown语法写邮件，现在几乎任何码字场合都能见到markdown的身影。</p>

<p>我一直将自己归为工具控一类，作为一名程序员，编码水平三流，码字水平不入流，但确是重度工具控。每次都会为发现有趣华丽的工具而兴奋，不把玩一番便不快。言归正传，markdown真有那么好么？让人迷恋的地方在哪？</p>

<p>当你向朋友推荐时，可能这是经常会被问到的问题，而且会问：word/wps已经很强大，为什么还要选择markdown?难道它比word更厉害?&hellip;</p>

<p>下面我谈谈自己对markdown的认识及我为何选择markdown的原因。</p>

<!-- more -->


<p>word/wps功能的确强大，但正是因为太过强大，反而令人无法专注。每次在word中码字时，都会思考如何排版才能使文档更加美观，这对那些完美主义、有重度选择症的人来说,这一选择过程太过痛苦而费时。在这个浮躁而眼花缭乱的世界，需要简洁，需要专注。而markdown刚好迎合这种需求，极简的语法，相信大家可以在10分钟搞定，而这也是我迷恋它的原因。</p>

<p>有关markdown语法，请参考：</p>

<ul>
<li><a href="http://daringfireball.net/projects/markdown/basics">markdown官网</a></li>
<li><a href="http://wowubuntu.com/markdown/">markdown语法说明</a></li>
<li><a href="http://jianshu.io/p/q81RER">献给写作者的markdown新手指南</a></li>
</ul>


<p>另一原因是版本管理很方便，通过Git可以很方便的管理，而且只要不是私密内容，都可以免费方便地托管在GitHub上。用word的话，电脑里面不知道会存在多少个word版本。</p>

<p>最后一个原因是团队协作很便捷。如果多人共同撰写某一文档，只需要将其托管在GitHub(或者其他的托管平台)上，然后协作者每人clone一份，在本地完成各自的部分，完成后先pull再push上去。最后一份完整的文档便完成了，如果采用word，得手动copy其他成员内容到自己的版本里，然后将拷贝后的文档再分别发给团队其他成员，这样不把人弄疯了才怪。</p>

<p>基于以上原因，选择了markdown，既然熟悉了这门技能，为何不将其用于其他地方呢？这样，又发现了有关markdown的两款工具，比较实用，介绍给大家。</p>

<ul>
<li><a href="http://markdown-here.com">markdown-here</a></li>
</ul>


<p>markdown-here是一款用markdown撰写邮件的工具，在Chrome、FireFox、Safari、Opera等浏览器中以插件呈现，另外也可用于Thunderbird、Postbox。</p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/copy-as-markdown/fkeaekngjflipcockcnpobkpbbfbhmdn">Copy as markdown</a></li>
</ul>


<p>这是一款Chrome插件，所以要使用，得先有chrome环境。其功能是将Chrome的Tab以markdown的形式拷贝在系统的剪切版中，然后粘贴到目的地即可。有两种选择：1. 拷贝Current Tab 2. 拷贝所有的Tabs。</p>

<h2>参考文档</h2>

<ol>
<li><a href="http://www.yangzhiping.com/tech/markdown-tips.html">markdown小技巧</a></li>
<li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html">markdown协作浅谈</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix C的文件指针与文件描述符]]></title>
    <link href="http://bebety.com/blog/2014/05/21/file-pointer-and-file-descriptor-about-c/"/>
    <updated>2014-05-21T09:59:00+08:00</updated>
    <id>http://bebety.com/blog/2014/05/21/file-pointer-and-file-descriptor-about-c</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140521.jpg"></p>

<p>AISC C中通常用文件指针FILE *进行文件的操作，如fopen, fclose, fread, fwrite, fscanf, fprintf等函数，都是通过文件指针进行文件的一系列操作；而类Unix系统则大多用文件描述符(file descriptor)进行文件的操作，如open, close, read, write等函数，文件描述符是一个整数，是文件描述符表(file descriptor table)中的索引(文件描述符表其实是维护进程打开的文件)。当进程打开或者创建一个文件，内核便会在此进程对应的文件描述符表中分配一个位置，然后便可通过文件描述符操作文件。</p>

<!-- more -->


<p>在内核中，每个进程都拥有自己的文件描述符表，表示此进程已打开的所有文件。文件描述符表中每一项其实是一个指针，指向文件表(file table)中用于描述打开文件的数据块——file对象，file对象其实是一个file结构体，有关file结构体的定义，请参考:include/linux.fs.h文件。file结构体包含了文件的打开模式、读写位置等重要信息，当进程打开一个文件时，内核便会创建一个新的file对象。这里要注意的是,file对象不专属于某个进程，不同进程的文件描述符表中的指针可以指向相同的file对象，从而达到共享打开的文件。file对象有引用计数，记录引用这个对象的文件描述符个数，只有当引用计数为0，内核才会销毁该file对象，所以某个进程关闭文件，并不影响与之共享同一个file对象的进程。file对象中包含一个指针，指向dentry对象。dentry对象代表一个独立的文件路径，如果一个文件被打开多次，那么便会建立多个file对象，但他们都指向同一个dentry对象。</p>

<p>dentry对象又包含一个指向inode对象的指针。inode对象代表一个独立的文件，因为存在硬链接与符号链接，因此不同的dentry对象可以指向同一个inode对象，inode对象包含最终对文件进此操作所需的所有信息，如文件系统类型、文件操作方法、文件权限、访问日期等。</p>

<p>打开文件后，返回的文件描述符实质上是文件描述符表的索引，根据索引对应的指针访问对应的file对象，然后根据file对象访问对应的dentry，根据dentry对应的inode，从而实现文件的操作。</p>

<h2>转换关系</h2>

<p>有关文件指针与文件描述符及文件路径(包含文件名)之间的转换关系如下：</p>

<ul>
<li>文件路径->文件指针: filepath&mdash;fopen()&mdash;>FILE *;</li>
<li><p>文件路径->文件描述符: filepath&mdash;open()&mdash;>fd;</p></li>
<li><p>文件描述符->文件指针: fd&mdash;fdopen()&mdash;>FILE *;</p></li>
<li><p>文件描述符->文件路径: fd&mdash;readlink(/proc/%getpid()/fd/%fd)&mdash;>filepath;</p></li>
<li><p>文件指针->文件描述符: FILE *&mdash;fileno()&ndash;>fd;</p></li>
</ul>


<p>下面通过一个例子展示文件描述符与文件指针间的关系:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">proclnk</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">filepath</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">#</span> <span class="n">test</span><span class="p">.</span><span class="n">txt</span><span class="err">为已存在的文件</span>
</span><span class='line'>  <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;test.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fd</span> <span class="o">=</span> <span class="n">fileno</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>      <span class="n">sprintf</span><span class="p">(</span><span class="n">proclnk</span><span class="p">,</span> <span class="s">&quot;/proc/self/fd/%d&quot;</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span><span class='line'>      <span class="n">readlink</span><span class="p">(</span><span class="n">proclnk</span><span class="p">,</span> <span class="n">filepath</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;fp-&gt;fd-&gt;filepath: %p-&gt;%d-&gt;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fp</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">filepath</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby环境的搭建]]></title>
    <link href="http://bebety.com/blog/2014/05/18/build-ruby-environment/"/>
    <updated>2014-05-18T11:50:00+08:00</updated>
    <id>http://bebety.com/blog/2014/05/18/build-ruby-environment</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140518.jpg"></p>

<h2>Ruby简介</h2>

<p>第一次听到Ruby这个名词，可能会比较陌生，进而产生畏惧，毕竟在中国这片区域普及率还不是很高，但在世界范围内还是有不错的影响力，如果有所质疑，可以参考<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">TIOBE</a>上Ruby的排名情况，进几年一直在前10左右徘徊。到目前为止，大家可能只了解到Ruby是一门编程语言，具体还未做了解，那这里引用<a href="https://www.ruby-lang.org/en/">Ruby官网</a>的解释，供大家参考：</p>

<blockquote><p>Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.</p></blockquote>

<p>用再多的语言描述都略显苍白，只有身临其中把玩一番才能有所体会，而且这种感触才最直观，最有说服力。这里，贴出一个网址，便可在浏览器中体验Ruby之美：</p>

<blockquote><p><a href="http://tryruby.org/levels/1/challenges/0">http://tryruby.org/levels/1/challenges/0</a></p></blockquote>

<p>请感受它的魅力所在吧。</p>

<!-- more -->


<h2>操作系统</h2>

<p>Ruby是跨平台的语言，所以Windows、Linux和Mac OS X都可安装，但不建议在Windows上搭建环境。如果身边确实没有Linux/Mac OS X环境，那么也可选择Windows。之所以不推荐Windows，原因有以下几点：</p>

<ul>
<li>Ruby/Rails在Windows上比较慢</li>
<li>一些gems和libraries在Windows环境不工作</li>
<li>社区大多使用Mac/Linux,如果在Windows环境使用出现问题可能难以解决</li>
</ul>


<p>所以尽量选择Linux/Mac。强烈建议新手选择Ubuntu，网上这方面的教程较多，碰到问题也容易解决。没有还没有Linux环境，并且对Linux系统不熟悉，那么建议先在虚拟机下安装Linux。虚拟机的选择有：</p>

<ul>
<li>Virgrant</li>
<li>VirtualBox</li>
<li>VMware</li>
</ul>


<p>以下教程主要针对Linux/Mac用户，如果实在要选择Windows，那么请在<a href="https://www.ruby-lang.org/zh_cn/downloads/">此处</a>下载Windows下的二进制安装包RubyInstaller。</p>

<h2>1. 安装RVM</h2>

<p>RVM(Ruby Version Manager)是一个使安装、管理和多个Ruby环境切换变得简单的命令行工具。通过它安装不同版本的Ruby环境和gems包变得简单容易。更为详细的解释，请参考<a href="https://rvm.io/">RVM官网</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ \curl -sSL https://get.rvm.io | bash -s stable</span></code></pre></td></tr></table></div></figure>


<p>也可一步到位，直接安装RVM的同时安装上Ruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ \curl -sSL https://get.rvm.io | bash -s stable --ruby=2.1.2</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>2.1.2</code>为指定的Ruby版本，当然也可省略版本号。安装完成后，重新加载RVM环境，使其配置有效。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source ~/.rvm/scripts/rvm</span></code></pre></td></tr></table></div></figure>


<p>接下来检查下RVM是否安装成功：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm -v</span></code></pre></td></tr></table></div></figure>


<p>如果显示<code>rvm xxx(stable) by Wayne E. ....</code>等信息便说明安装成功。</p>

<h2>2. RVM安装Ruby环境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm install 2.1.2</span></code></pre></td></tr></table></div></figure>


<p>安装过程可能比较漫长，耐心等待即可，编译安装完成后，Ruby和Ruby Gems也就安装成功。</p>

<h2>3. 设置Ruby版本</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use 2.1.2 --default</span></code></pre></td></tr></table></div></figure>


<p>这里, <code>2.1.2</code>为前面安装过的Ruby版本。</p>

<p>这时，可以检查是否正确安装配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem -v</span></code></pre></td></tr></table></div></figure>


<p>如果要安装<code>Rails</code>，直接通过：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install rails</span></code></pre></td></tr></table></div></figure>


<p>便可完成安装。更多有关<code>gem</code>的命令，请通过:<code>gem --help</code>查询。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有关实习的一些感受]]></title>
    <link href="http://bebety.com/blog/2014/05/05/some-feelings-about-intern-experience/"/>
    <updated>2014-05-05T19:45:00+08:00</updated>
    <id>http://bebety.com/blog/2014/05/05/some-feelings-about-intern-experience</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140505.jpg"></p>

<p>前几天看了一篇文章，现在依然清晰的记得其中大意：</p>

<blockquote><p>人一生其实很短暂，只有30000天左右可供挥霍，所以请认真地对待每一天，抓紧时间做自己想做的事，不要给今后留有遗憾。</p></blockquote>

<p>细细思索一番，我的人生已过1/3，而其中的大部分时间却没有主动选择自己想过的生活，没有走自己想走的路，顿时心生悲哀，失落之情不禁涌上心头。二十五载的不断尝试、不断摸索，终于找准了自己人生的方向，已是万幸，接下来便是坚定不移的走下去了。也许随着年龄的增长，眼界心界不断改变，方向也会随之变化，这我无法左右，未来的事谁能说的准。唯一能做的就是坚定不移的走当前已确立的路，同时记录自己人生的历程，以此慰藉当前的心，同时也算是给未来的自己留一扇观察当前自己的窗。</p>

<p>一月之余不写博客了，感觉无从写起。生活太过平淡，太过安逸，以致没有什么可值得念叨值得回味的故事，唯一记忆较深的当属实习之事了。自从12年上半年接触Ruby以来，一直断断续续的学习，时而放下，时而拾起。就在上上周(4.25号左右)，无意在RubyChina上看到一则西安Ruby&amp;Rails实习生招聘的信息，而且对实习生的技能要求我也符合，便给他们回邮件并附上自己简历，过了不到一天便给我回复让我去聊聊。听到“聊聊”这词，以为只是搞技术的人之间相互交流，不需要再带纸质简历什么的。结果刚到之后，公司前台人员直接来一句：“你带了简历么？”，我顿时伤了，心想电子简历都给你们发了，不一样么，还带什么纸质简历，经过这次算是长知识了。由于是小公司，老板是搞技术的，所以直接和老板聊的。聊完之后便让填个人基本信息，在填的过程中发现来了Rubyists圈子的一位朋友也来应聘，而且也是Rails,我俩的不同就是我是实习，他是正式。只想说西安Rubyists圈子很小，我了解认识的Thoughtworks大概占了70%以上，剩下的就是当作业余爱好来学习的，比如我。</p>

<!-- more -->


<p>投这次实习，主要原因大致有以下几点：</p>

<ol>
<li>提升自己的Ruby&amp;Rails水平</li>
<li>教研室现阶段事情不多</li>
<li>想赚点money</li>
<li>阻止自己继续懒下去</li>
</ol>


<p>最后确定录用，而且给的薪资还不错(虽说招聘启事是4-8k,但最终3k)，还暗自窃喜了一番。但开始去实习后,完全与自己心中所想不一致。没有人带，直接扔给一个项目，自己单独开发，顿时头大，完全没有Rails项目经验，只不过把《Rails Tutorials》和《Agile web development with Rails》大致过了一遍，官方的文档大致过了几遍而已。没办法，只得硬着头皮上，给的期限是一周。分的是27寸的Mac,由于是第一次使用，连带环境工具什么的摸索了一天。数据库的设计大致花了一天多的时间。再待了两天，边摸索边开发。老板受不了这样的开发进度和低产出，这样待下去我的技术也不会有多大的提高，最后只有选择结束。</p>

<p>通过这次为期大致一周的实习，还是收获了不少。主要有以下几点:</p>

<h3>1. 不要太过于相信招聘信息</h3>

<p>我看到的招聘信息如下：</p>

<p><strong>办公环境</strong></p>

<ol>
<li>开放式办公</li>
<li>27英寸mac一体机或15寸mac pro+27寸宽屏显示器任选。</li>
<li>全年多次周边/国内旅游度假</li>
<li>楼下体育场，公司提供免费运动场地（羽毛球等）</li>
<li>五险一金+双休（特殊赶进度会偶尔周六加班，但绝不是周周加班，并且也不会特别多加班）</li>
</ol>


<p><strong>职位名称：Ruby/Rails实习生</strong></p>

<p>薪资待遇：4k-8k 、 五险一金 、 双休
招聘人数：3名
岗位职责：负责WEB/APP的后台程序编写</p>

<p><strong>技术要求：</strong></p>

<ol>
<li>至少熟悉一门面向对象语言，并热衷于学习新技术。</li>
<li>熟悉基本的数据库操作。</li>
<li>熟悉Mac/Linux操作系统，熟悉Git开发流程。</li>
</ol>


<p>现在我来解读下:</p>

<ol>
<li><p>一体机/pro任选
入职后直接分的是一体机，没有选择，不过这不重要，只是有点欺骗感情罢了。</p></li>
<li><p>全年多次周边/国内旅游度假
多次？几次称为多次？不要受迷惑了，一年有4次都不错了。还不如写清具体数字来的实在。我想不写清楚大致是因为公司本身是做旅游相关的，景点系统出现问题过去维护算是旅游吧，但据说去了之后听员工说忙死的节奏。</p></li>
<li><p>免费提供运动场地
貌似看到发了一条征求中午打球的消息。中午12点下班，下午1:30上班，吃饭都得至少30分钟吧，哪还有时间打球？反正我去的一周中没见到有员工去打球的。周末有没有不知道，再说周末休息，谁吃饱撑的去公司附近打球？</p></li>
<li><p>加班问题
由于我是5.1前几天去的，所以周末肯定加班了，至于平时有没有加班，便无从得知。唯一了解的是工作日每周都加班，下班时间是下午6点。但到点后几乎没人离开，所以我每次都会差不多6：20才离开，每次差不多算是下班前5名了。至于他们什么时候走我不知道，也没问过。唯一能确定的是实习这段时间内一直都在加班，从未停止过。</p></li>
<li><p>实习生待遇问题
招聘上写的是实习4-8k，当时去的时候心里便想：小公司怎么可能这样大方？后来谈好后，他直接来一句：你期望的薪资是多少？完全没有应对这样问题的经验，真想说你们招聘上不是有规定么？但没好意思说，直接来了句：2k。最后给了我3k,还说什么你要求的是2k，我们给了你3k,这是我们公司的制度什么的，言外之意就是说我们公司还是很人性化的。我好感恩戴德啊！山里出来的终于长知识了。</p></li>
<li><p>技能要求
不要被公司所提的技能要求所蒙蔽，这是最低门槛，但不仅限于此。也不代表满足这些要求便能被聘用。公司当然希望你能尽快地创造价值。大公司能比小公司好的就是有雄厚的资金实力可以支撑完善的培训机制，只要没有智力的硬伤便能将你培养成他们的未来劳动力。而小公司则没有那么多money来建立自己的培训机制，只能通过参与项目，从简单到复杂。以项目驱动这点也很不错，最忌讳的就是上来单独分一个项目，自己一边干去，还给一个特别紧迫的期限。这尼玛完全将新人当老员工使，除了待遇的不同，其他的没别的了。</p></li>
</ol>


<h3>2. 一定要专一门吃饭的技能</h3>

<p>不管从事任何职业，或者打算将来从事的职业，一定要逐步学习并精通，因为今后你要靠它吃饭。虽说“工欲善其事，必先利其器”，但不要将重心过于偏向工具的精通上，毕竟工具只是辅助工具，能够满足自己的要求即可。这点我深有体会。一直以来，我一直很注重工具技能的学习，从开始的Linux系统及命令，到shell编程，再到Vim各种插件及tmux的使用，再到Git的操作&hellip;一直都热衷学习工具的方方面面，而不是将重心放在编程。也即是没有重点培养自己的创造力，而是学习能力。所以决定将重心逐步转移到创造力上，从写博客开始！</p>

<h3>3. 毕业首选大公司</h3>

<p>毕业初入社会，一定要尽量先进大公司。大公司之所以能够做大，肯定有她的过人之处,通过深处其中能够汲取精华。不过并不代表小公司便没有可取之处，特别是那种初创企业，应该也是优先选择的范围。</p>

<h3>4. 身体是革命的本钱</h3>

<p>实习一周，每天都感觉非常累。在学校已经习惯午睡，但实习后便没几乎没机会，一到下午就犯困，晚上回来后也没有心思再学习了，专注度完全不够。所以趁在学校好好锻炼身体，这样才能精神充沛干其他事情。没有好身体，严重影响学习工作的专注，专注度完全不够。所以趁在学校好好锻炼身体，这样才能精神充沛干其他事情。没有好身体，严重影响学习工作的专注度。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随时随地用Octopress写博客]]></title>
    <link href="http://bebety.com/blog/2014/04/01/clone-your-cotopress-to-different-places/"/>
    <updated>2014-04-01T11:00:00+08:00</updated>
    <id>http://bebety.com/blog/2014/04/01/clone-your-cotopress-to-different-places</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140401octopress.jpg"></p>

<p><a href="http://octopress.org/">Octopress</a>所依赖的环境是Ruby和Git,所以要使用它写博客，必须先确保目标机器上已经安装Ruby和Git。有时候可能需要在新的环境中创作，那么得进行以下的一些操作了。在讲操作前先简要介绍下Octopress如何工作。</p>

<h2>Octopress是怎么工作的?</h2>

<p>Octopress默认有两个分支，即master和source。source分支主要存储用于生成博客的源文件，而master分支则主要包含生成后的博客。master分支存储在_deploy文件夹中，之所以以下划线命名，是因为在执行<code>git push origin source</code>时，下划线开头的文件夹会被忽略掉。</p>

<p>当然，也可以创建自己的分支，但master分支一般主要用于存储生成后的博客，而博客源文件则可以自己新建分支存储。我目前在原有的基础上新建了newtheme分支，用于更改主题后的博客源码存储，以前的源码存储在source分支。</p>

<h2>创建本地Octopress库</h2>

<p>在新环境中写作时，需要进行以下几个步骤：</p>

<!-- more -->


<h3>克隆博客到新机器</h3>

<p>首先，需要克隆source分支到新机器上:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b source git@github.com:username/usename.github.com.git Octopress</span></code></pre></td></tr></table></div></figure>


<h3>设置GitHub Repository</h3>

<p>克隆source到本地后，默认没有<em>deploy目录，所以还需要创建</em>deploy，进行git init操作，同时也要设置remote respository。这几个步骤可以通过手动完成，但作为使用者，当然是操作越简单越好，能够自动化完成就自动化。这里Octopress提供了一个自动化完成这几个步骤的脚本，执行它即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>在出现的提示符后输入自己对应的remote repository即可。</p>

<p>以上操作即可完成remote repository的设置，另一种方法是直接克隆master分支到本地：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd Octopress
</span><span class='line'>$ git clone git@github.com:username/username.github.com.git _deploy</span></code></pre></td></tr></table></div></figure>


<p>接下来就是安心写作的时刻了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git远程分支的一些操作]]></title>
    <link href="http://bebety.com/blog/2014/04/01/some-operation-on-git-branch/"/>
    <updated>2014-04-01T08:52:00+08:00</updated>
    <id>http://bebety.com/blog/2014/04/01/some-operation-on-git-branch</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140401.jpg"></p>

<p>我是个爱折腾的人，昨天晚上突然看着自己的博客主题不爽，便立马将其从原先的Greyshade换到现在的Cleanpress。换完并构思一篇新博客之后，再次提交到GitHub上，得到提示此分支滞后于GitHub上，采用<code>git pull</code>又产生了太多冲突，冲突少手动解决还可，太多更改起来太麻烦，便萌生推掉远程分支重新提交的念头。可之前从未对远程分支做过相关的操作，只是偶尔删除远程库上的单个文件而已，又不得不求助Google了。碰到问题在解决过程中总是会学到很多，并且记忆深刻，现予以记录，方便自己，也回馈社会。</p>

<p>删除之前先查看远程分支，在确定的情况下再作删除，以致不会删错。</p>

<h2>查看远程分支</h2>

<p>采用<code>git branch -a</code>可查看所有的分支(本地+远程),而<code>git branch -r</code>仅显示远程。如果打开颜色支持，还会看到远程分支的颜色与本地不同。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git branch -a
</span><span class='line'>* newtheme
</span><span class='line'>  source
</span><span class='line'>  remotes/origin/HEAD -&gt; origin/master
</span><span class='line'>  remotes/origin/newtheme
</span><span class='line'>  remotes/origin/source
</span></code></pre></td></tr></table></div></figure>


<h2>删除远程分支</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git push origin --delete &lt;branchname&gt;</span></code></pre></td></tr></table></div></figure>


<p>删除tag也是同样的操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git push origin --delete &lt;tagname&gt; </span></code></pre></td></tr></table></div></figure>


<p>由于我删除的是远程库的默认分支master,所以在删除过程中产生了以下错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>remote: error: refusing to delete the current branch: refs/heads/master
</span><span class='line'>To git@github.com:xautjzd/xautjzd.github.com.git
</span><span class='line'> ! [remote rejected] master (deletion of the current branch prohibited)
</span><span class='line'>  error: failed to push some refs to 'git@github.com:xautjzd/xautjzd.github.com.git'
</span></code></pre></td></tr></table></div></figure>


<p>这时只要进入该项目的settings，将default branch改为其他分支便可进行删除工作。</p>

<h2>重命名远程分支</h2>

<p>将本地分支推送到一个不存在的远程分支上便可新建远程分支，推送过后发现名称不对，便可通过下面的命令来修改名称：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git branch -m oldname newname</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有关安卓刷机的一些感受]]></title>
    <link href="http://bebety.com/blog/2014/03/30/experience-on-android-device-ruu/"/>
    <updated>2014-03-30T21:10:00+08:00</updated>
    <id>http://bebety.com/blog/2014/03/30/experience-on-android-device-ruu</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140330.jpg">
生命的乐趣在于体验各种新奇，每次尝试都会从中收获兴奋和快乐，同时也会有小小的成就感。但伴随这些快乐的往往是挫折，所以偷偷乐的同时也要正确看待这些不愉快的成分，其实他们就是生活的调味品，在充斥欢乐的时候来点不和谐的东西往往让人记忆深刻，生活需要刺激。</p>

<p>平时一直都处于神游迷离的状态，突然脑中会闪过一丝新奇想法。这不前几天玩三国杀玩到吐的时候，突然闪过刷机的念头，于是在晚上将近12点的时刻，开始了刷机之旅。网上有关各种机型的刷机教程早已铺天盖地，随处可见，也有刷机过程时出现的各种问题。我也将加入这一行列，成为其中一员。</p>

<!-- more -->


<p>首先，在网上找到我的机型(酷派5891)对应的刷机包，然后安装对应的ADB驱动，刷入第三方Recovery，紧接着就是卡刷MIUI&hellip;一切都遵照教程步骤一步一步来，但刷了两次都没成功。最后突然发现刷Recovery时，每次都会提示&#8221;su permission denied&#8221;,但此提示后又出现Recovery刷入成功的提示。虽然开始就看到这提示，但由于看到后面的刷入成功的提示符，所以没太在意，但经过两次失败后，不得不重新审视这些错误了。既然提示权限不够，便抱着试试的心态先进行Root。没想到Root后再进行刷机一路畅通，这算是意外的惊喜吧，看到成功刷成MIUI,心里还是有小小的欣喜的。在这里说句题外话，MIUI确实不错，不论从外观到实用性，都给了我不少惊喜，虽然以前身边的同学也有用小米的，也把玩过，但丝毫没有那种眼前一亮的感觉，有些东西只有亲身体会，并细细观赏才能发现惊喜之处。</p>

<p>完成之后，玩了将近有两个小时吧，大部分的功能都体验了一把，还特意把玩机手册里的大部分内容读了一遍。在体验的过程中，发现一个问题：3g无法上网！这真的是大问题，有种立马想刷回官方酷派自身CoolLife的冲动。网上找了各种解决办法，有说摁<code>*#*#4636#*#*</code>,然后在弹出的界面中配置网络什么的，但都行不通。最后尝试了一个不太可能的解决办法：</p>

<blockquote><p>在关掉3G网络的情况下重启手机</p></blockquote>

<p>没想到成功解决！生活之中处处充满惊喜，往往不可能会变为可能。所以不要轻易放过一丝可能的机会。</p>

<p>刷完第二天，已毕业的师兄过来了，我抱着再次回味的心态又把他的华为C8815刷成MIUI了，虽然刷机过程中出现了小插曲(据说华为和HTC刷机需要先解锁才能刷，但发现解锁过程中无论如何都不弹出输入解锁码的界面。于是放弃解锁的念头直接刷成功了，但唯一的缺陷就是每次重启后,第三方Recovery会给出警告。所以在刷成功后又刷入官方的Recovery了)，但是最终还是成功完成。</p>

<p>以下是我刷机过程的一些疑问：</p>

<ol>
<li>Recovery是什么？</li>
<li>刷机方法有哪些？</li>
<li>Fastboot是什么?</li>
</ol>


<p>可能我有强迫症吧，对于陌生的名词，我不习惯忽略，而是征服它，而Google往往是最有效的查找扫盲方案的工具。以下摘自知乎的答案：</p>

<blockquote><p>Recovery本质是一个简单的Linux+简单的GUI。作用是系统出现问题时，可以切换到Recovery中加载存储卡里面已经下载好的内核，类似PC的U盘修复盘。刷机包通常放在SD卡，所以这种刷机方式一般称为卡刷。</p>

<p>Fastboot主要是用来与Bootloader的USB进行通讯的PC命令行工具，一般主要用来向Bootloader传送刷机文件进行文件分区重烧。在使用时，必须有一根USB线与PC相连，所以这种方式被称为线刷。</p>

<p>卡刷与线刷更为通俗的解释是：fastboot相当于BIOS里面启用CDROM装系统，而Recovery相当于一键Ghost。而Bootloader的解锁就是曲调fastboot指令里的校验模块。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言中的Segment fault问题]]></title>
    <link href="http://bebety.com/blog/2014/03/15/segment-fault-core-dumped-of-c/"/>
    <updated>2014-03-15T20:47:00+08:00</updated>
    <id>http://bebety.com/blog/2014/03/15/segment-fault-core-dumped-of-c</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/20140315.jpg"></p>

<h2>什么是Segment fault?</h2>

<blockquote><p> a segmentation fault (often shortened to segfault) or access violation is a fault raised by hardware with memory protection, notifying an operating system (OS) about a memory access violation; on x86 computers this is a form of general protection fault.</p></blockquote>

<p>以上为<a href="http://en.wikipedia.org/wiki/Segmentation_fault">Wikipedia</a>对段错误的解释。用通俗易懂的话来说就是访问越界，访问了不存在或者受操作系统保护的内存，通常都是由于数组越界或者指针引起。</p>

<h2>产生段错误的原因</h2>

<ol>
<li>dereferencing NULL</li>
<li>dereferencing an uninitialized pointer</li>
<li>deferencing a pointer that has been freed/out of scope</li>
<li>writing off the end of an array</li>
<li>recursive function that uses all of the stack space</li>
</ol>


<!-- more -->


<h2>什么是core文件？</h2>

<p>在调试段错误前，不得不提到core文件。那么什么是core文件呢?core文件其实就是当程序崩溃时保存的该进程在内存中的映像(同时包含调试信息),主要用于调试。</p>

<h2>如何调试？</h2>

<p>像VS等IDE集成度太高，在方便快捷的同时也会将人培养成傻瓜，培养成码农。所以要想抱着以学习的心态来学习，最好转到Linux/Mac OS平台下，通过gcc/cmake等command-line式的编译器来进行代码的编译，当然我这里主要指的是c/c++。</p>

<p>Linux段错误时默认不会生成core file，core file的大小被设置为0,可通过<code>ulimit -a</code>查看。所以首先得通过<code>$ulimit -c unlimited</code>进行设置，以便能够生成core file。但在shell里设置的话，只是针对当前会话有效，如果想永久生效，需要将其写到配置文件中，如~/.bashrc, /etc/profile/, /etc/security/limits.conf等中。</p>

<p>设置完成后，便可通过gdb和gcc来调试程序了。如果一个程序存在段错误问题，那么执行<code>$gcc filename.c -g -o filename</code>进行编译后，在运行<code>filename</code>的时候，会在当前的目录下产生一个core文件。那么这个时候便可以利用core文件进行调试了。调试方法为:</p>

<pre><code>$gdb [exec file] [core file]
</code></pre>

<p>有关gdb的详细用法，请参考相关文档去吧。</p>

<p>段错误实质上是操作系统内核产生的一种中断信号，信号为12。有关信号的知识，请参考操作系统相关的书籍。可通过<code>kill -s SIGSEGV processid</code>来给指定的进程id发送段错误信号，段错误默认处理方法是终止程序的运行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014西安归途随笔]]></title>
    <link href="http://bebety.com/blog/2014/02/13/back-to-xian-2014/"/>
    <updated>2014-02-13T07:32:00+08:00</updated>
    <id>http://bebety.com/blog/2014/02/13/back-to-xian-2014</id>
    <content type="html"><![CDATA[<p><img src="http://bebety.com/images/back_to_xi'an20140213.jpg"></p>

<p>从1月20号到现在已有20多天了，说长不长，说短不短。回家的这段日子里很惬意，每天睡觉睡到自然醒，吃就更不用说了，无论在哪都不及家里吃的放心舒心，至于住么，家里自然比学校宿舍舒服多了。唯一美中不足的就是缺乏学习的氛围，不管多闲，都没心思整理开题报告，学习便更不用说了。一开始将其归结于家里没网，不过仔细琢磨下还是学习的气氛不够，导致自己变得懒惰。幸好在家呆的时间不是很长，不然真的要懒得无以复加。</p>

<p>本来回去之前便已将回程票买好了，买的2.16的，从武昌走。原计划是提前去武汉玩两天再走，毕竟武汉哥们好几个，随意蹭个吃住不成问题。哪知导师开始催(其实也谈不上催，就QQ上发了一个他专署的?而已，顿时感觉情况不妙，赶紧问问教研室的同学，没想到同级的都去了好几个，而且老师前几天给他们说了句：研究生应该过完初十就来的，这。。。不敢久留，立马抢了张12号的票)，便匆匆踏上了回西安的旅途。</p>

<!-- more -->


<p>以往都是从武昌走，因为哥们几个都留在武昌那边。匆忙踏上归途，当然选择汉口了，毕竟汉口这边还是近点。但汉口火车站有点陌生，生怕走错了，便格外小心谨慎(虽然以前从汉口走过一次，不过已经事隔好几年了)。几年没从这边走，发现变化真的还挺大。火车站的地下一层就是出租、地铁、公交和大巴的起点，简直是太方便了！对比下西安，就差的有点远了。西安火车站相比之下显得有点小，有点陈旧。</p>

<p>回程中，对面座的是甘肃陇西的一对夫妇，车上闲聊了几句，才知道他们是在武汉开拉面馆的陇西人。这对夫妇过年没有回家，现在才回。只是他们此次回去就不再准备再返回武汉，具体原因没好意思问。但我想最可能的是生意不好，赚不到钱吧。因为武汉那边的饮食主要是米饭，中午下午吃拉面不太可能。早餐也吃热干面居多，当然可能也有不乏吃其他面的，比如拉面，但相比之下，拉面的价格有点高(他们说大碗6元，小碗5元)这对于早餐来说略贵，不划算。不过兰州拉面真的是名声在外，全国人民几乎无人不知无人不晓。看他们穿着应该是回民，因为男的头上带着一顶小白帽，女的头上搭着一块紫色的头巾，这是回民特有的标志，当然至少我是这么认为，至于甘肃有没有不是回民也这身打扮那就不得而知了。他们的笑很纯朴，没有城市中人们透漏出的那种精明和虚伪等。在车上时，我真的很想问问他们为何这身打扮，有什么特别的意义。但好几次都是话到嘴边都咽下去了，生怕会显得不礼貌或引起麻烦等。毕竟问这问题有点像问人为什么要穿衣似的，太习以为常，那种穿着早已渗透到他们的潜意识当中。不过我用手机查了查，有的网友说是男的带的帽子是圆形的或者是六角形，而女的则是结婚后才系头巾，未婚女子则不必要，头巾有黑色、白色等。年龄不同，佩戴的颜色会有所不同，不过我见过的只有黑色和紫色，等哪天有个回民朋友再详细了解下他们的风俗吧，我还是对各种不同的民俗颇有兴趣，从吃到穿到节日都是我的主要关注点。</p>

<p>就这样随着时间的流逝，我也到站了，列车抵达西安是凌晨5点多，公交是6点才发车。趁等车时刻，发现西安的出租公司竟有10家左右。以前印象中只有4-5种，没想到在火车站附近竟有那么多。西安其他地方相信也应该会有我没看到过的，可见出租很赚钱啊。就这样又一次见证了西安天未亮的时刻，毕竟这样的时刻对于我并不多见。将行李放到宿舍，去同盛楼吃了一碗肉丸糊辣汤，真心有点坑爹，6块吃了个这玩意儿。</p>

<p>另一个不得不提的是网络资费问题。现在是移动互联网的时代，手机上网成了人们必不可少的一项休闲活动。各种APP都需要网络才能玩的转，所以没有流量怎么能行？套餐送的流量为300M，但都是省内的，这对于省外的求学者来说有点令人心寒。网还得上，打电话给客服办个流量包，结果得知当月办只能当月使用，这真的是有点无语，1月底你说我办还是不办？为何这么死板，为何不按照从生效日起一个月呢？这样不是皆大欢喜么？闹心的很。</p>

<p>2014西安回程随笔到此结束吧，我的马年每周千字工作拉开序幕了，接下来的就是需要坚持了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim插件之surround.vim]]></title>
    <link href="http://bebety.com/blog/2014/01/16/vim-plugin-surround-dot-vim/"/>
    <updated>2014-01-16T10:17:00+08:00</updated>
    <id>http://bebety.com/blog/2014/01/16/vim-plugin-surround-dot-vim</id>
    <content type="html"><![CDATA[<h3>Surround.vim插件简介</h3>

<p><a href="https://github.com/tpope/vim-surround">Surround.vim</a> 是一款关于括号、引号和xml标签匹配的插件，可以成对的添加、修改和删除。当然也可以自定义匹配项。下面就常用的功能分别对标记的添加、修改和删除一一介绍。</p>

<h4>添加</h4>

<p>如现有一文本<code>Hello,wolrd</code>。光标处在文本中，然后输入ysiw&#8221;,文本变成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"Hello,world"</span></code></pre></td></tr></table></div></figure>


<p><code>yss</code>则将光标所在的当前行全部添加标签。如<code>yss)</code>则将当前行用()包围。</p>

<!-- more -->


<p>b, B, r和a分别是), }, ]和>的别名，t 则代表html/xml标签。</p>

<p><code>ysst</code>,然后再输入html/xml标签，即可成对添加。如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello,world</span></code></pre></td></tr></table></div></figure>


<p>输入<code>ysst&lt;p&gt;</code>后，变为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;p&gt;Hello,World&lt;/p&gt;</span></code></pre></td></tr></table></div></figure>


<p>类似的，<code>yssb</code>、<code>yssB</code>、<code>yssr</code>和<code>yssa</code>则给当前行添加相应的标记。</p>

<p><code>&lt;Ctrl-v&gt;ySb</code>则给选定的文本添加()。</p>

<h4>修改</h4>

<p><code>cs</code>为修改的命令。如：<code>cs)}</code>将()换为{}，<code>csbr</code>将()换为[]。</p>

<h4>删除</h4>

<p><code>ds</code>为删除的命令。如：<code>dsb</code>删除(),<code>dsB</code>删除{},<code>dst</code>则删除相应的html/xml标签。</p>

<h3>安装</h3>

<p>先安装上<a href="https://github.com/gmarik/vundle">vundle</a>或者<a href="https://github.com/tpope/vim-pathogen">pathogen</a>插件，然后再通过他们安装插件比较方便。下面以vundle举例：</p>

<p>在<a href="https://github.com/xautjzd/dotvim">~/.vimrc</a>中添加：</p>

<p>Bundle &lsquo;tpope/vim-surround&rsquo;</p>

<p>然后执行<code>BundleInstall</code>安装。</p>

<p>更多关于surround的细节，请通过<code>：help surround</code>查看。</p>

<h3>其他</h3>

<p>其实surround只是对vim中<a href="http://vimdoc.sourceforge.net/htmldoc/motion.html">text-object motion</a>的扩展，vim常见的text-object编辑功能有：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ci(, ci[, ci{：删除(),[],{}之间的所有字符并进入insert模式。类似的还有ci",ci'。
</span><span class='line'>cit: 删除html/xml标签内所有的文本并进入insert模式。
</span><span class='line'>di: 剪切配对符号间的文本，eg:di(, di{, ...
</span><span class='line'>yi: 复制配对符号间的文本, eg:yi(, yi{, ...
</span><span class='line'>
</span><span class='line'>ca, da, ya与ci, di, yi类似，只是包括比配符号本身。</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回首2013，展望2014]]></title>
    <link href="http://bebety.com/blog/2014/01/02/new-year-plan/"/>
    <updated>2014-01-02T14:52:00+08:00</updated>
    <id>http://bebety.com/blog/2014/01/02/new-year-plan</id>
    <content type="html"><![CDATA[<p>回首过去这一年，无论从技术还是思维上，都有很大的提升，但要我数萝卜下窖似的列举出来，我还真的列不出。只清楚地记得以下几件大事：</p>

<ol>
<li>将博客从CSDN迁移到Octopress上。之所以迁移到Octopress上，是因为Octopress基于Jekyll，而Jekyll采用Ruby语言实现，恰巧我又迷上了Ruby。另一个原因是Octopress采用Markdown语法实现，排版更方便，简单的几个符号便能搞定,而且更美观。自从用了Markdown语法排版后，腰不酸了，腿不疼了。剩余的时间则可投入写作，何乐而不为呢?最大的好处是易迁移，只不过现在暂时还没有切身的体会，想想罢了，毕竟托管到GitHub上对于目前阶段已经够用，不必花钱买VPS，但不排除以后有钱了弄个VPS折腾下。那时候迁移也方便，所有的博客都是通过Jekyll引擎将markdown格式的文本转换为静态的Html文档，简单的拷贝下便可以了，而且还可以很方便的进行备份。其实与他人协作共同管理博客也是轻而易举的事了，只不过目前没这必要。</li>
</ol>


<!-- more -->


<ol>
<li><p>加入了西安Rubyists圈子，结识了好几个大哥，编程都很猛。在他们的熏陶下，了解了不少新知识，拓宽了知识面，同时也见识了有趣的工具。这也算是从学校这个小圈子走出去了，跳出圈子后，才发现自己有多菜，真的是被甩好几条街。在学校里面，觉得自己水平还行，正是这种井底之蛙的思维严重束缚了自己，以为比身边同学多了解一点就很有成就感。出去一看，完全不是那么回事。如果说别人是高中生，那么我感觉自己就是小学生。</p></li>
<li><p>成了工具控。现在已经习惯使用Vim进行编写代码和写博客，但现在写过的也仅限于C、Java、Ruby与Shell脚本了。如果说从前的Vim在我手中是把未经开封的盾刀的话，那么如今它已是寒气逼人。以前用它也仅限于插入、移动、保存等基本功能，在2013年里，我已经学会了打磨它，为它装上各种犀利插件，使其锋利起来，正所谓磨刀不误砍柴工。同时也在这一年习惯了Evernote的使用，最早接触它应该是在11年末，不过当时也没给人眼睛一亮的感觉，记得当时用的还是盛大的麦库笔记本。经过了差不多一年的时间，已经逐渐成为我的必备工具了。相比其他记事本来说，最吸引人之处当属它的Web Clipper插件，从此以后看到好文只需单击一下鼠标便可收入囊中，不用在复制粘贴，而且还担心排版问题。另一个强大的存储工具——Dropbox也不得不提，作为同步网盘，确实好用的没话说。国内的类似同步网盘也有不少，空间可能更大，但是用户体验性却始终不如网盘的鼻祖——Dropbox，它的差异备份应该算是其一大特色，其他不少网盘只能望其项背。</p></li>
<li><p>一月至少一本书的计划顺利坚持下来。具体忘了从几月份开始这个计划了，不过从实施至今确实一直坚持下来了，看过的书有《黑客与画家》，《浪潮之颠》，《水知道答案》，《生命中不能承受的轻》，《Programming Ruby》,《Ruby元编程》，《Rework》,《Unix环境高级编程》，《深入理解计算机系统》，《高效程序员的45个习惯》，《七周七语言》等，至少80%以上都是与IT行业有关，文学方面大致看过的只是龙应台女士的《野火集》、《目送》等几本散文集，还有所欠缺。不过也庆幸至少坚持下来了，希望在2014年继续，直至我生命的尽头。</p></li>
<li><p>Linux水平较之去年有提升，尤其在Shell编程方面，在这里不得不提到《Linux Shell脚本攻略》这本书了，知识的组织确实非常巧妙，从原理到实战，讲的清晰到位。对于Git的理解也更深入，不限于以前仅了解的add,commit,reset，log等几个基本操作。目前比较熟悉的是Debian和Red Hat系的系统，ArchLinux只是体验了一把，花了一天研究了下，后来也没再继续研究下去，现在也忘的差不多了，头脑中多了几个名词而已。</p></li>
<li><p>由于老师的安排，从11月开始便开始研究起了Hadoop，前前后后大致花了3周时间，后来由于其他原因也搁置了。Hadoop的环境不是很好配置，光环境的搭建就花了好几天时间。程序更是难以理解，花了差不多一周多的时间才大致明白程序的结构及运行原理，与传统的程序出入有点大，调试也不是那么容易，后来虽说没再继续，不过也算是对Hadoop有了基本的认识。12月份开始便开始为开题做准备，开始看论文资料，大多都是与云计算有关，特别是云迁移方面，最后逐渐向移动设备的云迁移靠拢，同时也看了几篇行为识别方面的论文，所以最后题目定为《移动云迁移的行为识别应用研究》，真的是为开题发愁，之前都是开发web相关的应用，现在突然走起了理论流，真心不太适应。特别是看英文论文，虽说大致能看懂，但效率还是比较低，须全身心的投入才能投入其中，稍有浮躁，便两眼发黑。</p></li>
</ol>


<p>回首2013，大致也就对这几件事印象比较深刻，其他的都已经被时间之尘所掩埋。穿梭于各种博客间，发现都在展望2014，我也要跟上队伍，不掉队，来展望下我的2014。希望在2014年里，以下几点能实现：</p>

<ol>
<li><p>拿到驾照。虽然报名一年多了，但除了考了科一外，根本没去练过车，实属遗憾。其实不是没有时间，只是自己一直在找借口自己好忙，没时间去，便也耽误了。</p></li>
<li><p>提高执行力。想到的事尽早完成，尽量养成“今日事，今日毕”的习惯。</p></li>
<li><p>找到理想的工作，争取进BAT其中一家。2014年下半年便要开始找工作，所以上半年得开始做准备。</p></li>
<li><p>解决单身问题。虽说这得讲求缘分，不过还是尽早完成吧。</p></li>
<li><p>坚持one book one month at least计划</p></li>
<li><p>开始强身健体。干程序员这行，不仅拼智力，还得拼体力，身体不好，怎么干这行。现在发现自己的肩已经太过僵硬，不够灵活，希望在新的一年里多锻炼，每天坚持跑步。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux常用操作总结]]></title>
    <link href="http://bebety.com/blog/2013/12/04/sumary-about-tmux-operation/"/>
    <updated>2013-12-04T19:32:00+08:00</updated>
    <id>http://bebety.com/blog/2013/12/04/sumary-about-tmux-operation</id>
    <content type="html"><![CDATA[<p>以前也写过一篇关于<a href="http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration/">tmux的文章</a>,大概对tmux从简介、安装到操作已有简单的介绍，但由于是刚使用tmux时所写，总感觉操作部分写的不是很好，不够全面，所以便出现了此篇，算是填补前一篇的不足吧。</p>

<p>前边的操作前缀是Ctrl+b组合键，这两个键相隔甚远，操作起来太别扭，后来便在<code>~/.tmux.conf</code>配置文件中更改成<code>Ctrl+a</code>前缀了。具体配置见GitHub上<a href="https://github.com/xautjzd/dotvim">我的tmux配置</a>。</p>

<h3><strong>Tmux常用操作</strong></h3>

<h4>1. 新建Session</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$tmux new -s sessionname</span></code></pre></td></tr></table></div></figure>


<h4>2. 杀死指定Session</h4>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$tmux kill-session sessionname</span></code></pre></td></tr></table></div></figure>


<h4>3. 杀死所有Session</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$tmux kill-server</span></code></pre></td></tr></table></div></figure>


<h4>4. 列出创建的Sessions</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$tmux ls</span></code></pre></td></tr></table></div></figure>


<h4>5. 附加指定Session</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$tmux a -t sessionname</span></code></pre></td></tr></table></div></figure>


<h4>6. 离开Tmux到shell环境</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + d</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：其中prefix即为前边所提到配置好的Ctrl+a(tmux默认为ctrl+b),<code>&lt;prefix&gt; + d</code> 即为Ctrl+a+d三个键的组合。后面如无特别说明，也指这样的键组合。<code>离开tmux环境</code>指的是首先在shell下tmux new -s sessionname进入到tmux环境，然后<code>&lt;prefix&gt; + d</code> 切换到shell环境，在shell下又可以通过<code>tmux a -t sessionname</code>切换到tmux环境。</p>

<p>以下的操作都在tmux环境里面进行：</p>

<h4>7. 新建Window</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + c</span></code></pre></td></tr></table></div></figure>


<h4>8. 水平分屏</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + -</span></code></pre></td></tr></table></div></figure>


<p>默认为&#8221;,需要在~/.tmux.conf中配置</p>

<h4>9. 垂直分屏</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + |</span></code></pre></td></tr></table></div></figure>


<h4>10. 窗口重命名</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + , # 默认为%</span></code></pre></td></tr></table></div></figure>


<h4>11. 窗口切换</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + n  # n为窗口的编号，从0开始，编号可以在屏幕最下方看到</span></code></pre></td></tr></table></div></figure>


<h4>12. 同一窗口中pane之间的切换</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + 方向键</span></code></pre></td></tr></table></div></figure>


<h4>13. 关闭当前窗口中的所有panes</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + !</span></code></pre></td></tr></table></div></figure>


<h4>14. 显示时间</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + t</span></code></pre></td></tr></table></div></figure>


<h4>15. 关闭当前窗口</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + : </span></code></pre></td></tr></table></div></figure>


<p>
然后输入<code>kill-window</code>即可关闭。</p>

<h4>16. 查看帮助文档</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&lt;prefix&gt; + ?</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拆机过程中的一些收获]]></title>
    <link href="http://bebety.com/blog/2013/11/23/experience-share-about-computer-disassembly/"/>
    <updated>2013-11-23T10:58:00+08:00</updated>
    <id>http://bebety.com/blog/2013/11/23/experience-share-about-computer-disassembly</id>
    <content type="html"><![CDATA[<p>昨天吃完午饭后来到教研室，突然师妹说有个远程(其实只是充分利用教研室的旧机器，在上面发布一些教研室的web项目，还有做为版本控制器的服务器)机器现在不能远程了，尝试关机不得所以强关，然后重启便无法启动，而她的数据在上面。所以我便开始了肢解之路。</p>

<p>由于几乎没有拆台式机的经验，所以拆机过程花费时间比较长，尤其是机箱外盖的拆卸。毕竟是旧机器，没有什么拆机教程可供参考，所以只能摸索着前进了，最后还是使用了点暴力手段才卸下的。拆开后，首先看了下是不是由于接口松动导致无法开机(其实连我自己都不相信是接口松动导致，因为强关不可能导致接口松动吧，可能是为了自我安慰才想到是接口松动的缘故)，查看了一番，便很快排除这个原因。突然想强关的后果很可能就是导致硬盘坏掉，但是起码也应该进入BIOS吧。便猜想是不是电源坏掉导致的原因，老师刚好这时候也出来了，看到我在拆着机，便问我什么情况，我便跟老师一五一十地把情况汇报了一番。然后老师便去隔壁(其实是老师所在部门的办公室)找了一台不能用的机器，我拿过来之后卸下电源重新换上去，当然其中还有不少接线的问题还摸索了一阵,最后才发现电源存在的作用：</p>

<!-- more -->


<ol>
<li>给主板供电。虽然主板肯定要供电，但是所知也仅此而已，具体不知道是如何供电的，直到现在才有所真正明白其过程。</li>
<li>给CPU供电。这个是修理完查资料才发现的。由于CPU嵌在主板上，所以一直以为只要给主板供电便可，详情稍后再介绍。</li>
<li>给硬盘供电。</li>
<li>给光驱供电。</li>
</ol>


<p>换上电源后，尝试开机，发现终于可以进BIOS了，但是系统进不去，心想不是硬盘坏了吧，顿时心凉。索幸我手头有U盘做的Linux启动盘，便换上进入了Linux,最后发现可以识别出硬盘，还能看到硬盘里的资料。这时候便放心了，很可能只是系统坏了(如MBR写入有问题之类),便先把C盘里的重要资料拷贝了一份，然后重新装系统的节奏。拿着同学做的老毛桃进入了WinPE，然后加载XP的iso镜像，准备重装系统，发现WinPE不能加载iso(没用WinPE重装过系统，还真不知道能不能加载iso镜像进行系统重装，待会儿再查吧)。但同学说需要gho镜像才行，便趁他下gho之际，我便继续捣鼓着，换sata线、重新换线上其他接口什么的。然后试着再次启动系统，发现能进入，真的不能不说有点诡异，难道这是上帝在我和开玩笑么?接下来便开始了组装，当然组装之前把里面的灰尘给清除了一番，真一个脏字了得！尘飞扬，手如炭，满地灰。</p>

<p>结束后，便开始了查资料之路。因为在拆机过程中发现有不少接口都不认识，而且有些接口也没有接线，即使接线了，也有一些不知道作用。而我又喜欢刨根问底。首先查了下电源的作用，它主要是给硬盘、主板、CPU和光驱供电。</p>

<p>其中，针对IDE接口的硬盘和SATA接口的硬盘其供电的接口也有所不同。以上所说的IDE和SATA是指数据传输的接口。现在硬盘数据传输接口有IDE、SCCI、SATA、MSATA和PCI—E等。IDE口的硬盘现在市面上已经看不到了，以前的机器一般采用IDE，后来慢慢已经转向SATA,当然SATA有SATA1、SATA2和SATA3，外观没区别，只是传输速率有所不同，SATA1理论传输速率为1.5Gbit/s,而SATA2为3Gbit/s，SATA3则为6Gbit/s。SCSI网上资料显示用于工作站、服务器可能比较多点，当然估计也只是针对以前来说的，现在估计也被淘汰了。现在市面上主流还是SATA，而MSATA则主要用于超级本，毕竟超级本外观所限，再用2.5英寸的就不太合适了。PCI-E则是和显卡一样的接口的固态硬盘，至于它而SATA接口的对比没查资料，也不甚清楚。光驱接口也硬盘一致，感觉有点像孪生兄弟一样，同穿一条裤子。所以有些好事者便拆下光驱，再扩一个硬盘，将系统安装再SSD上，开机速度立马有质的提升。</p>

<p>而给主板充电的接口则主要是24pin的接口，通常为白色，兼容以前的20pin。其实多出的4pin主要是给PCI-E(现在有少数SSD也是采用此接口)显卡供电，如果显卡功耗不大，20pin也是没问题的。</p>

<p>CPU供电接口则有8pin和4pin,以前的可能采用4pin，而今可能都换成8pin了。</p>

<p>内存条接口是比较好识别的，主要有DDR2和DDR3,目前DDR3正在逐渐替代DDR2的主流地位。最好区别它们便是查看它们的防呆口。</p>

<p>最后，说下散热的机制吧。以前的散热一般都是通过金属支架和风扇来进行的。看过比较古董的机器内部构造的人可能都会发现里面有一个大金属疙瘩，而且还有很多槽，这便是金属支架了。金属支架有一面和CPU紧贴，并且表面涂有硅脂，硅质的主要作用是导热，而不是起散热功能，这点可能大家有误解(也许是我想多了，我以前听别人说硅脂是散热的，从此头脑中便将二者等价，真不知到底是受了谁的误导，坑了我好几年啊)。硅脂导热性比较好，将CPU表面产生的高温迅速传给金属支架，然后经由支架将热量散走，金属支架对应的风扇也是为了更快更好的散热而设计的。而现在的笔记本散热一般是通过散热管+风扇将热量排走。拆过笔记本的、看过别人拆笔记本的或是见过笔记本内部构造图的都会发现里面有个铜管，而且还比较长，那个就是散热管，里面是真空，存放有水。要知道，真空状态下水的沸点是比较低的(学过物理的应该都知道吧),所以贴近cpu的一端水很快变成水蒸汽，同时将热量带到另一端再冷却成水，再流回去，还有一个辅助铜管散热的风扇，将铜管的热量散发到空气中。</p>

<p>至于其他的一些接口，也就没必要介绍了，因为要么不常用，要么司空见惯。有兴趣，可以自行查资料。勿听一家之言，否则难免会被误导。</p>

<h2>参考资料</h2>

<p><a href="http://sbgl.jdzj.com/tech/201104/20110425123142_71032.html">http://sbgl.jdzj.com/tech/201104/20110425123142_71032.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[放慢脚步回首过去一个月]]></title>
    <link href="http://bebety.com/blog/2013/11/21/some-ideas/"/>
    <updated>2013-11-21T20:31:00+08:00</updated>
    <id>http://bebety.com/blog/2013/11/21/some-ideas</id>
    <content type="html"><![CDATA[<p>自上篇文章到现在差不多快一个月了，也因各种琐碎的事情没有闲下来构思一篇博文，顿时有一丝的罪恶感。吃完晚饭洗完澡坐在电脑前突然有种茫然的感觉，上了会儿高端大气的知乎浏览了几个帖子，本想着改下代码，结果发现也打不起精神，便趁此机会来码字来寻求心灵片刻的安宁吧。</p>

<p>首先，说说最近的劳动吧，虽然没啥成果。最近教研室事不多，刚好师姐有个同学需要找人帮忙改个项目，便答应帮忙(当然是有酬劳的，不然也不会闲到改.net的代码，虽然目前还没有谈具体的数字)。其实也不在乎都多少，答应干此活也只是为了积累经验而已，方便日后找工作，同时也算是练手。拿到代码后，我顿时有种欲哭无泪的感觉，代码逻辑及结构之混乱超乎我想象，可以总结为以下几点：</p>

<!-- more -->


<ul>
<li><p>结构混乱，虽然有分层，从下到上大致有DAL、BLL、WebService和Web这几层，然后还有一个Common，里面大致是定义一些通用的操作供DAL调用。但是后来发现代码的逻辑几乎都是在Web层直接进行的，询问得知此系统是在它们以前的OA系统基础上改的，所以保留着以前OA的那种分层结构，只是新开发时没有按照以前的那种分层走。</p></li>
<li><p>命名<strong>极其</strong>糟糕。之所以突出<em>极其</em>二字，是因为它的命名真的已经到了惨不忍睹的地步，有种想撞墙的感觉。我真的怀疑写代码的人知道常见的几种命名法则不，如驼峰命名法、下划线命名法、Pascal命名法和匈牙利命名法(在此提匈牙利命名法，不知道会不会遭人鄙视，之前看到网上已经有太多的人吐槽，连Linus大神也吐槽过)。我个人还是比较青睐于驼峰命名法和下划线命名法，看着很优雅。接着不得不吐槽变量的命名了，一会儿用英文命名，一会儿用对应的拼音，混在一起感觉有点奇葩感。我个人是不太喜欢用拼音，即使不了解，也会用工具将中文翻译成对应的英文再做命名，不知道这算不算强迫症。</p></li>
<li><p>代码逻辑凌乱。逻辑与逻辑间缺少空行分隔，所以有种目不忍视的感觉。还有比较重要的一点是代码重复性太高。比如说省市县三级下拉菜单，很多页面都会用到，但是每个页面都会重复性地写这些代码。如果有机会，我真的会问写此代码的人懂不懂什么叫DRY(Don&rsquo;t Repeat Yourself)，虽然此思想是学习Ruby过程种了解到的，但我觉得可以用于任何语言，放置四海而皆准。毕竟重复性的工作会导致代码的耦合性高，如果今后需要变动，那么每个引用此代码的地方都得做相应修改。</p></li>
<li><p>注释过少。尤其是功能性的注释太少，虽然通过阅读代码最终也能了解，但能不看内部实现便不看，毕竟看代码还是需要花费一定时间的，而且理解可能还会有偏差，所以还是很有必要对代码做相应的功能性注释，不仅方便他人，也方便自己。所以要了解一个人的编码水平，通过观其代码便能略之一二。</p></li>
<li><p>没有使用ORM。我个人也感觉这算是一个弊端，毕竟对于应用开发者来说，效率至上(指开发效率)。虽然直接写Sql语句可能效率更高，但是为此付出的开发时间成本则是不扉，在对性能要求不是很极端的情况下也就显得有些得不偿失。ORM(Object Relationship Mapping)不仅使开发更高效，而且代码也更易阅读，更易维护。反正我了解的应用开发一般都会用到ORM,如.net的EF(Entity Framework),Java的Hibernate、Mybatis等，Ruby的ActiveRecord等。其他语言也应该有相应的ORM,不过不了解，我了解的就是这三门语言，所以也便能说出一二。</p></li>
</ul>


<p>说了这么多弊端，不知道是不是由于我平时的开发一般都是MVC模式，所以对其他的开发模式看不习惯所致。不管怎样，还是得硬着头皮改完吧，既然承诺于人，便得有始有终，这也算是我一贯的办事风格吧。</p>

<p>其次，由于老师让看Hadoop,所以便时不时的看看云计算和Hadoop这块，算法还真不是我的强项，看到朴素贝叶斯和KNN算法，真的是看不下去，尤其用MapReduce实现。MapReduce程序真的是和一般的代码差别有点大，把握不住运行的脉络，一旦看不清脉络，便有种管中窥豹的感觉。身边也没有搞Hadoop的人，想找个人聊聊都困难。网上吧，提的问题太过白痴，也往往遭人鄙夷，从此便被无视。这算是如今最头疼的事了。</p>

<p>最后，说说加入Rubyists的情况吧。2012年，Oschina在西安举办OSC，作为开源的爱好者与拥护者便跑去参加了。正是这次机缘巧合接触了Ruby，接着便花了一些时间去了解Ruby和Rails。在RubyChina社区上又无意看到了一个关于西安Rubyists线下活动的召集贴，便报名参加了，从2013.7第一次参加到现在也差不多5个月了，也就是5次活动(每月一次),要说最大的收获应该就是眼界的拓宽，对IT行业有了一个更深的认识，对新技术也有了一点了解，如angularjs,远程工作的一些工具，同时也更加坚定了自己对Git/GitHub(以前一直都是一个人在使用，身边的同学还没发现使用Git，用了svn都算不错了)及Vim的使用。Vim以前也只是会一些基本操作，配置都是拷贝网上现成的，到现在的熟练运用，可以说也算是有质的飞跃了。虽然目前一直在Rubyists中一直处于索取的状态，不过相信迟早也会奉献的，可以讲讲Vim的操作、配置及常用插件等。</p>

<p>PS:刚在知乎上看到某人专栏上的一篇文章，觉得有部分写的不错，便搬过来吧，当然不是完全照搬，我会结合我自己切身的经历用自己的语言描述出来。大致如下：</p>

<p>由于我所学的专业为计算机，所以我对这一领域有找寻答案的能力，因此在碰到问题时能很快的定位答案，予以解决，真的可谓时见招拆招。如果换作非计算机专业的人来说，可能显得稍微吃力。当一个人想知道[门]背后有什么的时候，他需要的只是开启门的钥匙，而这个钥匙刚好在我手里，因为即使我也不知道门背后有什么，但我却能够将门打开，让大家看到这门背后到底是什么。而帮人解决问题的过程则让我了解门背后的东西，还收获了开启各种门的方法。</p>

<p>我以前老喜欢上网浏览信息，比如说CSDN、新浪微博、RubyChina等，但慢慢这种趋势有所下降。因为我感觉看的东西再多，慢慢也便淡忘，从上面所了解的知识再丰富、再专业，也不过是碎片化的，不会提供一个系统的知识，所以也便不可能形成完整的知识结构。没有一个完整的知识结构，知识储备便很难有质的突破。所以我也慢慢更多地转向了书本的学习，毕竟从书本上看的东西还是比较系统化。</p>

<p>最近在阅读的一本书是《高效程序员的45个习惯》，真心值得一读。身处碎片化的时代，能够静下心来读一本书真的很不容易。希望接下来的日子里能将看微博、豆瓣等时间更多的分给读书。不知不觉已经10点多了，就这样断断续续的竟写了三个小时，到此结束吧，也算是最自己近一个月来的总结。不认识过去，便看不清未来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim寄存器]]></title>
    <link href="http://bebety.com/blog/2013/10/27/vim-registers/"/>
    <updated>2013-10-27T16:37:00+08:00</updated>
    <id>http://bebety.com/blog/2013/10/27/vim-registers</id>
    <content type="html"><![CDATA[<p>谈Vim寄存器前先对昨天做个总结吧。Rails Girls昨天在西安的ThoughtWorks成功举办，目的是帮女性程序员了解Ruby &amp; Rails，报名参加的学员大概有30多人，教练大致有10来个，由于活动是ThoughtWorks和西安的Rubyists一起合作举办，所以我作为西安Rubyists的一员报名当了教练(由于教练奇缺，而我们Rubyist成员大多都去北京参加RubyConf了，所以我作为Rubyists里面的菜鸟报名当教练了，去了发现除我外，其他教练都是TW员工,顿时汗颜)。</p>

<!-- more -->


<p>每个教练指导2-3个学员，人员的分配通过软件随机组合，没想到竟然给我分了3个！不过幸好有指导教程，指导起来便没有无从下手的感觉，由于报名的学员几乎都没接触过Rails,所以指导难度不是很大，大概从环境的配置到一个简单的web应用生成方面进行了指导，然后加上TW准备的几个Session演讲，一天也就过去了，临近结束，没想到竟然碰到同一个县城的老乡，真的太意外了。临走前还一起吃了个饭，聊了估计有差不多一个小时，然后匆忙的坐车回学校了，到学校门口天早已漆黑一片，感觉特别累，到教研室待到差不多11：00便回宿舍睡觉了。有时候真的在想，要是上班了那不得累趴下！这还什么事都没干就这么累。</p>

<p>不知不觉码字码了这么多，但感觉毫无重点，还是进入正题吧，不然就感觉文不对题了。</p>

<p>Vim的寄存器类型请通过<code>:help registers</code>查看，下面只介绍两种：</p>

<ol>
<li>数字寄存器</li>
<li>字母寄存器</li>
</ol>


<h2>1. 数字寄存器</h2>

<p>数字寄存器大致有10种，编号从0-9，并且都以<code>"</code>开头，通过<code>:reg</code>便可查看。其中<code>"0</code>保存上次<strong>复制(y)</strong>操作的文本，而<code>"1——"9</code>寄存器则保存最近9次<strong>删除</strong>的文本<strong>行</strong>,<code>"1</code>保存的是最近一次删除的内容，如果又有新的操作，则将1保存到2中，然后1保存最新内容。</p>

<h2>2. 字母寄存器</h2>

<p>字母寄存器从a-z或者A-Z,其中指定a-z会替换掉他们先前存储的内容，而A-Z则会在它们先前保存的内容中追加新内容。</p>

<p>一般paste可能都通过来操作，这仅粘贴0或1寄存器中的内容,要想粘贴内容其他寄存器的内容，则需通过<code>寄存器的名称+p</code>来操作。如将内容保存到a寄存器中，则可在normal模式下输入<code>"ayy</code>，将光标当前行内容存储在a寄存器中，粘贴便可通过<code>"ap</code>来操作。</p>

<p>寄存器可能平时用不上，一般在需要录制宏的时候才会用到。想要更深入的了解，还是<code>:help registers</code>看帮助文档吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop集群]]></title>
    <link href="http://bebety.com/blog/2013/10/22/hadoop-cluster-1/"/>
    <updated>2013-10-22T20:51:00+08:00</updated>
    <id>http://bebety.com/blog/2013/10/22/hadoop-cluster-1</id>
    <content type="html"><![CDATA[<p>最近开始研究起Hadoop,《Hadoop in Action》大概看了3章，然后开始着手搭建环境。</p>

<p>由于设备的受限，让老师给分了两台虚拟机（4G内存，20G硬盘，CentOS6.4），在上面开始搭建Hadoop集群，其中一台作为master,另一台作为slave。环境的搭建大概花了一天多的时间，主要有JDK的配置和SSH的配置，这两项已经是轻车熟路，所以很快便配置好。但是Hadoop才刚接触，所以配置起来速度慢点，没有一个绝对的参考资料，网上资料虽颇丰，但甄别对与错却需要一定时间，并且还要弄懂配置参数的意义。前后大致花了有半天时间。配置好后启动服务时却出错，google搜索了好久，也试过很多方法，但一直没解决。</p>

<!-- more -->


<p>问题主要出现在权限这块，因为采用root启动服务没问题，但是一般用户启动便提示创建<code>/var/logs/user</code>出错，权限不够，而我的logs目录已经在<code>conf/hadoop-env.sh</code>中设置为hadoop解压目录下的logs目录。最后实在没辙，便尝试重新配置。大致步骤也是按前边的进行，但是没想到最后竟然成功，真的太让人意外！通过jps能够看到master的namnode,jobtracker等的进程号，同时也能在slave上看到datanode,tasktracker的进程号。</p>

<p>安装好后，当然得找个实例测试下，hadoop的解压目录下自带有example，其中有个wordcount,便拿来测试了。</p>

<h3>创建本地测试文件</h3>

<pre><code>$mkdir ~/file
$cd ~/file
$echo "Hello World" &gt;&gt; ~/file1.txt
$echo "Hello Hadoop" &gt;&gt; ~/file2.txt
</code></pre>

<h3>在HDFS上创建Input目录</h3>

<pre><code>$hadoop fs -mkdir input
$hadoop fs -ls
</code></pre>

<h3>导入本地测试文件到HDFS中的input目录</h3>

<pre><code>$hadoop fs -put ~/file/file*.txt input
$hadoop fs -ls input
</code></pre>

<h3>运行wordcount程序</h3>

<p>以input为输入目录，output为输出目录</p>

<pre><code>$hadoop jar ~/hadoop-1.2.1/hadoop-examples-1.2.1.jar wordcount input output
</code></pre>

<h3>查看结果</h3>

<p>运行的结果会保存在output下的part-r-00000文件中，查看方法如下：</p>

<pre><code>$hadoop fs -cat output/part-r-00000
</code></pre>

<h3>后话</h3>

<p>近两天在看龙应台女士的《亲爱的安德烈》一书，全书以书信的方式来展开，通过她与儿子安德烈的对话，了解了香港、台湾及德国的一种生活方式，尤其是香港人民2005年的游行，不禁让我想到了中国的现状，顿时有种压抑的感觉，感觉中国人民一直在努力的奋斗，无非就是为了一份安宁的生活。但感觉就是这么一份安宁，却让太多的人为之奋斗一生而不得或千辛万苦才得，突然觉得这样的人生还有意义么？我目前期望的仅是今后能生活在技术圈中，而且不用再被生活所奴役，不愿再面对一群不懂技术而趾高气扬的人，已经听到身边不少人羡慕国企、银行、研究所等铁饭碗的单位，但我却丝毫没有兴趣，因为在我印象中，那些单位大多给人一种散漫感，其中充满了太多的勾心斗角，尔虞我诈，而我本身却非常厌恶这些，真的可以说让人作呕。呆在这样的环境工作一生，想想都觉得枯燥无味。希望明年能找到一份理想的工作，干自己喜欢的技术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putty SSH中文乱码]]></title>
    <link href="http://bebety.com/blog/2013/10/18/ssh-messy-code/"/>
    <updated>2013-10-18T10:59:00+08:00</updated>
    <id>http://bebety.com/blog/2013/10/18/ssh-messy-code</id>
    <content type="html"><![CDATA[<p>由于Fedora安装在教研室的台式机上，小组的活动在科协，每次去又免不了使用Linux环境，所以<strong>Putty</strong>便派上用场了。Putty作为Windows下的SSH工具，确实很方便，解决了很多不必要的麻烦，但是发现在使用的时候，中文显示乱码。求救Google的时候到了，网上一搜，真的是一大堆，随便查看了一篇博客，照着试了一下便解决。方法如下：</p>

<blockquote><p>windows->Appearance->Translation,在其中将字体改为UTF-8便没问题。</p></blockquote>

<p>问题确实能解决，但是发现不能保存设置，每次打开Putty时都需要重新设置，这点有待改进,不知道是我安装的putty版本过低还是其他的缘故。在分享中成长，在成长中分享，大胆的分享吧，Don&rsquo;t be shy!</p>
]]></content>
  </entry>
  
</feed>
