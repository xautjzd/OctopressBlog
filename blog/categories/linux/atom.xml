<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | xautjzd]]></title>
  <link href="http://xautjzd.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://xautjzd.github.io/"/>
  <updated>2013-10-10T16:31:57+08:00</updated>
  <id>http://xautjzd.github.io/</id>
  <author>
    <name><![CDATA[xautjzd]]></name>
    <email><![CDATA[xautjzd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux硬链接与软链接]]></title>
    <link href="http://xautjzd.github.io/blog/2013/10/10/linux-hard-link-vs-soft-link/"/>
    <updated>2013-10-10T09:42:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/10/10/linux-hard-link-vs-soft-link</id>
    <content type="html"><![CDATA[<p>链接的概念其实不仅限在Linux中，在类Unix和Windows中也存在，只是网上资料大多都讨论的是类Unix的链接。下面主要对所了解的类Unix下的链接谈谈自己的认识。</p>

<h3>链接存在的目的</h3>

<p>链接的出现主要是为了解决系统中文件的共享，同时有其他附加的好处：隐藏真实文件路径、增加权限安全及节省存储。简单的举例说明：</p>

<p>Linux中有7种run level(0-6),其中0代表关机，1代表单用户模式(用于系统维护，禁止远程登陆),2代表多用户状态(不支持NFS)，3代表完全的多用户模式，4系统保留(未使用),5代表X11模式(GUI模式)，6则代表重启。</p>

<p>这7种模式分别对应/etc/rc.d/rcN.d目录(N指0-6之间的数字)，存储的是每种启动模式下要启动的程序，但实际的程序其实存储在/etc/rc.d/init.d目录中，/etc/rc.d/rcN.d中都是链接而已，链接到/etc/rc.d/init.d目录中对应的程序(这样做的目的是为了管理上的方便，试想一下，如果有多个runlevel包含同一个程序，需要对这个程序的启动脚本进行修改时，只需更改/etc/rc.d/init.d中的实际文件，而不需要改动/etc/rc.d/rcN.d)。</p>

<h3>链接的分类</h3>

<p>链接分为两种：硬链接(hard link)与阮链接(soft link)。谈链接就不得不谈inode，所以先简单地介绍下inode。</p>

<!-- more -->


<p><strong>inode</strong></p>

<p>类unix中，文件被分为两部分：用户数据(user data)和元数据(metadata)。用户数据，即文件数据块(data block),数据块是记录文件真实内容的地方，而元数据则是记录文件的附加属性，如文件大小、创建时间、所有者等信息。而inode则负责存储这些元数据，inode确切的说是一个数据结构，包含了文件的所有信息(文件名除外)。inode包含的详细信息为：</p>

<ul>
<li>Inode number</li>
<li>Access Control List(ACL)</li>
<li>Extended attribute</li>
<li>Direct/indirect disk blocks</li>
<li>Number of blocks</li>
<li>File access, change and modification time</li>
<li>File deletion time</li>
<li>File generation number</li>
<li>File size</li>
<li>File type</li>
<li>Group</li>
<li>Number of links</li>
<li>Owner</li>
<li>Permissions</li>
<li>Status flags</li>
</ul>


<p>通过<code>ls -i</code>或者<code>stat filename</code>可查询文件对应的inode信息</p>

<p>文件新建时，内核会分配一个inode,每个文件的inode号唯一，可以简单地将其理解成指针，指向对应文件的具体的存储位置。访问文件时，inode会被复制到内存，然后根据inode将对应的文件复制到内存。</p>

<p><strong>硬链接</strong></p>

<p><img src="http://pic.yupoo.com/xautjzd/DdZo1Za8/medish.jpg" alt="" /></p>

<p>如图，硬链接其实就是在现有文件上添加了一个别名，他们有共同的inode,但硬链接有以下不足：</p>

<ol>
<li>不能跨文件系统(inode号仅在同一文件系统下唯一，当挂载多个文件系统后，便可能会出现inode号重复的现象，所以不能跨文件系统)</li>
<li>只能针对文件创建硬链接，不能对目录创建</li>
</ol>


<p>每个inode都有一个链接计数器,默认文件的inode计数器值为1,每当创建一个硬链接，计数器值便加1，而删除文件时，其实是计数器值减1，只有当计数器为0时，文件才从物理磁盘上删除。</p>

<p>下面看一个实例：</p>

<pre><code>265092 -rw-rw-r--   2 fedora fedora         0 Oct 10 14:16 test
265092 -rw-rw-r--   2 fedora fedora         0 Oct 10 14:16 testdl
265164 lrwxrwxrwx   1 fedora fedora         4 Oct 10 14:18 testsl -&gt; test
</code></pre>

<p>其中test为新建的测试文件，testdl是在test上建立的硬链接，testsl是在test之上的软链接。可以发现test与testdl的inode号相同，而test与testsl的inode号则不同，在创建了硬链接之后，test与testdl的计数器变成2了。</p>

<p><strong>软链接</strong></p>

<p>软链接(也称符号链接 symbol link)刚好弥补了硬链接的不足，不存在文件系统的限制，同时也可以创建指向目录的符号链接。所以现在广泛使用的一般是软链接，它具有更强的灵活性。但它同时也具有硬链接没有的缺点，那就是：</p>

<ol>
<li>软链接包含原有文件的路径信息，一旦原文件移到其他路径下，再访问软链接，便找不到了，硬链接则无影响。</li>
<li>系统会为软链接分配额外的空间用于建立新的inode并保存原文件的路径</li>
</ol>


<h3>软链接与硬链接的区别</h3>

<ol>
<li>硬链接与原文件inode号相同，表明他们是同一个文件；而软链接与原文件inode号不同，说明他们是两个不同的文件。(上图便可看出)</li>
<li>文件属性上软链接明确标明了是链接文件，而硬链接则没有，因为在本质上硬链接与原文件是完全平等的关系。</li>
<li>链接计数器不同，软链接的计数器不会增加。</li>
<li>文件大小不同，硬链接文件显示的大小与原文件相同，而软链接则显示的大小与原文件不同。</li>
</ol>


<h3>参考文档</h3>

<ol>
<li><a href="http://www.cnblogs.com/ovliverlin/archive/2008/10/28/1321521.html">http://www.cnblogs.com/ovliverlin/archive/2008/10/28/1321521.html</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/">http://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下锐捷客户端上网]]></title>
    <link href="http://xautjzd.github.io/blog/2013/10/09/surf-internet-under-linux-about-ruijie/"/>
    <updated>2013-10-09T17:17:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/10/09/surf-internet-under-linux-about-ruijie</id>
    <content type="html"><![CDATA[<p>自己虽然一直用的校园网，但是由于教研室这块位置比较特殊，不需要使用锐捷客户端认证，但其他地方一般都需要。所以今早有个朋友在笔记本上安装了Ubuntu，但是无法通过锐捷web方式认证，下载的锐捷Linux版客户端安装后也无法上网，所以这方面我也不熟悉，只能求助Google了。由于众多高校的网络都是使用锐捷的这一套，所以大同小异，这方面的资料也不少，Google搜索很快便找到了解决方法，用华科的一个客户端即可，下载地址：<a href="http://code.google.com/p/mentohust/">http://code.google.com/p/mentohust/</a></p>

<p>下载后，切换到下载的目录，然后运行<code>sudo dpkg -i 'your deb packagename'</code>即可，安装过程中，一步一步按照其步骤输入相应信息即可。安装完成后，会将配置的信息存储在<code>/etc/mentohust.conf</code>文件中，也可进行修改。在安装的过程中，如果采用DHCP方式，在选择时应该注意，选择1或者2，千万别选择3，否则上不了网。各选项的含义是：</p>

<p>-d DHCP方式：0（不使用） 1（二次认证）2（认证后）3（认证前）</p>

<p>关于mentohust的详细参数解释，请参考<a href="http://code.google.com/p/mentohust/wiki/Parameter">官网wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora下使用sudo]]></title>
    <link href="http://xautjzd.github.io/blog/2013/10/08/use-sudo-in-fedora/"/>
    <updated>2013-10-08T15:11:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/10/08/use-sudo-in-fedora</id>
    <content type="html"><![CDATA[<p>Linux下日常操作使用一般用户权限即可，但是往往有一些操作需要用到root权限，如服务的启动、软件的安装等，直接转到root下进行操作可不是一个好习惯，比较稳妥的方式就是使用sudo进行操作。首先检查系统是否已经安装<code>sudo</code>,接下来需要在<code>/etc/sudoers</code>文件下进行配置相应的权限。</p>

<p>在<code>root    ALL=(ALL)   ALL</code>这行下面添加<code>username ALL=(ALL) NOPASSWD:ALL</code>即可。其中<code>username</code>为要使用sudo的用户，并且每次使用sudo时不需要输入root密码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机启动过程]]></title>
    <link href="http://xautjzd.github.io/blog/2013/09/26/boot-process/"/>
    <updated>2013-09-26T18:48:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/09/26/boot-process</id>
    <content type="html"><![CDATA[<p>计算机启动过程的详细介绍请参考阮一峰老师的两篇博文：</p>

<ol>
<li><a href="http://www.ruanyifeng.com/blog/2013/02/booting.html">http://www.ruanyifeng.com/blog/2013/02/booting.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html">http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html</a></li>
</ol>


<p>写的非常通俗易懂，真的很佩服阮老师的文笔，有时候自己写的博客自己都有点目不忍视，更何况别人呢。要达到这样的水平真的还有好长的路要走。加油吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim常用快捷键总结]]></title>
    <link href="http://xautjzd.github.io/blog/2013/09/18/vim-shortcut-maps/"/>
    <updated>2013-09-18T19:55:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/09/18/vim-shortcut-maps</id>
    <content type="html"><![CDATA[<p>Vim的学习之路真的很长，永远有记不完的命令，永远会突然冒出一个新插件。不过我总算从Vim的荆棘中一路走过来了，现在真的是苦尽甘来，时刻体会它带给我的喜悦和惊奇。下面对我所学习所了解到的常用命令做一个基本总结：</p>

<h3>Normal mode:</h3>

<p><code>&gt;&gt;</code> indent current line</p>

<p><code>n&gt;&gt;</code> indent the next n line</p>

<p><code>.</code> repeat last command</p>

<p><code>m,n&gt;&gt;</code> indent from m to n line</p>

<p><code>==</code> autoindent current line</p>

<p><code>n==</code> autoindent the next n line</p>

<p><code>gg=G</code> autoindent the whole file</p>

<!--more-->


<p><code>=i{</code> reindents &lsquo;inner block&rsquo;(inside the braces)</p>

<p><code>=a{</code> reindents &ldquo;around block&rdquo;(including the braces)</p>

<p><code>=2a{</code> reindents 2 blocks(this block and containing block)</p>

<p>instead of &ldquo;{&rdquo;, also can use &ldquo;}&rdquo; or &ldquo;B&rdquo;.<code>=aB</code> equals <code>=a{</code></p>

<p><code>&gt;i{</code> increase indent for inner block</p>

<p><code>&lt;i}</code> decrease indent for inner block</p>

<p><code>&gt;a{</code> increase indent for around block(including the brace)</p>

<p><code>&lt;a}</code> decrease indent for around block</p>

<p>With the cursor on <code>{</code> or <code>}</code></p>

<p><code>=%</code> autoindent the block(including matching brace)</p>

<p><code>&lt;%</code> or <code>&gt;%</code> indents or unindents the block</p>

<h3>Insert mode:</h3>

<p><code>&lt;c+t&gt;</code> indent the current line</p>

<p><code>&lt;c+d&gt;</code> reindent the current line</p>

<h3>Surroud plugin</h3>

<p>以下是一些surround插件的功能：</p>

<pre><code>{
    xxx
    xxx
}
</code></pre>

<p>normal模式下输入：dS{,结果变为:</p>

<pre><code>xxx
xxx

"hello world"
</code></pre>

<p>cS"&lsquo;之后，结果变为：</p>

<pre><code>'hello world'

&lt;div&gt;hello&lt;/div&gt;
</code></pre>

<p>通过cSt然后输入<code>&lt;p&gt;</code>,结果变为：</p>

<pre><code>&lt;p&gt;hello&lt;/p&gt;
</code></pre>

<p>当然也可以选进入visual模式，然后S"，便给选中的文本包含"&ldquo;。</p>

<p>以上命令主要是关于缩进和对齐的一个总结，关于surround插件做的总结也只是将所学列出，学过之后才感觉几乎毫无用处，所以不学也罢。其他的一些常用功能抽空再做总结。</p>
]]></content>
  </entry>
  
</feed>
