<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Xautjzd]]></title>
  <link href="http://bebety.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://bebety.com/"/>
  <updated>2014-05-21T11:02:17+08:00</updated>
  <id>http://bebety.com/</id>
  <author>
    <name><![CDATA[xautjzd]]></name>
    <email><![CDATA[xautjzd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git远程分支的一些操作]]></title>
    <link href="http://bebety.com/blog/2014/04/01/some-operation-on-git-branch/"/>
    <updated>2014-04-01T08:52:00+08:00</updated>
    <id>http://bebety.com/blog/2014/04/01/some-operation-on-git-branch</id>
    <content type="html"><![CDATA[<p><img src="/images/20140401.jpg"></p>

<p>我是个爱折腾的人，昨天晚上突然看着自己的博客主题不爽，便立马将其从原先的Greyshade换到现在的Cleanpress。换完并构思一篇新博客之后，再次提交到GitHub上，得到提示此分支滞后于GitHub上，采用<code>git pull</code>又产生了太多冲突，冲突少手动解决还可，太多更改起来太麻烦，便萌生推掉远程分支重新提交的念头。可之前从未对远程分支做过相关的操作，只是偶尔删除远程库上的单个文件而已，又不得不求助Google了。碰到问题在解决过程中总是会学到很多，并且记忆深刻，现予以记录，方便自己，也回馈社会。</p>

<p>删除之前先查看远程分支，在确定的情况下再作删除，以致不会删错。</p>

<h2>查看远程分支</h2>

<p>采用<code>git branch -a</code>可查看所有的分支(本地+远程),而<code>git branch -r</code>仅显示远程。如果打开颜色支持，还会看到远程分支的颜色与本地不同。</p>

<!-- more -->


<p>```
$git branch -a
* newtheme
  source
  remotes/origin/HEAD &ndash;> origin/master
  remotes/origin/newtheme
  remotes/origin/source</p>

<p>```</p>

<h2>删除远程分支</h2>

<p><code>
$git push origin --delete &lt;branchname&gt;
</code>
删除tag也是同样的操作：</p>

<p><code>
$git push origin --delete &lt;tagname&gt;
</code></p>

<p>由于我删除的是远程库的默认分支master,所以在删除过程中产生了以下错误：</p>

<p>```
remote: error: refusing to delete the current branch: refs/heads/master
To git@github.com:xautjzd/xautjzd.github.com.git
 ! [remote rejected] master (deletion of the current branch prohibited)</p>

<pre><code>error: failed to push some refs to 'git@github.com:xautjzd/xautjzd.github.com.git'
</code></pre>

<p>```</p>

<p>这时只要进入该项目的settings，将default branch改为其他分支便可进行删除工作。</p>

<h2>重命名远程分支</h2>

<p>将本地分支推送到一个不存在的远程分支上便可新建远程分支，推送过后发现名称不对，便可通过下面的命令来修改名称：</p>

<p><code>
$git branch -m oldname newname
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言中的Segment fault问题]]></title>
    <link href="http://bebety.com/blog/2014/03/15/segment-fault-core-dumped-of-c/"/>
    <updated>2014-03-15T20:47:00+08:00</updated>
    <id>http://bebety.com/blog/2014/03/15/segment-fault-core-dumped-of-c</id>
    <content type="html"><![CDATA[<p><img src="/images/20140315.jpg"></p>

<h2>什么是Segment fault?</h2>

<blockquote><p> a segmentation fault (often shortened to segfault) or access violation is a fault raised by hardware with memory protection, notifying an operating system (OS) about a memory access violation; on x86 computers this is a form of general protection fault.</p></blockquote>

<p>以上为<a href="http://en.wikipedia.org/wiki/Segmentation_fault">Wikipedia</a>对段错误的解释。用通俗易懂的话来说就是访问越界，访问了不存在或者受操作系统保护的内存，通常都是由于数组越界或者指针引起。</p>

<h2>产生段错误的原因</h2>

<ol>
<li>dereferencing NULL</li>
<li>dereferencing an uninitialized pointer</li>
<li>deferencing a pointer that has been freed/out of scope</li>
<li>writing off the end of an array</li>
<li>recursive function that uses all of the stack space</li>
</ol>


<!-- more -->


<h2>什么是core文件？</h2>

<p>在调试段错误前，不得不提到core文件。那么什么是core文件呢?core文件其实就是当程序崩溃时保存的该进程在内存中的映像(同时包含调试信息),主要用于调试。</p>

<h2>如何调试？</h2>

<p>像VS等IDE集成度太高，在方便快捷的同时也会将人培养成傻瓜，培养成码农。所以要想抱着以学习的心态来学习，最好转到Linux/Mac OS平台下，通过gcc/cmake等command-line式的编译器来进行代码的编译，当然我这里主要指的是c/c++。</p>

<p>Linux段错误时默认不会生成core file，core file的大小被设置为0,可通过<code>ulimit -a</code>查看。所以首先得通过<code>$ulimit -c unlimited</code>进行设置，以便能够生成core file。但在shell里设置的话，只是针对当前会话有效，如果想永久生效，需要将其写到配置文件中，如~/.bashrc, /etc/profile/, /etc/security/limits.conf等中。</p>

<p>设置完成后，便可通过gdb和gcc来调试程序了。如果一个程序存在段错误问题，那么执行<code>$gcc filename.c -g -o filename</code>进行编译后，在运行<code>filename</code>的时候，会在当前的目录下产生一个core文件。那么这个时候便可以利用core文件进行调试了。调试方法为:</p>

<pre><code>$gdb [exec file] [core file]
</code></pre>

<p>有关gdb的详细用法，请参考相关文档去吧。</p>

<p>段错误实质上是操作系统内核产生的一种中断信号，信号为12。有关信号的知识，请参考操作系统相关的书籍。可通过<code>kill -s SIGSEGV processid</code>来给指定的进程id发送段错误信号，段错误默认处理方法是终止程序的运行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim插件之surround.vim]]></title>
    <link href="http://bebety.com/blog/2014/01/16/vim-plugin-surround-dot-vim/"/>
    <updated>2014-01-16T10:17:00+08:00</updated>
    <id>http://bebety.com/blog/2014/01/16/vim-plugin-surround-dot-vim</id>
    <content type="html"><![CDATA[<h3>Surround.vim插件简介</h3>

<p><a href="https://github.com/tpope/vim-surround">Surround.vim</a> 是一款关于括号、引号和xml标签匹配的插件，可以成对的添加、修改和删除。当然也可以自定义匹配项。下面就常用的功能分别对标记的添加、修改和删除一一介绍。</p>

<h4>添加</h4>

<p>如现有一文本<code>Hello,wolrd</code>。光标处在文本中，然后输入ysiw",文本变成：</p>

<p><code>
"Hello,world"
</code></p>

<p><code>yss</code>则将光标所在的当前行全部添加标签。如<code>yss)</code>则将当前行用()包围。</p>

<!-- more -->


<p>b, B, r和a分别是), }, ]和>的别名，t 则代表html/xml标签。</p>

<p><code>ysst</code>,然后再输入html/xml标签，即可成对添加。如</p>

<p><code>
Hello,world
</code></p>

<p>输入<code>ysst&lt;p&gt;</code>后，变为：</p>

<p>```</p>

<p>Hello,World</p>


<p>```</p>

<p>类似的，<code>yssb</code>、<code>yssB</code>、<code>yssr</code>和<code>yssa</code>则给当前行添加相应的标记。</p>

<p><code>&lt;Ctrl-v&gt;ySb</code>则给选定的文本添加()。</p>

<h4>修改</h4>

<p><code>cs</code>为修改的命令。如：<code>cs)}</code>将()换为{}，<code>csbr</code>将()换为[]。</p>

<h4>删除</h4>

<p><code>ds</code>为删除的命令。如：<code>dsb</code>删除(),<code>dsB</code>删除{},<code>dst</code>则删除相应的html/xml标签。</p>

<h3>安装</h3>

<p>先安装上<a href="https://github.com/gmarik/vundle">vundle</a>或者<a href="https://github.com/tpope/vim-pathogen">pathogen</a>插件，然后再通过他们安装插件比较方便。下面以vundle举例：</p>

<p>在<a href="https://github.com/xautjzd/dotvim">~/.vimrc</a>中添加：</p>

<p>Bundle &lsquo;tpope/vim-surround&rsquo;</p>

<p>然后执行<code>BundleInstall</code>安装。</p>

<p>更多关于surround的细节，请通过<code>：help surround</code>查看。</p>

<h3>其他</h3>

<p>其实surround只是对vim中<a href="http://vimdoc.sourceforge.net/htmldoc/motion.html">text-object motion</a>的扩展，vim常见的text-object编辑功能有：</p>

<p>```
ci(, ci[, ci{：删除(),[],{}之间的所有字符并进入insert模式。类似的还有ci",ci'。
cit: 删除html/xml标签内所有的文本并进入insert模式。
di: 剪切配对符号间的文本，eg:di(, di{, &hellip;
yi: 复制配对符号间的文本, eg:yi(, yi{, &hellip;</p>

<p>ca, da, ya与ci, di, yi类似，只是包括比配符号本身。
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux常用操作总结]]></title>
    <link href="http://bebety.com/blog/2013/12/04/sumary-about-tmux-operation/"/>
    <updated>2013-12-04T19:32:00+08:00</updated>
    <id>http://bebety.com/blog/2013/12/04/sumary-about-tmux-operation</id>
    <content type="html"><![CDATA[<p>以前也写过一篇关于<a href="http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration/">tmux的文章</a>,大概对tmux从简介、安装到操作已有简单的介绍，但由于是刚使用tmux时所写，总感觉操作部分写的不是很好，不够全面，所以便出现了此篇，算是填补前一篇的不足吧。</p>

<p>前边的操作前缀是Ctrl+b组合键，这两个键相隔甚远，操作起来太别扭，后来便在<code>~/.tmux.conf</code>配置文件中更改成<code>Ctrl+a</code>前缀了。具体配置见GitHub上<a href="https://github.com/xautjzd/dotvim">我的tmux配置</a>。</p>

<h3><strong>Tmux常用操作</strong></h3>

<h4>1. 新建Session</h4>

<p><code>
$tmux new -s sessionname
</code></p>

<h4>2. 杀死指定Session</h4>

<!-- more -->


<p><code>
$tmux kill-session sessionname
</code></p>

<h4>3. 杀死所有Session</h4>

<p><code>
$tmux kill-server
</code></p>

<h4>4. 列出创建的Sessions</h4>

<p><code>
$tmux ls
</code></p>

<h4>5. 附加指定Session</h4>

<p><code>
$tmux a -t sessionname
</code></p>

<h4>6. 离开Tmux到shell环境</h4>

<p><code>
$&lt;prefix&gt; + d
</code></p>

<p><strong>注</strong>：其中prefix即为前边所提到配置好的Ctrl+a(tmux默认为ctrl+b),<code>&lt;prefix&gt; + d</code> 即为Ctrl+a+d三个键的组合。后面如无特别说明，也指这样的键组合。<code>离开tmux环境</code>指的是首先在shell下tmux new -s sessionname进入到tmux环境，然后<code>&lt;prefix&gt; + d</code> 切换到shell环境，在shell下又可以通过<code>tmux a -t sessionname</code>切换到tmux环境。</p>

<p>以下的操作都在tmux环境里面进行：</p>

<h4>7. 新建Window</h4>

<p><code>
$&lt;prefix&gt; + c
</code></p>

<h4>8. 水平分屏</h4>

<p><code>
$&lt;prefix&gt; + -
</code>
默认为",需要在~/.tmux.conf中配置</p>

<h4>9. 垂直分屏</h4>

<p><code>
$&lt;prefix&gt; + |
</code></p>

<h4>10. 窗口重命名</h4>

<p><code>
$&lt;prefix&gt; + , # 默认为%
</code></p>

<h4>11. 窗口切换</h4>

<p><code>
$&lt;prefix&gt; + n  # n为窗口的编号，从0开始，编号可以在屏幕最下方看到
</code></p>

<h4>12. 同一窗口中pane之间的切换</h4>

<p><code>
$&lt;prefix&gt; + 方向键
</code></p>

<h4>13. 关闭当前窗口中的所有panes</h4>

<p><code>
$&lt;prefix&gt; + !
</code></p>

<h4>14. 显示时间</h4>

<p><code>
$&lt;prefix&gt; + t
</code></p>

<h4>15. 关闭当前窗口</h4>

<p><code>
$&lt;prefix&gt; + :
</code>
然后输入<code>kill-window</code>即可关闭。</p>

<h4>16. 查看帮助文档</h4>

<p><code>
$&lt;prefix&gt; + ?
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim寄存器]]></title>
    <link href="http://bebety.com/blog/2013/10/27/vim-registers/"/>
    <updated>2013-10-27T16:37:00+08:00</updated>
    <id>http://bebety.com/blog/2013/10/27/vim-registers</id>
    <content type="html"><![CDATA[<p>谈Vim寄存器前先对昨天做个总结吧。Rails Girls昨天在西安的ThoughtWorks成功举办，目的是帮女性程序员了解Ruby &amp; Rails，报名参加的学员大概有30多人，教练大致有10来个，由于活动是ThoughtWorks和西安的Rubyists一起合作举办，所以我作为西安Rubyists的一员报名当了教练(由于教练奇缺，而我们Rubyist成员大多都去北京参加RubyConf了，所以我作为Rubyists里面的菜鸟报名当教练了，去了发现除我外，其他教练都是TW员工,顿时汗颜)。</p>

<!-- more -->


<p>每个教练指导2-3个学员，人员的分配通过软件随机组合，没想到竟然给我分了3个！不过幸好有指导教程，指导起来便没有无从下手的感觉，由于报名的学员几乎都没接触过Rails,所以指导难度不是很大，大概从环境的配置到一个简单的web应用生成方面进行了指导，然后加上TW准备的几个Session演讲，一天也就过去了，临近结束，没想到竟然碰到同一个县城的老乡，真的太意外了。临走前还一起吃了个饭，聊了估计有差不多一个小时，然后匆忙的坐车回学校了，到学校门口天早已漆黑一片，感觉特别累，到教研室待到差不多11：00便回宿舍睡觉了。有时候真的在想，要是上班了那不得累趴下！这还什么事都没干就这么累。</p>

<p>不知不觉码字码了这么多，但感觉毫无重点，还是进入正题吧，不然就感觉文不对题了。</p>

<p>Vim的寄存器类型请通过<code>:help registers</code>查看，下面只介绍两种：</p>

<ol>
<li>数字寄存器</li>
<li>字母寄存器</li>
</ol>


<h2>1. 数字寄存器</h2>

<p>数字寄存器大致有10种，编号从0-9，并且都以<code>"</code>开头，通过<code>:reg</code>便可查看。其中<code>"0</code>保存上次<strong>复制(y)</strong>操作的文本，而<code>"1——"9</code>寄存器则保存最近9次<strong>删除</strong>的文本<strong>行</strong>,<code>"1</code>保存的是最近一次删除的内容，如果又有新的操作，则将1保存到2中，然后1保存最新内容。</p>

<h2>2. 字母寄存器</h2>

<p>字母寄存器从a-z或者A-Z,其中指定a-z会替换掉他们先前存储的内容，而A-Z则会在它们先前保存的内容中追加新内容。</p>

<p>一般paste可能都通过来操作，这仅粘贴0或1寄存器中的内容,要想粘贴内容其他寄存器的内容，则需通过<code>寄存器的名称+p</code>来操作。如将内容保存到a寄存器中，则可在normal模式下输入<code>"ayy</code>，将光标当前行内容存储在a寄存器中，粘贴便可通过<code>"ap</code>来操作。</p>

<p>寄存器可能平时用不上，一般在需要录制宏的时候才会用到。想要更深入的了解，还是<code>:help registers</code>看帮助文档吧。</p>
]]></content>
  </entry>
  
</feed>
