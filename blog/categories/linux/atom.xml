<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | xautjzd]]></title>
  <link href="http://xautjzd.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://xautjzd.github.io/"/>
  <updated>2013-08-26T09:47:50+08:00</updated>
  <id>http://xautjzd.github.io/</id>
  <author>
    <name><![CDATA[xautjzd]]></name>
    <email><![CDATA[xautjzd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim文件的折叠与展开方式]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/25/vim-folding-and-unfolding/"/>
    <updated>2013-08-25T16:00:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/25/vim-folding-and-unfolding</id>
    <content type="html"><![CDATA[<p>最近一直在用Vim学习Ruby,但是一直有个问题困扰：</p>

<p>那就是文件无法折叠，但是我记得以前看过Vim的视频，里面见别人用到了折叠与展开。文件比较小时，此功能便无用，但一旦文件量大时，折叠与展开便显得尤为重要了。</p>

<p>折叠的方式有以下几种：</p>

<ol>
<li>manual</li>
<li>indent</li>
<li>syntax</li>
<li>marker</li>
<li>expr</li>
<li>diff</li>
</ol>


<h3>1. Manual method</h3>

<p>vim默认的折叠方式是此种方式，不需要设置即可。要启用其他方式还得采用<code>:set foldmethod=xxx</code>或者<code>:set fdm=xxx</code>来设置。</p>

<p><strong>使用方法</strong>：</p>

<p><code>v</code>或者<code>V</code>进入visual mode,然后选中要折叠的文字，按<code>zf</code>便可折叠，折叠后按<code>za</code>或者<code>zO</code>便展开。</p>

<p>同时也可以通过<code>zfnj</code>的方式将接下来的n行折叠。类似也有<code>zfnk</code>等;<code>zR</code>则打开所有的折叠。总结下来就是：</p>

<ul>
<li>zf        => create a fold</li>
<li>za        => unfold</li>
<li>zf#j  => fold down # lines</li>
<li>zf#k  => fold up #lines</li>
<li>zR        => unfold all</li>
</ul>


<h3>2. Indent method</h3>

<p>缩进方式主要是根据代码缩进的方式来折叠/展开代码。要使用缩进方式，则需要做配置，<code>:set foldmethod=indent</code>或者在~/.vimrc中配置：<code>set foldmethod=indent</code>。</p>

<p>其快捷键如下：
zM      => fold all
zR      => unfold all
za      => fold/unfold</p>

<h3>3. Syntax method</h3>

<p>采用syntax方式，则只需如下配置即可：</p>

<pre><code>:set fdm=syntax
</code></pre>

<p>按键方式与上述相似</p>

<h3>4. Marker method</h3>

<p> 使用markder方式，则做如下配置：</p>

<pre><code>:set foldmethod=marker
</code></pre>

<p> 或</p>

<pre><code>:set fdm=marker
</code></pre>

<p>默认的marker折叠/展开标记为<code>}</code>.</p>

<p>将要折叠/展开的代码通过<code>}</code>包含起来即可。当然也可以自定义标记。定义方法如下：</p>

<pre><code>:set foldmarker= start,end
eg: set foldmarker= /*,*/

/*
     1. Ruby
     2. Python
     3. C++
     4. PHP
*/
</code></pre>

<p>快捷键如下：</p>

<ul>
<li>za        => fold/unfold</li>
<li>zM        => fold all</li>
<li>zR        => unfold all</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim学习资源]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/18/vim-learning-resource/"/>
    <updated>2013-08-18T13:48:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/18/vim-learning-resource</id>
    <content type="html"><![CDATA[<h3>实用的快捷方式</h3>

<ul>
<li>gf  快速跳转到定义</li>
<li><code>&lt;C + 6&gt;</code>  返回到上次编辑的文档</li>
<li>%  括号匹配{}<a href=""></a></li>
<li><code>#/*,g#/g*</code>  向前/向后搜索光标所在的词</li>
<li>gi  跳转到上次编辑的位置</li>
<li>gi  显示光标所在字符的编码</li>
<li>gH  开始选择行模式</li>
<li>vi"  选中"之间的文本(不包括")</li>
<li>vi{  选中{之间的文本（不包括{）</li>
<li>ci(  改变之间的文本</li>
<li>di[  删除[之间的文本(不包括[)</li>
<li>da[  删除[之间的文本(包括[),ca、va类似</li>
<li>C  修改至行尾</li>
<li>D  删除至行尾</li>
</ul>


<!-- more -->


<ul>
<li>[{  跳转到光标所在位置的{.]},[(类似</li>
<li>F/f+char  向左/向右跳转到char的位置</li>
<li><code>&gt;&gt;</code>  缩进光标所在行。eg:5>></li>
<li><code>&lt;&lt;</code>  取消缩进光标所在行</li>
<li><code>&gt;%</code>  大括号及括号内的内容都缩进(光标需放在{或者}上)</li>
<li>==  文本对其当前行</li>
<li>=%  (re)indent the current braces{&hellip;}</li>
<li>gg=G  全文对齐</li>
<li>H  跳转到屏幕上方</li>
<li>M  跳转到屏幕中间</li>
<li>L  转到屏幕下方</li>
</ul>


<h3>参考文档</h3>

<ul>
<li><a href="http://c9s.blogspot.com">c9s</a>的<a href="http://c9s.blogspot.com/2009/08/vim-hacks-coscup.html">Vim Hacks</a></li>
<li><a href="http://vim.wikia.com/wiki/Best_Vim_Tips">Vim Tips</a></li>
<li><a href="http://www.vim.org/">Vim官网</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下截图工具shutter的安装与配置]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/16/install-and-config-shutter/"/>
    <updated>2013-08-16T16:57:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/16/install-and-config-shutter</id>
    <content type="html"><![CDATA[<p>我一直使用的是Fedora17，自带的截图工具实在不敢恭维，但也就这样断断续续的用着，不过也用的不多。但今天突然鬼使神差的搜了下其他的截图工具，Google搜了下，发现好多提到shutter，既然这么多文章都提到，说明肯定着实不赖，便尝试了下。安装及配置如下：</p>

<h3>1.安装</h3>

<p>安装过程很简单，执行下面命令即可：</p>

<pre><code>#yum install shutter
</code></pre>

<h3>2.配置</h3>

<p>QQ截图快捷键<code>&lt;ctrl&gt;+&lt;alt&gt;+A</code>用习惯了，所以也对shutter继续保留这个快捷键。具体配置方法如下：
在System Tools>System Settings>Keyboard>Shortcuts>Custom Shortcuts中添加了三个快捷键：</p>

<ul>
<li><p>截图整个屏幕（shutter -f）</p></li>
<li><p>截图当前活动窗口(shutter -a)</p></li>
<li><p>截图选定区域(shutter -s)</p></li>
</ul>


<p>具体配置及对应的快捷键设置参考下图：
<img src="/images/shutter-config.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端分屏工具tmux的安装与常用操作]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration/"/>
    <updated>2013-08-08T16:12:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration</id>
    <content type="html"><![CDATA[<h2>1. tmux简介</h2>

<p>tmux是terminal multiplexer的简称，是一款终端分屏的工具，可以在同一屏幕中划分出多个独立的shell环境，这样便于对比，唯一的缺陷是窗口比较小而已。一个server可以有多个session,一个session可以有多个windows,一个windows可以有多个pane.具体见<a href="http://tmux.sourceforge.net/">官网</a>介绍。</p>

<h2>2. 安装</h2>

<p>采用相应系统的包管理器即可安装。我装的是fedora,现以fedora为例：</p>

<pre><code>#yum install tmux
</code></pre>

<p>包不到1M大小，很快便安装完成。</p>

<!-- more -->


<h2>3. 操作</h2>

<p>首先，运行tmux。</p>

<pre><code>$tmux
</code></pre>

<p>然后可以水平分屏和纵向分屏。其常用的快捷键如下：</p>

<ul>
<li><p>水平分屏 :<code>&lt;c + b&gt; "</code>即按下ctrl + b后，再按双引号(shift + &lsquo;键)</p></li>
<li><p>垂直分屏 :<code>&lt;c + b&gt; %</code></p></li>
<li><p>新建窗口 :<code>&lt;c + b&gt; c</code></p></li>
<li><p>重命名窗口:<code>&lt;c + b&gt; ,</code></p></li>
<li><p>窗口切换 :<code>&lt;c + b&gt; number</code>，其中number为窗体的编号，从0开始。</p></li>
<li><p>切换到bash:<code>&lt;c + b&gt; d</code></p></li>
<li><p>切换回tmux:<code>$tmux attach</code></p></li>
<li><p>查看帮助文档：<code>&lt;c + b&gt; ?</code></p></li>
</ul>


<p>1.新建一个session</p>

<pre><code>tmux new-session -s sessionname(自己指定)
</code></pre>

<p>2.杀死一个session</p>

<pre><code>tmux kill-session -t sessionname
</code></pre>

<p>3.杀死所有session</p>

<pre><code>tmux kill-server
</code></pre>

<p>4.列出新建的session</p>

<pre><code>tmux ls(tmux list-sessions)
</code></pre>

<p>4.附加一个session</p>

<pre><code>tmux a -t sessionname
</code></pre>

<p>另外，tmux也非常适合结对编程，当两个人可以连接同一台电脑时，其中一个人在终端上的操作，另一个在终端能清楚的看到。操作方式如下：</p>

<p>A操作：$tmux new-session -s test</p>

<p>B操作：$tmux a(ttach) -t test</p>

<p>这样之后，A在终端上的一切操作B都能看到。</p>

<p>其他具体快捷方式，请参考帮助文档。</p>

<p>也可以参考：</p>

<p>1.<a href="http://happycasts.net/episodes/41?autoplay=true">http://happycasts.net/episodes/41?autoplay=true</a></p>

<p>2.<a href="http://caok1231.com/blog/2013/04/14/tmux/">http://caok1231.com/blog/2013/04/14/tmux/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim的代码自动补齐插件——UltiSnips]]></title>
    <link href="http://xautjzd.github.io/blog/2013/08/03/vim-ultisnips/"/>
    <updated>2013-08-03T15:12:00+08:00</updated>
    <id>http://xautjzd.github.io/blog/2013/08/03/vim-ultisnips</id>
    <content type="html"><![CDATA[<p>暑假时间充足，便又开始学习自己喜欢的Ruby。而学Ruby的最佳环境是Mac,其次是Linux,最次是Windows。Mac买不起，只能在Linux上折腾了，一台台式机装的Fedora17，自己的本是xp系统，装了不少微软的一套东西，毕竟教研室的项目都是在.net环境下进行的，不敢轻易换系统，所以便在本上装了个VirtualBox虚拟机，虚拟了一个Ubuntu。上面也配好了Ruby环境，毕竟本方便，带到哪里都可以学，但平时的Linux编程都是在台式机下，毕竟性能比虚拟机好。</p>

<p>而学习Ruby一般都是在Vim/Emacs/SublimeText 2下，RubyMine貌似很适合开发Ruby，由于是商业产品，没钱购买也就舍弃了，毅然决然的选择了Vim.都说高手使用的是Vim，想必必有可取之处。但是Vim的学习路线比较陡峭，开始是一段痛苦期，经过一段时间的摧残后，甜蜜的时光便来临了，各种强大而高效的插件让你目瞪口呆，顿时感觉其他IDE都蒻爆了。幸好我以前对Vim的基本操作便有了了解，所以再次学习起来便不那么痛苦，甚至不想回到Windows环境，不想再用其他的Editor。我现在用的插件并且给我印象深刻的大致有这么一些：Vundle,Ctrlp/command-T,UltiSnips/Snipmate,YouCompleteMe/SuperTab,NerdTree,Tagbar,FuzzyFinder,vim-rails，Markdown等。</p>

<!-- more -->


<p>其中Vundle作为Vim的插件管理神器必不可少，让安装插件变得非常方便，类似的插件也有pathogen。具体安装方法见<a href="https://github.com/gmarik/vundle">GitHub</a>.也可以参考我写的一篇关于Vundle的<a href="http://xautjzd.github.io/blog/2013/07/27/vim-vundle-install-and-config/">博文</a>。</p>

<p>而CtrlP则绝对是文件切换的神器，在多个文件间来回切换。也可以用:vs垂直分屏或者:sp水平分屏,这样最适合多个文件间的对比。&lt;ctrl-p>调出CtrlP候选文件,然后通过Up/Down键来选择文件。</p>

<p>UltiSnips则是自动补齐代码片段的神级插件，功能类似的有Snipmate插件。UltiSnips对常见的各种语言都有支持。代码补齐是通过编辑的文件后缀名来区分，如编辑xxx.html时，输入ul然后按Tab键则自动生成了<code>&lt;ul&gt;&lt;ul&gt;</code>片段，其他语言也类似，都有相应的关键字，具体每种语言的关键字参考UltiSnips目录下的xxx.snippets，自己也可以补充。</p>

<p>YouCompleteMe插件是一个代码提示功能，输入一部分然后就会出现候选的部分可供选择，不需要全部输入。类似的插件还有SuperTab。通过名字也可以看出它提供的候选词中也包括刚才输入的单词。默认的选择是通过Tab键来确定的，但由于和UltiSnips冲突，所以需要换默认的快捷方式，方法如下：</p>

<pre><code>"set YouCompleteMe trigger key 
let g:ycm_key_list_select_completion = ['&lt;c-n&gt;', '&lt;Down&gt;']
let g:ycm_key_list_previous_completion = ['&lt;c-p&gt;', '&lt;Up&gt;']
</code></pre>

<p>NerdTree提供一个目录结构，让习惯图形界面的朋友找到亲切感，作用不必多说。</p>

<p>Tagbar则配合ctags则提供文件的导航，将文件的关键字提取出来。ctags需要在目录下生成一个tags文件，生成方法:</p>

<pre><code>ctags -R yourdir  #生成tags文件
</code></pre>

<p>FuzzyFinder是一个模糊匹配的文件搜索插件。</p>
]]></content>
  </entry>
  
</feed>
