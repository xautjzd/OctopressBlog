<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Xautjzd]]></title>
  <link href="http://bebety.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://bebety.com/"/>
  <updated>2014-05-21T11:05:25+08:00</updated>
  <id>http://bebety.com/</id>
  <author>
    <name><![CDATA[xautjzd]]></name>
    <email><![CDATA[xautjzd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby环境的搭建]]></title>
    <link href="http://bebety.com/blog/2014/05/18/build-ruby-environment/"/>
    <updated>2014-05-18T11:50:00+08:00</updated>
    <id>http://bebety.com/blog/2014/05/18/build-ruby-environment</id>
    <content type="html"><![CDATA[<p><img src="/images/20140518.jpg"></p>

<h2>Ruby简介</h2>

<p>第一次听到Ruby这个名词，可能会比较陌生，进而产生畏惧，毕竟在中国这片区域普及率还不是很高，但在世界范围内还是有不错的影响力，如果有所质疑，可以参考<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">TIOBE</a>上Ruby的排名情况，进几年一直在前10左右徘徊。到目前为止，大家可能只了解到Ruby是一门编程语言，具体还未做了解，那这里引用<a href="https://www.ruby-lang.org/en/">Ruby官网</a>的解释，供大家参考：</p>

<blockquote><p>Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.</p></blockquote>

<p>用再多的语言描述都略显苍白，只有身临其中把玩一番才能有所体会，而且这种感触才最直观，最有说服力。这里，贴出一个网址，便可在浏览器中体验Ruby之美：</p>

<blockquote><p><a href="http://tryruby.org/levels/1/challenges/0">http://tryruby.org/levels/1/challenges/0</a></p></blockquote>

<p>请感受它的魅力所在吧。</p>

<!-- more -->


<h2>操作系统</h2>

<p>Ruby是跨平台的语言，所以Windows、Linux和Mac OS X都可安装，但不建议在Windows上搭建环境。如果身边确实没有Linux/Mac OS X环境，那么也可选择Windows。之所以不推荐Windows，原因有以下几点：</p>

<ul>
<li>Ruby/Rails在Windows上比较慢</li>
<li>一些gems和libraries在Windows环境不工作</li>
<li>社区大多使用Mac/Linux,如果在Windows环境使用出现问题可能难以解决</li>
</ul>


<p>所以尽量选择Linux/Mac。强烈建议新手选择Ubuntu，网上这方面的教程较多，碰到问题也容易解决。没有还没有Linux环境，并且对Linux系统不熟悉，那么建议先在虚拟机下安装Linux。虚拟机的选择有：</p>

<ul>
<li>Virgrant</li>
<li>VirtualBox</li>
<li>VMware</li>
</ul>


<p>以下教程主要针对Linux/Mac用户，如果实在要选择Windows，那么请在<a href="https://www.ruby-lang.org/zh_cn/downloads/">此处</a>下载Windows下的二进制安装包RubyInstaller。</p>

<h2>1. 安装RVM</h2>

<p>RVM(Ruby Version Manager)是一个使安装、管理和多个Ruby环境切换变得简单的命令行工具。通过它安装不同版本的Ruby环境和gems包变得简单容易。更为详细的解释，请参考<a href="https://rvm.io/">RVM官网</a>。</p>

<p><code>
$ \curl -sSL https://get.rvm.io | bash -s stable
</code></p>

<p>也可一步到位，直接安装RVM的同时安装上Ruby:</p>

<p><code>
$ \curl -sSL https://get.rvm.io | bash -s stable --ruby=2.1.2
</code></p>

<p>其中，<code>2.1.2</code>为指定的Ruby版本，当然也可省略版本号。安装完成后，重新加载RVM环境，使其配置有效。</p>

<p><code>
$ source ~/.rvm/scripts/rvm
</code></p>

<p>接下来检查下RVM是否安装成功：</p>

<p><code>
$ rvm -v
</code></p>

<p>如果显示<code>rvm xxx(stable) by Wayne E. ....</code>等信息便说明安装成功。</p>

<h2>2. RVM安装Ruby环境</h2>

<p><code>
$ rvm install 2.1.2
</code></p>

<p>安装过程可能比较漫长，耐心等待即可，编译安装完成后，Ruby和Ruby Gems也就安装成功。</p>

<h2>3. 设置Ruby版本</h2>

<p><code>
$ rvm use 2.1.2 --default
</code></p>

<p>这里, <code>2.1.2</code>为前面安装过的Ruby版本。</p>

<p>这时，可以检查是否正确安装配置：</p>

<p><code>
$ ruby -v
</code></p>

<p><code>
$ gem -v
</code></p>

<p>如果要安装<code>Rails</code>，直接通过：</p>

<p><code>
gem install rails
</code>
便可完成安装。更多有关<code>gem</code>的命令，请通过:<code>gem --help</code>查询。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby语言独特点]]></title>
    <link href="http://bebety.com/blog/2013/09/19/ruby-syntax-special-point/"/>
    <updated>2013-09-19T09:05:00+08:00</updated>
    <id>http://bebety.com/blog/2013/09/19/ruby-syntax-special-point</id>
    <content type="html"><![CDATA[<p>有时候真佩服别人的博文可以写的那么长，而且很有料，读起来也非常顺畅，而自己每次却不太善于总结，可能是平时积累的片段还不够，不足以总结，亦或是自己缺少这么一个总结性的思维，导致如今为止也没有产出一篇广为阅读的文章。不过即使如此，也没有打消我持续写博客的念头，不管好坏，不管是否有读者，我将会一如既往的写下去。正如哥哥的《我》:我就是我，是颜色不一样的烟火。每个人都有他存在的价值，无论高低贵贱，无论贫穷富贵，都有其独一无二不可替代的特性。所以无论自己的博文是否能带给大家一丝感触、一点帮助，我都会坚持，因为这也是对我自己学习的一个总结，同时也想尽力贡献一份自己的力量来帮助他人，但我想更多的还是能帮助自己，以便为未来某一天突然需要回味从前的知识提供便捷。我想这便是写博客的初衷。下面进入正题吧：</p>

<!-- more -->


<h2>无须声明变量</h2>

<p>Ruby第一个独特之处我想应该是定义变量时无须指定变量类型吧。eg:</p>

<pre><code>time = Time.now
i = 1
text = "hello,world"
</code></pre>

<p>虽说变量定义时无类型，但是当为其赋值后类型便确定了。</p>

<h2>一切皆对象</h2>

<p>另一个特点应该非<code>一切皆对象</code>莫属了，即使是简单的变量也是一个对象，可通过class方法查看其类型：</p>

<pre><code>1.class           #=&gt;Fixnum
1.1.class         #=&gt;Float
"test".class      #=&gt;String
[].class          #=&gt;Array
{}.class          #=&gt;Hash
</code></pre>

<h2>Mixin</h2>

<p>而Mixin应该算是其第三个独特之处，通过在Class中mixin Module以达到类似c++里面的多重继承吧，虽然ruby中没有多重继承这个概念。eg:</p>

<pre><code>module Hello
    def say_hello
     puts "hello!"
    end
end

class TestClass
    include Hello
end
</code></pre>

<p>这样TestClass即使内容为空，但因为有Hello的mixin，所以也拥有say_hello方法。</p>

<h2>yield</h2>

<p>yield真的是Ruby的一大亮点，也是我所学所了解的语言当中最独特的部分，同时也是我深爱Ruby的原因。yield通俗的讲其实就是一个占位符，提前帮block占好位置。block可以再程序运行的时候动态传给方法。eg:</p>

<pre><code>class Test
    @data = [1, 2, 3, 4]

    def test
        if block_given?
            @data.each { |e| yield(e) }
        else
            puts "please give block"
        end
    end
end

obj = Test.new
obj.test { |x| puts x*x }  #=&gt;1, 4, 9, 16
</code></pre>

<p>定义时可以不指定具体操作，先用yield占位，然后待到具体操作时，将具体处理的block传入方法。</p>

<h2>写在结尾的话</h2>

<p>自己断断续续学习Ruby大致也不到一年时光，所以理解也不是很深入，只将我自己所理解的所看到的所学到的列举出来。其实自己也看过《Meta Programming》，深深为method_missing，eval等所折服，但是还是理解不到家，所以也不敢妄自胡言乱语，以免贻笑大方。深入的东西留待后续的学习吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[instance_eval vs class_eval]]></title>
    <link href="http://bebety.com/blog/2013/09/17/instance-eval-vs-class-eval/"/>
    <updated>2013-09-17T20:54:00+08:00</updated>
    <id>http://bebety.com/blog/2013/09/17/instance-eval-vs-class-eval</id>
    <content type="html"><![CDATA[<p>Ruby中类其实也是Class的实例。而且instance_eval必须由实例来调用，class_eval必须由类来调用。具体参考下面的实例：</p>

<pre><code><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="kp">new</span> <span class="n">A</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">self</span> <span class="c1">#=&amp;gt;a</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;this is a singleton method of instance a&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">test</span>   <span class="c1">#=&amp;gt;this is a singleton method of instance a</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">test</span>   <span class="c1">#=&amp;gt;NoMethodError</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<!-- more -->


<p>test的receiver为实例a.同时类A本身也是Class类的实例，所以也可以作为instance_eval的receiver，作为该类的singleton method，及常说的类方法，只能通过类名调用。</p>

<pre><code><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;this is a singleton method of class A&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">test</span>  <span class="c1">#=&amp;gt;this is ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>而class_eval则receiver则必须为类</p>

<pre><code><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">self</span>  <span class="c1">#=&amp;gt;A</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;this is a instance method of class A&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="kp">new</span> <span class="n">A</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">test</span>   <span class="c1">#=&amp;gt;this is a instance method of class A</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>class_eval定义的method为类的instance method。</p>

<p>这就是它们二者之间的差别</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中symbol与string的区别]]></title>
    <link href="http://bebety.com/blog/2013/08/18/difference-between-symbol-and-string/"/>
    <updated>2013-08-18T20:50:00+08:00</updated>
    <id>http://bebety.com/blog/2013/08/18/difference-between-symbol-and-string</id>
    <content type="html"><![CDATA[<p>记得当初学习Ruby基本语法时，还为Symbol与String的异同纠结了好久，后来经过一段时间的摸索，大致有了了解，但让我给他人解释，这点我还是办不到。但是今天看到了一篇<a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">博文</a>,让我彻底明白他们的区别。</p>

<h3>symbol定义</h3>

<p>Symbol其实就是string加上前缀：。</p>

<h3>二者异同点</h3>

<p>其实Symbol与String本质相同，是string 的两种不同呈现方式。由于受SmallTalk影响，Ruby一切皆对象。所以每次给string赋值，<code>name="xautjzd"</code>其实都是在内存中创建一个新对象。每次创建的对象的object_id都不相同。</p>

<p>而symbol则不同，symbol创建一次即可。以后所有的操作都是指向先前创建的对象。所以object_id相同。</p>

<p>不同点大致有三：
1. symbol为常量，值不能改变。
2. 多次使用同一个symbol,object_id相同，而多次使用string,每个对象有不同的object_id。
3. String的方法,eg:#upcase,#split不能用于Symbol。</p>

<h3>参考网址</h3>

<p><a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html</a>(<a href="http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html">http://www.gaurishsharma.com/2013/04/understanding-differences-between-symbols-strings-in-ruby.html</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora17下搭建Ruby和Rails环境]]></title>
    <link href="http://bebety.com/blog/2013/07/29/install-ruby-and-rails/"/>
    <updated>2013-07-29T20:59:00+08:00</updated>
    <id>http://bebety.com/blog/2013/07/29/install-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>不同的项目所用的ruby版本不同，所以为了方便不同项目ruby版本的切换，需要在同一个系统中安装多个ruby版本，并且针对不同的项目在不同的版本间切换，为了方便ruby版本的管理，采用<a href="https://rvm.io/">RVM</a>进行管理。</p>

<h2>1.安装RVM</h2>

<pre><code>#curl -L https://get.rvm.io | bash -s stable
</code></pre>

<p>一会儿之后rvm便安装完成,安装位置为/usr/local/rvm目录下，网上很多教程都是使用一般用户权限管理，但是我也尝试过采用一般用户权限安装，但是始终不会安装在~/usrname/.rvm目录下，还是提示安装在/usr/local/rvm下，但是没有写的权限。可能是fedora系统的原因吧，没有深究。使用：</p>

<pre><code>#source /usr/local/rvm/scripts/rvm
</code></pre>

<p>使rvm配置生效。然后采用：</p>

<pre><code>#rvm -v
</code></pre>

<p>查看rvm的版本。同时也可以通过<code>rvm info</code>查看rvm相关信息。</p>

<!-- more -->


<h2>2.安装Ruby环境</h2>

<p>使用<code>rvm install 1.9.3</code>会默认选择<code>http://ruby-lang.org</code>网站下载ruby源码然后进行编译，这样太慢。幸好淘宝提供了<a href="http://ruby.taobao.org/mirrors/ruby/">ruby的下载源</a>，我此次便采用的是先在淘宝的ruby源下载我想要的ruby版本1.9.3-p448，下载完成后，将其放到/usr/local/rvm/archives/目录下，然后再执行<code>rvm install 1.9.3-p448</code>，它便能识别已有的ruby源码包，进行解压和编译一系列过程。大致几分钟便可完成。</p>

<p>下面是我采用一般用户权限安装ruby出错。</p>

<pre><code><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>一般用户安装ruby出错 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rvm install 1.9.3-p448
</span><span class='line'>Searching <span class="k">for </span>binary rubies, this might take some time.
</span><span class='line'>No binary rubies available <span class="k">for</span>: fedora/17/i386/ruby-1.9.3-p448.
</span><span class='line'>Continuing with compilation. Please <span class="nb">read</span> <span class="s1">&#39;rvm help mount&#39;</span> to get more information on binary rubies.
</span><span class='line'>Installing requirements <span class="k">for </span>fedora, might require sudo password.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /usr/local/rvm/rubies/ruby-1.9.3-p448, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.9.3-p448 - <span class="c">#downloading ruby-1.9.3-p448, this may take a while depending on your connection...</span>
</span><span class='line'>Archive checksum did not match, downloading again.
</span><span class='line'>rm: cannot remove <span class="sb">`</span>ruby-1.9.3-p448.tar.bz2<span class="s1">&#39;: Permission denied</span>
</span><span class='line'><span class="s1">curl: Can&#39;</span>t open <span class="s1">&#39;ruby-1.9.3-p448.tar.bz2&#39;</span>!
</span><span class='line'>curl: try <span class="s1">&#39;curl --help&#39;</span> or <span class="s1">&#39;curl --manual&#39;</span> <span class="k">for </span>more information
</span><span class='line'>There was an error<span class="o">(</span>23<span class="o">)</span>, please check /usr/local/rvm/log//*.log. Next we<span class="s1">&#39;ll try to fetch via http.</span>
</span><span class='line'><span class="s1">Trying ftp:// URL instead.</span>
</span><span class='line'><span class="s1">curl: Can&#39;</span>t open <span class="s1">&#39;ruby-1.9.3-p448.tar.bz2&#39;</span>!
</span><span class='line'>curl: try <span class="s1">&#39;curl --help&#39;</span> or <span class="s1">&#39;curl --manual&#39;</span> <span class="k">for </span>more information
</span><span class='line'>There was an error<span class="o">(</span>23<span class="o">)</span>, please check /usr/local/rvm/log//*.log
</span><span class='line'>There has been an error fetching the ruby interpreter. Halting the installation.
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2>3.设置Ruby版本</h2>

<p>通常系统都会安装多个Ruby版本，可通过<code>rvm list</code>查看系统已安装的ruby版本。但需要指定某一版本为系统默认版本。</p>

<pre><code>#rvm use 1.9.3 --default
</code></pre>

<p>我使用的版本为1.9.3，所以指定为默认版本。</p>

<p>安装Ruby的过程中会自动安装gem，通过下列方法查看其版本</p>

<pre><code>#ruby -v
#gem -v
</code></pre>

<p>同时替换gem的下载源为淘宝源：</p>

<pre><code>#gem source -r https://rubygems.org
#gem source -a http://ruby.taobao.org
</code></pre>

<h2>4.安装Rails环境</h2>

<p>采用：</p>

<pre><code>#gem install bundler rails
</code></pre>

<p>安装bundle和rails。</p>

<p>安装完成后进行测试：</p>

<pre><code>#rails -v
#bundle -v
</code></pre>
]]></content>
  </entry>
  
</feed>
