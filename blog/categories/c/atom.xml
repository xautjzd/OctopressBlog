<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | Xautjzd]]></title>
  <link href="http://bebety.com/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://bebety.com/"/>
  <updated>2014-05-24T16:20:31+08:00</updated>
  <id>http://bebety.com/</id>
  <author>
    <name><![CDATA[xautjzd]]></name>
    <email><![CDATA[xautjzd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unix C的文件指针与文件描述符]]></title>
    <link href="http://bebety.com/blog/2014/05/21/file-pointer-and-file-descriptor-about-c/"/>
    <updated>2014-05-21T09:59:00+08:00</updated>
    <id>http://bebety.com/blog/2014/05/21/file-pointer-and-file-descriptor-about-c</id>
    <content type="html"><![CDATA[<p><img src="/images/20140521.jpg"></p>

<p>AISC C中通常用文件指针FILE *进行文件的操作，如fopen, fclose, fread, fwrite, fscanf, fprintf等函数，都是通过文件指针进行文件的一系列操作；而类Unix系统则大多用文件描述符(file descriptor)进行文件的操作，如open, close, read, write等函数，文件描述符是一个整数，是文件描述符表(file descriptor table)中的索引(文件描述符表其实是维护进程打开的文件)。当进程打开或者创建一个文件，内核便会在此进程对应的文件描述符表中分配一个位置，然后便可通过文件描述符操作文件。</p>

<!-- more -->


<p>在内核中，每个进程都拥有自己的文件描述符表，表示此进程已打开的所有文件。文件描述符表中每一项其实是一个指针，指向文件表(file table)中用于描述打开文件的数据块——file对象，file对象其实是一个file结构体，有关file结构体的定义，请参考:include/linux.fs.h文件。file结构体包含了文件的打开模式、读写位置等重要信息，当进程打开一个文件时，内核便会创建一个新的file对象。这里要注意的是,file对象不专属于某个进程，不同进程的文件描述符表中的指针可以指向相同的file对象，从而达到共享打开的文件。file对象有引用计数，记录引用这个对象的文件描述符个数，只有当引用计数为0，内核才会销毁该file对象，所以某个进程关闭文件，并不影响与之共享同一个file对象的进程。file对象中包含一个指针，指向dentry对象。dentry对象代表一个独立的文件路径，如果一个文件被打开多次，那么便会建立多个file对象，但他们都指向同一个dentry对象。</p>

<p>dentry对象又包含一个指向inode对象的指针。inode对象代表一个独立的文件，因为存在硬链接与符号链接，因此不同的dentry对象可以指向同一个inode对象，inode对象包含最终对文件进此操作所需的所有信息，如文件系统类型、文件操作方法、文件权限、访问日期等。</p>

<p>打开文件后，返回的文件描述符实质上是文件描述符表的索引，根据索引对应的指针访问对应的file对象，然后根据file对象访问对应的dentry，根据dentry对应的inode，从而实现文件的操作。</p>

<h2>转换关系</h2>

<p>有关文件指针与文件描述符及文件路径(包含文件名)之间的转换关系如下：</p>

<ul>
<li>文件路径->文件指针: filepath&mdash;fopen()&mdash;>FILE *;</li>
<li><p>文件路径->文件描述符: filepath&mdash;open()&mdash;>fd;</p></li>
<li><p>文件描述符->文件指针: fd&mdash;fdopen()&mdash;>FILE *;</p></li>
<li><p>文件描述符->文件路径: fd&mdash;readlink(/proc/%getpid()/fd/%fd)&mdash;>filepath;</p></li>
<li><p>文件指针->文件描述符: FILE *&mdash;fileno()&ndash;>fd;</p></li>
</ul>


<p>下面通过一个例子展示文件描述符与文件指针间的关系:</p>

<p>```c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;unistd.h></h1>

<p>int main(char **argv, int argc)
{</p>

<pre><code>int fd;
FILE *fp;
char proclnk[255];
char filepath[255];

# test.txt为已存在的文件
fp = fopen("test.txt", "r");
if (fp != NULL) {
    fd = fileno(fp);
    sprintf(proclnk, "/proc/self/fd/%d", fd);
    readlink(proclnk, filepath, 255);

    printf("fp-&gt;fd-&gt;filepath: %p-&gt;%d-&gt;%s\n", fp, fd, filepath);
}

return 0;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言中的Segment fault问题]]></title>
    <link href="http://bebety.com/blog/2014/03/15/segment-fault-core-dumped-of-c/"/>
    <updated>2014-03-15T20:47:00+08:00</updated>
    <id>http://bebety.com/blog/2014/03/15/segment-fault-core-dumped-of-c</id>
    <content type="html"><![CDATA[<p><img src="/images/20140315.jpg"></p>

<h2>什么是Segment fault?</h2>

<blockquote><p> a segmentation fault (often shortened to segfault) or access violation is a fault raised by hardware with memory protection, notifying an operating system (OS) about a memory access violation; on x86 computers this is a form of general protection fault.</p></blockquote>

<p>以上为<a href="http://en.wikipedia.org/wiki/Segmentation_fault">Wikipedia</a>对段错误的解释。用通俗易懂的话来说就是访问越界，访问了不存在或者受操作系统保护的内存，通常都是由于数组越界或者指针引起。</p>

<h2>产生段错误的原因</h2>

<ol>
<li>dereferencing NULL</li>
<li>dereferencing an uninitialized pointer</li>
<li>deferencing a pointer that has been freed/out of scope</li>
<li>writing off the end of an array</li>
<li>recursive function that uses all of the stack space</li>
</ol>


<!-- more -->


<h2>什么是core文件？</h2>

<p>在调试段错误前，不得不提到core文件。那么什么是core文件呢?core文件其实就是当程序崩溃时保存的该进程在内存中的映像(同时包含调试信息),主要用于调试。</p>

<h2>如何调试？</h2>

<p>像VS等IDE集成度太高，在方便快捷的同时也会将人培养成傻瓜，培养成码农。所以要想抱着以学习的心态来学习，最好转到Linux/Mac OS平台下，通过gcc/cmake等command-line式的编译器来进行代码的编译，当然我这里主要指的是c/c++。</p>

<p>Linux段错误时默认不会生成core file，core file的大小被设置为0,可通过<code>ulimit -a</code>查看。所以首先得通过<code>$ulimit -c unlimited</code>进行设置，以便能够生成core file。但在shell里设置的话，只是针对当前会话有效，如果想永久生效，需要将其写到配置文件中，如~/.bashrc, /etc/profile/, /etc/security/limits.conf等中。</p>

<p>设置完成后，便可通过gdb和gcc来调试程序了。如果一个程序存在段错误问题，那么执行<code>$gcc filename.c -g -o filename</code>进行编译后，在运行<code>filename</code>的时候，会在当前的目录下产生一个core文件。那么这个时候便可以利用core文件进行调试了。调试方法为:</p>

<pre><code>$gdb [exec file] [core file]
</code></pre>

<p>有关gdb的详细用法，请参考相关文档去吧。</p>

<p>段错误实质上是操作系统内核产生的一种中断信号，信号为12。有关信号的知识，请参考操作系统相关的书籍。可通过<code>kill -s SIGSEGV processid</code>来给指定的进程id发送段错误信号，段错误默认处理方法是终止程序的运行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dead Code]]></title>
    <link href="http://bebety.com/blog/2013/09/29/dead-code/"/>
    <updated>2013-09-29T10:09:00+08:00</updated>
    <id>http://bebety.com/blog/2013/09/29/dead-code</id>
    <content type="html"><![CDATA[<p>今天在网上看到腾讯的一个实习生招聘题，里面提到了dead code，便上wikipedia查了下，解释如下：</p>

<p>在计算机编程中，dead code是指那些被执行但执行结果在其他地方没有用到的代码。dead code的执行耗费cpu时间但是结果无用。</p>

<p>dead code的执行结果没用也就罢了，但它还可能同时导致异常或影响某些全局状态，所以移除这些dead code可能会改变程序的输出，并且排除那些意想不到的bugs。</p>

<p>参考文档：</p>

<p><a href="http://en.wikipedia.org/wiki/Dead_code">http://en.wikipedia.org/wiki/Dead_code</a></p>
]]></content>
  </entry>
  
</feed>
